name: '[Backend] Deploy Media for stg'
on:
  push:
    branches:
    - 'main'
    paths:
    - '.github/actions/**'
    - '.github/workflows/_build_and_push.yaml'
    - '.github/workflows/_deploy_lambda.yaml'
    - '.github/workflows/cd-media-for-stg.yaml'
    - 'api/config/media/**'
    - 'api/internal/media/**'
    - 'api/pkg/**'
    - 'api/go.mod'
    - 'infra/docker/api/**'

env:
  TZ: 'Asia/Tokyo'

permissions:
  id-token: write
  contents: read

jobs:
  set_output:
    name: set output
    environment: stg
    runs-on: ubuntu-latest
    outputs:
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}
      lambda-function-name-uploader: ${{ vars.LAMBDA_FUNCTION_MEDIA_UPLOADER }}
      lambda-function-name-start-scheduler: ${{ vars.LAMBDA_FUNCTION_MEDIA_START_SCHEDULER }}
      lambda-function-name-close-scheduler: ${{ vars.LAMBDA_FUNCTION_MEDIA_CLOSE_SCHEDULER }}
      lambda-function-name-start-updater: ${{ vars.LAMBDA_FUNCTION_MEDIA_START_UPDATER }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

  build_and_push:
    name: build and push
    needs:
    - set_output
    uses: ./.github/workflows/_build_and_push.yaml
    secrets: inherit
    with:
      environment: stg
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      service: media
      image-path: ./infra/docker/api/Dockerfile
      image-tag: latest

  deploy_uploader:
    name: deploy uploader
    needs:
    - set_output
    - build_and_push
    uses: ./.github/workflows/_deploy_lambda.yaml
    secrets: inherit
    with:
      environment: stg
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      lambda-function-name: ${{ needs.set_output.outputs.lambda-function-name-uploader }}

  deploy_start_scheduler:
    name: deploy start scheduler
    needs:
    - set_output
    - build_and_push
    uses: ./.github/workflows/_deploy_lambda.yaml
    secrets: inherit
    with:
      environment: stg
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      lambda-function-name: ${{ needs.set_output.outputs.lambda-function-name-start-scheduler }}

  deploy_close_scheduler:
    name: deploy close scheduler
    needs:
    - set_output
    - build_and_push
    uses: ./.github/workflows/_deploy_lambda.yaml
    secrets: inherit
    with:
      environment: stg
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      lambda-function-name: ${{ needs.set_output.outputs.lambda-function-name-close-scheduler }}

  deploy_start_updater:
    name: deploy start updater
    needs:
    - set_output
    - build_and_push
    uses: ./.github/workflows/_deploy_lambda.yaml
    secrets: inherit
    with:
      environment: stg
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      lambda-function-name: ${{ needs.set_output.outputs.lambda-function-name-start-updater }}
