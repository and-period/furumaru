name: '[Backend] Deploy Messenger Scheduler for main'
on:
  push:
    branches:
    - 'main'
    paths:
    - '.github/workflows/cd-messenger-scheduler-for-main.yaml'
    - 'api/**'
    - 'infra/docker/api/**'
    - 'infra/kubernetes/**'

env:
  TZ: 'Asia/Tokyo'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_MESSENGER_SCHEDULER }}
  ECR_IMAGE_TAG: ${{ github.sha }}
  LAMBDA_FUNCTION: ${{ secrets.STG_LAMBDA_FUNCTION_MESSENGER_SCHEDULER }}
  IMAGE_PATH: ./infra/docker/api/messenger/scheduler/Dockerfile

jobs:
  build_and_deploy:
    name: deploy and deploy
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest] # exclude: macos-latest, windows-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set ECR_REPOSITORY_URL
      run: |
        echo "ECR_REPOSITORY_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}" >> $GITHUB_ENV

    - name: Configure AWS credentials from IAM Role
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        ECR_REPOSITORY_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}
        docker build -f ${IMAGE_PATH} -t ${ECR_REPOSITORY_URL} .
        docker tag ${ECR_REPOSITORY_URL} ${ECR_REPOSITORY_URL}:${ECR_IMAGE_TAG}
        docker tag ${ECR_REPOSITORY_URL} ${ECR_REPOSITORY_URL}:latest
        docker push -a ${ECR_REPOSITORY_URL}

    - name: Deploy AWS Lambda function
      run: |
        aws lambda update-function-code \
          --function-name="${LAMBDA_FUNCTION}" \
          --image-uri="${ECR_REPOSITORY_URL}:${ECR_IMAGE_TAG}" \
        | jq '. | del(.Environment)'
