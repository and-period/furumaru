name: '[Backend] Deploy Gateway for prd'
on:
  workflow_run:
    workflows: ['Create Release Pull Request']
    types:
    - completed

env:
  TZ: 'Asia/Tokyo'

permissions:
  id-token: write
  contents: read

jobs:
  set_output:
    name: set output
    environment: prd
    runs-on: ubuntu-latest
    outputs:
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_GATEWAY }}
      ecs-cluster-name: ${{ vars.ECS_CLUSTER }}
      ecs-task-definition-admin: ${{ vars.ECS_TASK_DEFINITION_ADMIN }}
      ecs-task-definition-user: ${{ vars.ECS_TASK_DEFINITION_USER }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

  get_image_tag:
    name: get image tag
    uses: ./.github/workflows/_tag_version.yaml
    secrets: inherit

  build_and_push:
    name: build and push
    needs:
    - set_output
    - get_image_tag
    uses: ./.github/workflows/_build_and_push.yaml
    secrets: inherit
    with:
      environment: prd
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      service: gateway
      image-path: ./infra/docker/api/Dockerfile
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}

  deploy_admin:
    name: deploy admin
    needs:
    - set_output
    - get_image_tag
    - build_and_push
    uses: ./.github/workflows/_deploy_ecs.yaml
    secrets: inherit
    with:
      environment: prd
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      ecs-cluster-name: ${{ needs.set_output.outputs.ecs-cluster-name }}
      ecs-task-definition: ${{ needs.set_output.outputs.ecs-task-definition-admin }}
      ecs-service-name: admin
      ecs-container-name: server
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}

  deploy_user:
    name: deploy user
    needs:
    - set_output
    - get_image_tag
    - build_and_push
    uses: ./.github/workflows/_deploy_ecs.yaml
    secrets: inherit
    with:
      environment: prd
      ecr-registry: ${{ needs.set_output.outputs.ecr-registry }}
      ecr-repository: ${{ needs.set_output.outputs.ecr-repository }}
      ecs-cluster-name: ${{ needs.set_output.outputs.ecs-cluster-name }}
      ecs-task-definition: ${{ needs.set_output.outputs.ecs-task-definition-user }}
      ecs-service-name: user
      ecs-container-name: server
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
