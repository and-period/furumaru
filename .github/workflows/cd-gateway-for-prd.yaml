name: '[Backend] Deploy Gateway for prd'
on:
  push:
    tags:
    - 'v*'
    paths:
    - '.github/workflows/cd-gateway-for-prd.yaml'
    - 'api/config/gateway/**'
    - 'api/internal/**'
    - 'api/pkg/**'
    - 'api/go.mod'
    - 'infra/docker/api/**'

env:
  TZ: 'Asia/Tokyo'
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_GATEWAY }}
  ECS_CLUSTER: ${{ secrets.PRD_ECS_CLUSTER }}
  ECS_SERVICE_ADMIN: admin
  ECS_SERVICE_USER: user
  ECS_CONTAINER_ADMIN: server
  ECS_CONTAINER_USER: server
  ECS_TASK_DEFINITION_ADMIN: ${{ secrets.PRD_ECS_TASK_DEFINITION_ADMIN }}
  ECS_TASK_DEFINITION_USER: ${{ secrets.PRD_ECS_TASK_DEFINITION_USER }}
  IMAGE_PATH: ./infra/docker/api/Dockerfile
  SERVICE: gateway

permissions:
  id-token: write
  contents: read

jobs:
  get_image_tag:
    name: get image tag
    secrets: inherit
    uses: ./.github/workflows/_get_tag_version.yaml

  build_and_push:
    name: build and push
    needs: get_image_tag
    secrets: inherit
    uses: ./.github/workflows/_build_and_push.yaml
    with:
      ecr-repository: ${{ env.ECR_REPOSITORY }}
      ecr-registry: ${{ env.ECR_REGISTRY }}
      service: ${{ env.SERVICE }}
      image-path: ${{ env.IMAGE_PATH }}
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}

  deploy_admin:
    name: deploy admin
    needs: build_and_push
    uses: .github/workflows/_backend_deploy_ecr.yaml
    with:
      ecr-image-uri: ${{ needs.build_and_push.outputs.image-uri }}
      ecs-task-definition: ${{ env.ECS_TASK_DEFINITION_ADMIN }}
      ecs-cluster-name: ${{ env.ECS_CLUSTER }}
      ecs-service-name: ${{ env.ECS_SERVICE_ADMIN }}
      ecs-container-name: ${{ env.ECS_CONTAINER_ADMIN }}

  deploy_user:
    name: deploy user
    needs: build_and_push
    uses: .github/workflows/_backend_deploy_ecr.yaml
    with:
      ecr-image-uri: ${{ needs.build_and_push.outputs.image-uri }}
      ecs-task-definition: ${{ env.ECS_TASK_DEFINITION_USER }}
      ecs-cluster-name: ${{ env.ECS_CLUSTER }}
      ecs-service-name: ${{ env.ECS_SERVICE_USER }}
      ecs-container-name: ${{ env.ECS_CONTAINER_USER }}
