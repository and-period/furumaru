name: '[Backend] Build and Test'
on:
  push:
    paths:
    - '.github/actions/**'
    - '.github/workflows/ci-backend.yaml'
    - 'api/**'
    - 'infra/docker/api/**'
    - 'infra/docker/infra/tidb/**'
    - 'infra/tidb/**'

env:
  SERVICE: api
  TZ: 'Asia/Tokyo'
  DB_DRIVER: mysql
  DB_HOST: 127.0.0.1
  DB_PORT: 4000
  DB_USERNAME: root
  DB_PASSWORD: ''
  GOFLAGS: -buildvcs=false

jobs:
  setup:
    name: setup
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - uses: ./.github/actions/setup-go
      with:
        working-directory: ./api
        service: ${{ env.SERVICE }}

  lint:
    name: lint
    needs: setup
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - uses: ./.github/actions/setup-go
      with:
        working-directory: ./api
        service: ${{ env.SERVICE }}

    - name: golangci-lint
      uses: reviewdog/action-golangci-lint@f9bba13753278f6a73b27a56a3ffb1bfda90ed71 # v2.8.0
      with:
        workdir: ./api
        golangci_lint_flags: "--config=.golangci.yaml"
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: github-pr-review
        filter_mode: diff_context
        fail_level: error

  build:
    name: build
    needs: setup
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api
    strategy:
      matrix:
        os: [ubuntu-latest]
        service: [gateway, media, messenger]

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - uses: ./.github/actions/setup-go
      with:
        working-directory: ./api
        service: ${{ env.SERVICE }}

    - name: Cache Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('api/go.mod', 'api/go.sum') }}-build-${{ matrix.service || github.job }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('api/go.mod', 'api/go.sum') }}
          ${{ runner.os }}-go-

    - name: Build
      run: make build SERVICE=${{ matrix.service }}

  test:
    name: test
    needs: setup
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - uses: ./.github/actions/setup-go
      with:
        working-directory: ./api
        service: ${{ env.SERVICE }}

    - uses: ./.github/actions/setup-tidb

    - name: Cache Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('api/go.mod', 'api/go.sum') }}-test
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('api/go.mod', 'api/go.sum') }}
          ${{ runner.os }}-go-

    - name: Database Migration
      run: |
        go run ./hack/database-migrate-tidb/main.go \
          -db-driver=${DB_DRIVER} \
          -db-host=${DB_HOST} \
          -db-port=${DB_PORT} \
          -db-username=${DB_USERNAME} \
          -db-password=${DB_PASSWORD}

    - name: Test
      run: make test

    - uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        flags: api
        verbose: true

  docs:
    name: docs
    needs: setup
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: ./api
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - uses: ./.github/actions/setup-go
      with:
        working-directory: ./api
        service: ${{ env.SERVICE }}

    - name: Generate API docs
      run: make docs-all

  success:
    name: success
    needs:
    - lint
    - build
    - test
    - docs
    if: always()
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - name: failure
      if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: |
        echo "$json"
        exit 1
      env:
        json: ${{ toJSON(needs) }}
