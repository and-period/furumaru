name: '[Backend] Deploy Media for prd'
on:
  push:
    tags:
    - 'v*'
    paths:
    - '.github/actions/**'
    - '.github/workflows/cd-media-for-prd.yaml'
    - '.github/workflows/_backend_build_and_push.yaml'
    - '.github/workflows/_backend_deploy_lambda.yaml'
    - '.github/workflows/_get_tag_version.yaml'
    - 'api/config/media/**'
    - 'api/internal/media/**'
    - 'api/pkg/**'
    - 'api/go.mod'
    - 'infra/docker/api/**'

env:
  TZ: 'Asia/Tokyo'

permissions:
  id-token: write
  contents: read

jobs:
  get_image_tag:
    name: get image tag
    secrets: inherit
    uses: ./.github/workflows/_get_tag_version.yaml

  build_and_push:
    name: build and push
    needs: get_image_tag
    uses: ./.github/workflows/_backend_build_and_push.yaml
    with:
      service: media
      image-path: ./infra/docker/api/Dockerfile
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
    secrets:
      aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ secrets.AWS_REGION }}
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}

  deploy_uploader:
    name: deploy uploader
    needs: build_and_push
    uses: ./.github/workflows/_backend_deploy_lambda.yaml
    with:
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
    secrets:
      aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ secrets.AWS_REGION }}
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}
      lambda-function-name: ${{ vars.PRD_LAMBDA_FUNCTION_MEDIA_UPLOADER }}

  deploy_resizer:
    name: deploy resizer
    needs: build_and_push
    uses: ./.github/workflows/_backend_deploy_lambda.yaml
    with:
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
    secrets:
      aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ secrets.AWS_REGION }}
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}
      lambda-function-name: ${{ vars.PRD_LAMBDA_FUNCTION_MEDIA_RESIZER }}

  deploy_start_scheduler:
    name: deploy start scheduler
    needs: build_and_push
    uses: ./.github/workflows/_backend_deploy_lambda.yaml
    with:
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
    secrets:
      aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ secrets.AWS_REGION }}
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}
      lambda-function-name: ${{ vars.PRD_LAMBDA_FUNCTION_MEDIA_START_SCHEDULER }}

  deploy_close_scheduler:
    name: deploy close scheduler
    needs: build_and_push
    uses: ./.github/workflows/_backend_deploy_lambda.yaml
    with:
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
    secrets:
      aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ secrets.AWS_REGION }}
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}
      lambda-function-name: ${{ vars.PRD_LAMBDA_FUNCTION_MEDIA_CLOSE_SCHEDULER }}

  deploy_start_updater:
    name: deploy start updater
    needs: build_and_push
    uses: ./.github/workflows/_backend_deploy_lambda.yaml
    with:
      image-tag: ${{ needs.get_image_tag.outputs.tag-version }}
    secrets:
      aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ secrets.AWS_REGION }}
      ecr-registry: ${{ vars.ECR_REGISTRY }}
      ecr-repository: ${{ vars.ECR_REPOSITORY_MEDIA }}
      lambda-function-name: ${{ vars.PRD_LAMBDA_FUNCTION_MEDIA_START_UPDATER }}
