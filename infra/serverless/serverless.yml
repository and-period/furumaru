service: mediaService

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  account: ${self:custom.envMap.${self:provider.stage}.accountId}
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${self:custom.envMap.${self:provider.stage}.region}
  vpc:
    securityGroupIds: ${self:custom.envMap.${self:provider.stage}.vpc.securityGroups}
    subnetIds: ${self:custom.envMap.${self:provider.stage}.vpc.subnetIds}
  iam:
    role: defaultRole
  profile: ${env:AWS_PROFILE, 'default'}

custom:
  defaultStage: stg
  envMap:
    prd: ${file(env/prd.yaml)}
    stg: ${file(env/stg.yaml)}

resources:
  Resources:
    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                AWS:
                  - '*'
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: defaultPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - lambda:InvokeFunction
                  Resource:
                    - '*'
          - PolicyName: automateMediaServicePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - mediaLive:CreateInput
                    - mediaLive:CreateChannel
                    - mediaStore:CreateContainer
                    - mediaStore:DescribeContainer
                    - mediaStore:PutContainerPolicy
                  Resource:
                    - '*'

stepFunctions:
  stateMachines:
    mediaLiveStateMachine:
      name: mediaLiveStepFunction
      role:
        Fn::GetAtt: [defaultRole, Arn]
      definition:
        Comment: AutomateMediaServiceFunction
        StartAt: CreateMediaLiveInputAndContainer
        States:
          CreateMediaLiveInputAndContainer:
            Type: Parallel
            Comment: MediaLive入力とコンテナの作成を並列で実行
            InputPath: $
            Branches:
              - StartAt: CreateInput(RTMP)
                States:
                  CreateInput(RTMP):
                    Type: Task
                    End: true
                    Comment: ライブ配信 - ライブ配信入力用
                    Resource: arn:aws:states:::aws-sdk:medialive:createInput
                    InputPath: $.RtmpInput
                    ResultPath: $.RtmpResult
                    Parameters:
                      Name.$: $.Name
                      Type: RTMP_PUSH
                      Destinations:
                        - StreamName: live/a
                      InputSecurityGroups: ${self:provider.vpc.securityGroupIds}
              - StartAt: CreateInput(MP4)
                States:
                  CreateInput(MP4):
                    Type: Task
                    End: true
                    Comment: ライブ配信 - オープニング動画入力用
                    Resource: arn:aws:states:::aws-sdk:medialive:createInput
                    InputPath: $.MP4Input
                    ResultPath: $.MP4Result
                    Parameters:
                      Name.$: $.Name
                      Type: MP4_FILE
                      Sources.$: $.Sources
              - StartAt: CreateContainer
                States:
                  CreateContainer:
                    Type: Task
                    Comment: ライブ配信 - 配信用ストレージを作成
                    Resource: arn:aws:states:::aws-sdk:mediastore:createContainer
                    ResultPath: $.ContainerResult
                    Parameters:
                      ContainerName.$: $.ContainerName
                    Next: DescribeContainer
                  DescribeContainer:
                    Type: Task
                    Comment: ライブ配信 - 配信用ストレージのステータスを取得する
                    ResultPath: $.ContainerStatus
                    Resource: arn:aws:states:::aws-sdk:mediastore:describeContainer
                    Parameters:
                      ContainerName.$: $.ContainerName
                    Next: WaitActive
                  WaitActive:
                    Type: Wait
                    Seconds: 1
                    Next: CheckContainerActive
                  CheckContainerActive:
                    Type: Choice
                    InputPath: $
                    Choices:
                      - Variable: $.ContainerStatus.Container.Status
                        StringEquals: "ACTIVE"
                        Next: success
                      - Variable: $.ContainerStatus.Container.Status
                        StringEquals: "CREATING"
                        Next: DescribeContainer
                    Default: failed
                  success:
                    Type: Succeed
                  failed:
                    Type: Fail
            Next: CreateStreamingResoures
          CreateStreamingResoures:
            Type: Parallel
            End: true
            Comment: 配信リソースの作成を並列で実行
            InputPath: $
            Branches:
              - StartAt: CreateChannel
                States:
                  CreateChannel:
                    Type: Task
                    Comment: ライブ配信 - チャンネルを作成
                    InputPath: $
                    Resource: arn:aws:states:::aws-sdk:medialive:createChannel
                    Parameters:
                      Name.$: $[0].ChannelInput.Name
                      ChannelClass.$: $[0].ChannelInput.ChannelClass
                      InputAttachments:
                        - InputId.$: $[0].RtmpResult.Input.Id
                          InputAttachmentName.$: $[0].RtmpResult.Input.Name
                        - InputId.$: $[1].MP4Result.Input.Id
                          InputAttachmentName.$: $[1].MP4Result.Input.Name
                      Destinations.$: $[0].ChannelInput.Destinations
                      EncoderSettings.$: $[0].ChannelInput.EncoderSettings
                    End: true
              - StartAt: PutContainerPolicy
                States:
                  PutContainerPolicy:
                    Type: Task
                    Comment: ライブ配信 - チャンネルに対するポリシーを設定
                    InputPath: $
                    Resource: arn:aws:states:::aws-sdk:mediastore:putContainerPolicy
                    Parameters:
                      ContainerName.$: $[2].ContainerResult.Container.Name
                      Policy:
                        Version: '2012-10-17'
                        Statement:
                          - Sid: PublicReadOverHttps
                            Effect: Allow
                            Principal:
                              AWS: '*'
                            Action:
                              - mediastore:GetObject
                              - mediastore:DescribeObject
                            Resource.$: States.Format('{}/*', $[2].ContainerResult.Container.Arn)
                            Condition:
                              Bool:
                                aws:SecureTransport: 'true'
                    End: true
plugins:
  - serverless-step-functions
