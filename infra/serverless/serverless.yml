service: mediaService

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  account: ${self:custom.envMap.${self:provider.stage}.accountId}
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  vpc:
    securityGroupIds: ${self:custom.envMap.${self:provider.stage}.vpc.securityGroups}
    subnetIds: ${self:custom.envMap.${self:provider.stage}.vpc.subnetIds}
  iam:
    role: defaultRole

custom:
  defaultStage: stg
  envMap:
    prd: ${file(env/prd.yaml)}
    stg: ${file(env/stg.yaml)}

resources:
  Resources:
    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                AWS:
                  - '*'
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: defaultPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - lambda:InvokeFunction
                  Resource:
                    - '*'
          - PolicyName: automateMediaServicePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - mediaLive:CreateInput
                    - mediaLive:DescribeInput
                    - mediaLive:DeleteInput
                    - mediaLive:DescribeChannel
                    - mediaLive:ListChannels
                    - mediaLive:CreateChannel
                    - mediaLive:DeleteChannel
                    - iam:PassRole
                    - states:StartExecution
                    - states:DescribeExecution
                    - states:ListExecutions
                    - states:ListStateMachines
                  Resource:
                    - '*'
    lambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: automateMediaServiceLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - mediaLive:CreateChannel
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource:
                    - '*'
functions:
  getExistsChannelIndex:
    role: lambdaRole
    handler: functions/getExistsChannelIndex/handler.getExistsChannelIndex
    memorySize: 128
    timeout: 10
  createChannelWithRTMPOutputs:
    role: lambdaRole
    handler: functions/createChannelWithRTMPOutputs/handler.createChannelWithRTMPOutputs
    memorySize: 128
    timeout: 10

stepFunctions:
  stateMachines:
    mediaLiveStateMachine:
      name: mediaLiveStepFunction-${self:provider.stage}
      role:
        Fn::GetAtt: [defaultRole, Arn]
      definition:
        Comment: AutomateMediaServiceFunction
        StartAt: CreateMediaLiveInputAndContainer
        States:
          CreateMediaLiveInputAndContainer:
            Type: Parallel
            Comment: MediaLive入力とコンテナの作成を並列で実行
            InputPath: $
            Branches:
              - StartAt: CreateInput(RTMP)
                States:
                  CreateInput(RTMP):
                    Type: Task
                    End: true
                    Comment: ライブ配信 - ライブ配信入力用
                    Resource: arn:aws:states:::aws-sdk:medialive:createInput
                    InputPath: $.RtmpInput
                    ResultPath: $.RtmpResult
                    Parameters:
                      Name.$: States.UUID()
                      Type: RTMP_PUSH
                      Destinations:
                        - StreamName.$: $.StreamName
                      InputSecurityGroups:
                        - '4361039'
              - StartAt: CreateInput(MP4)
                States:
                  CreateInput(MP4):
                    Type: Task
                    End: true
                    Comment: ライブ配信 - オープニング動画入力用
                    Resource: arn:aws:states:::aws-sdk:medialive:createInput
                    InputPath: $.MP4Input
                    ResultPath: $.MP4Result
                    Parameters:
                      Name.$: States.UUID()
                      Type: MP4_FILE
                      Sources:
                        - Url.$: $.InputUrl
            Next: CreateStreamingResoures
          CreateStreamingResoures:
            Type: Parallel
            Next: RegisterResoursesInfo
            Comment: 配信リソースの作成を並列で実行
            InputPath: $
            ResultSelector:
              ScheduleId.$: $[0][0].ScheduleId
              MediaLiveRtmpInputArn.$: $[0][0].RtmpResult.Input.Arn
              MediaLiveRtmpInputUrl.$: $[0][0].RtmpResult.Input.Destinations[0].Url
              MediaLiveRtmpInputName.$: $[0][0].RtmpResult.Input.Name
              MediaLiveRtmpStreamName.$: $[0][0].RtmpInput.StreamName
              MediaLiveMp4InputArn.$: $[0][1].MP4Result.Input.Arn
              MediaLiveMp4InputName.$: $[0][1].MP4Result.Input.Name
              MediaLiveChannelArn.$: $[0][0].ChannelResult.Channel.Arn
              MediaLiveChannelId.$: $[0][0].ChannelResult.Channel.Id
            Branches:
              - StartAt: ListChannels
                States:
                  ListChannels:
                    Type: Task
                    Comment: ライブ配信 - チャンネル一覧を取得
                    InputPath: $
                    ResultPath: $[0].ListChannelsResult
                    Resource: arn:aws:states:::aws-sdk:medialive:listChannels
                    Parameters:
                      MaxResults: 100
                    Next: ExtractChannelNames
                  ExtractChannelNames:
                    Type: Pass
                    Comment: ライブ配信 - チャンネル一覧からチャンネル名を抽出
                    InputPath: $
                    ResultPath: $[0].ExtractChannelNamesResult
                    Parameters:
                      ChannelNames.$: $[0].ListChannelsResult.Channels[*].Name
                    Next: CheckAnyChannelExists
                  CheckAnyChannelExists:
                    Type: Choice
                    Comment: チャンネル一覧に、チャンネルが一つでもあるか確認
                    InputPath: $
                    Choices:
                      - Variable: $[0].ExtractChannelNamesResult.ChannelNames
                        IsPresent: true
                        Next: CompareChannelNames
                    Default: CreateChannel
                  CompareChannelNames:
                    Type: Pass
                    Comment: ライブ配信 - チャンネル名一覧を比較
                    InputPath: $
                    ResultPath: $[0].CompareChannelNamesResult
                    Parameters:
                      ChannelExists.$: States.ArrayContains($[0].ExtractChannelNamesResult.ChannelNames, $[0].ChannelInput.Name)
                    Next: CheckSpecifyChannelExists
                  CheckSpecifyChannelExists:
                    Type: Choice
                    Comment: チャンネル一覧に、特定のNameを持つチャンネルがあるか確認
                    InputPath: $
                    Choices:
                      - Variable: $[0].CompareChannelNamesResult.ChannelExists
                        BooleanEquals: true
                        Next: GetExistsChannelIndex
                    Default: CreateChannel
                  GetExistsChannelIndex:
                    Type: Task
                    Comment: ライブ配信 - チャンネル一覧から特定のNameを持つチャンネルのインデックスを取得
                    InputPath: $
                    ResultPath: $[0].GetExistsChannelIndexResult
                    Resource:
                      Fn::GetAtt: [getExistsChannelIndex, Arn]
                    Parameters:
                      ChannelNames.$: $[0].ExtractChannelNamesResult.ChannelNames
                      ChannelName.$: $[0].ChannelInput.Name
                    Next: PassChannelInfo
                  PassChannelInfo:
                    Type: Pass
                    Comment: ライブ配信 - チャンネル一覧から特定のNameを持つチャンネルの情報を抽出してDB保存用に格納する
                    InputPath: $
                    ResultPath: $[0].ChannelResult
                    Parameters:
                      Channel.$: States.ArrayGetItem($[0].ListChannelsResult.Channels, $[0].GetExistsChannelIndexResult)
                    Next: SkipCreateChannel
                  SkipCreateChannel:
                    Type: Succeed
                    Comment: チャンネルが存在する場合は終了
                  CreateChannel:
                    Type: Task
                    Comment: ライブ配信 - チャンネルを作成
                    InputPath: $
                    ResultPath: $[0].ChannelResult
                    Resource: 
                      Fn::GetAtt: [createChannelWithRTMPOutputs, Arn]
                    Parameters:
                      Name.$: $[0].ChannelInput.Name
                      RoleArn: arn:aws:iam::${self:provider.account}:role/MediaLiveAccessRole
                      ChannelClass: SINGLE_PIPELINE
                      InputAttachments:
                        - InputId.$: $[0].RtmpResult.Input.Id
                          InputAttachmentName.$: $[0].RtmpResult.Input.Name
                        - InputId.$: $[1].MP4Result.Input.Id
                          InputAttachmentName.$: $[1].MP4Result.Input.Name
                          InputSettings:
                            SourceEndBehavior: LOOP
                      Destinations:
                        - Id: S3
                          Settings:
                            - Url.$: States.Format('s3ssl://{}{}/live', $[0].ArchiveInput.BucketName, $[0].ArchiveInput.Path)
                      EncoderSettings:
                        GlobalConfiguration:
                          InputEndAction: NONE
                          InputLossBehavior:
                            BlackFrameMsec: 1000
                            InputLossImageType: SLATE
                            InputLossImageColor: "3a3a3a"
                            InputLossImageSlate:
                              Uri.$: $[0].ChannelInput.InputLossImageSlateUri
                      RTMPOutputs.$: $[0].RtmpOutputs
                    End: true
          RegisterResoursesInfo:
            Type: Task
            Comment: リソース情報を登録
            InputPath: $
            ResultPath: $.RegisterResoursesInfoResult
            Resource: ${self:custom.envMap.${self:provider.stage}.externalFunction.RegisterResoursesInfoArn}
            End: True
    deleteLiveResourcesMachine:
      definition:
        StartAt: deleteLiveResources
        Comment: ライブ配信のリソースを削除
        States:
          deleteLiveResources:
            Type: Parallel
            End: true
            Branches:
              - StartAt: deleteMediaLiveResources
                States:
                  deleteMediaLiveResources:
                    Type: Task
                    Comment: MediaLiveのリソースを削除
                    InputPath: $
                    Resource: arn:aws:states:::states:startExecution.sync
                    Parameters:
                      StateMachineArn: arn:aws:states:ap-northeast-1:386661535629:stateMachine:deleteMediaLiveResoursesFunction-${self:provider.stage}
                      Input:
                        ChannelId.$: $.MediaLiveChannelId
                        AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
                    End: true

    deleteMediaLiveMachine:
      name: deleteMediaLiveResoursesFunction-${self:provider.stage}
      role:
        Fn::GetAtt: [defaultRole, Arn]
      definition:
        StartAt: DescribeChannel
        States:
          DescribeChannel:
            Type: Task
            Comment: MediaLiveのチャンネルを取得
            InputPath: $
            ResultPath: $.DescribeChannelResult
            Resource: arn:aws:states:::aws-sdk:medialive:describeChannel
            Parameters:
              ChannelId.$: $.ChannelId
            Next: DeleteChannel
            Catch:
              - ErrorEquals:
                  - MediaLive.NotFoundException
                Comment: チャンネルが存在しない場合は終了
                Next: Pass
          Pass:
            Type: Pass
            End: true
          DeleteChannel:
            Type: Task
            Comment: MediaLiveのチャンネルを削除
            InputPath: $
            ResultPath: $.DeleteChannelResult
            Resource: arn:aws:states:::aws-sdk:medialive:deleteChannel
            Parameters:
              ChannelId.$: $.ChannelId
            Next: DeleteInputMap
          DeleteInputMap:
            Type: Map
            Comment: MediaLiveのInputを削除
            InputPath: $
            ItemsPath: $.DescribeChannelResult.InputAttachments
            ResultPath: $.DeleteInputMapResult
            End: true
            ItemSelector:
              InputId.$: $$.Map.Item.Value.InputId
            MaxConcurrency: 5
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: DescribeInput
              States:
                DescribeInput:
                  Type: Task
                  Comment: MediaLiveのInputを取得
                  InputPath: $
                  ResultPath: $.DescribeInputResult
                  Resource: arn:aws:states:::aws-sdk:medialive:describeInput
                  Parameters:
                    InputId.$: $.InputId
                  Next: CheckInputDetached
                CheckInputDetached:
                  Type: Choice
                  InputPath: $
                  Choices:
                    - Variable: $.DescribeInputResult.State
                      StringEquals: "DETACHED"
                      Next: DeleteInput
                    - Variable: $.DescribeInputResult.State
                      StringEquals: "DELETED"
                      Next: DeletedInput
                  Default: WaitDettached
                WaitDettached:
                  Type: Wait
                  Seconds: 30
                  Next: DescribeInput
                DeleteInput:
                  Type: Task
                  Resource: arn:aws:states:::aws-sdk:medialive:deleteInput
                  InputPath: $
                  Parameters:
                    InputId.$: $.InputId
                  End: true
                DeletedInput:
                  Type: Succeed

plugins:
  - serverless-step-functions
