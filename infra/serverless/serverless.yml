service: mediaService

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  account: ${self:custom.envMap.${self:provider.stage}.accountId}
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${self:custom.envMap.${self:provider.stage}.region}
  vpc:
    securityGroupIds: ${self:custom.envMap.${self:provider.stage}.vpc.securityGroups}
    subnetIds: ${self:custom.envMap.${self:provider.stage}.vpc.subnetIds}
  iam:
    role: defaultRole
  profile: ${env:AWS_PROFILE, 'default'}

custom:
  defaultStage: stg
  envMap:
    prd: ${file(env/prd.yaml)}
    stg: ${file(env/stg.yaml)}

resources:
  Resources:
    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                AWS:
                  - '*'
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: defaultPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - lambda:InvokeFunction
                  Resource:
                    - '*'
          - PolicyName: automateMediaServicePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - mediaLive:CreateInput
                    - mediaLive:CreateChannel
                    - mediaLive:BatchUpdateSchedule
                    - mediaStore:CreateContainer
                    - mediaStore:DescribeContainer
                    - mediaStore:PutContainerPolicy
                    - mediaStore:PutCorsPolicy
                    - mediaStore:PutLifecyclePolicy
                    - cloudFront:CreateDistribution
                  Resource:
                    - '*'
    lambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: automateMediaServiceLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - mediaStore:DescribeContainer
                  Resource:
                    - '*'

functions:
  extractMediaStoreDomain:
    role: lambdaRole
    handler: functions/extractMediaStoreDomain/handler.extractDomainName
    memorySize: 128
    timeout: 10
  calculateMP4StartTime:
    role: lambdaRole
    handler: functions/calculateMP4StartTime/handler.calculateMP4StartTime
    memorySize: 128
    timeout: 10

stepFunctions:
  stateMachines:
    mediaLiveStateMachine:
      name: mediaLiveStepFunction
      role:
        Fn::GetAtt: [defaultRole, Arn]
      definition:
        Comment: AutomateMediaServiceFunction
        StartAt: CreateMediaLiveInputAndContainer
        States:
          CreateMediaLiveInputAndContainer:
            Type: Parallel
            Comment: MediaLive入力とコンテナの作成を並列で実行
            InputPath: $
            Branches:
              - StartAt: CreateInput(RTMP)
                States:
                  CreateInput(RTMP):
                    Type: Task
                    End: true
                    Comment: ライブ配信 - ライブ配信入力用
                    Resource: arn:aws:states:::aws-sdk:medialive:createInput
                    InputPath: $.RtmpInput
                    ResultPath: $.RtmpResult
                    Parameters:
                      Name.$: States.UUID()
                      Type: RTMP_PUSH
                      Destinations:
                        - StreamName: live/a
                      InputSecurityGroups:
                        - '4361039'
              - StartAt: CreateInput(MP4)
                States:
                  CreateInput(MP4):
                    Type: Task
                    End: true
                    Comment: ライブ配信 - オープニング動画入力用
                    Resource: arn:aws:states:::aws-sdk:medialive:createInput
                    InputPath: $.MP4Input
                    ResultPath: $.MP4Result
                    Parameters:
                      Name.$: States.UUID()
                      Type: MP4_FILE
                      Sources:
                        - Url.$: $.OpeningVideoUrl
              - StartAt: CreateContainer
                States:
                  CreateContainer:
                    Type: Task
                    Comment: ライブ配信 - 配信用ストレージを作成
                    Resource: arn:aws:states:::aws-sdk:mediastore:createContainer
                    ResultPath: $.ContainerResult
                    Parameters:
                      ContainerName.$: States.UUID()
                    Next: DescribeContainer
                  DescribeContainer:
                    Type: Task
                    Comment: ライブ配信 - 配信用ストレージのステータスを取得する
                    ResultPath: $.ContainerStatus
                    Resource: arn:aws:states:::aws-sdk:mediastore:describeContainer
                    Parameters:
                      ContainerName.$: $.ContainerResult.Container.Name
                    Next: WaitActive
                  WaitActive:
                    Type: Wait
                    Seconds: 1
                    Next: CheckContainerActive
                  CheckContainerActive:
                    Type: Choice
                    InputPath: $
                    Choices:
                      - Variable: $.ContainerStatus.Container.Status
                        StringEquals: "ACTIVE"
                        Next: success
                      - Variable: $.ContainerStatus.Container.Status
                        StringEquals: "CREATING"
                        Next: DescribeContainer
                    Default: failed
                  success:
                    Type: Succeed
                  failed:
                    Type: Fail
            Next: CreateStreamingResoures
          CreateStreamingResoures:
            Type: Parallel
            End: true
            Comment: 配信リソースの作成を並列で実行
            InputPath: $
            ResultSelector:
              CloudFrontUrl.$: $[1][2].DistributionResult.Location
              CloudFrontDistributionArn.$: $[1][2].DistributionResult.Distribution.Arn
              MediaLiveRtmpInputArn.$: $[0][0].RtmpResult.Input.Arn
              MediaLiveRtmpInputUrl.$: $[0][0].RtmpResult.Input.Destinations[0].Url
              MediaLiveMp4InputArn.$: $[0][1].MP4Result.Input.Arn
              MediaLiveChannelArn.$: $[0][0].ChannelResult.Channel.Arn
              MediaStoreContainerArn.$: $[0][2].ContainerResult.Container.Arn
            Branches:
              - StartAt: CreateChannel
                States:
                  CreateChannel:
                    Type: Task
                    Comment: ライブ配信 - チャンネルを作成
                    InputPath: $
                    ResultPath: $[0].ChannelResult
                    Resource: arn:aws:states:::aws-sdk:medialive:createChannel
                    Parameters:
                      Name.$: $[0].ChannelInput.Name
                      ChannelClass: SINGLE_PIPELINE
                      InputAttachments:
                        - InputId.$: $[0].RtmpResult.Input.Id
                          InputAttachmentName.$: $[0].RtmpResult.Input.Name
                        - InputId.$: $[1].MP4Result.Input.Id
                          InputAttachmentName.$: $[1].MP4Result.Input.Name
                          InputSettings:
                            SourceEndBehavior: LOOP
                      Destinations:
                        - Id: MediaStore
                          Settings:
                            - Url.$: $[0].ChannelInput.DestinationUrl
                      EncoderSettings:
                        GlobalConfiguration:
                          InputEndAction: NONE
                          InputLossBehavior:
                            InputLossImageType: SLATE
                            InputLossImageColor: "000000"
                            InputLossImageSlate:
                              Uri.$: $[0].ChannelInput.InputLossImageSlateUri
                        TimecodeConfig:
                          Source: EMBEDDED
                        AudioDescriptions:
                          - Name: オーディオ
                            AudioSelectorName: Default
                        VideoDescriptions:
                          - Name: 動画
                            RespondToAfd: NONE
                            ScalingBehavior: DEFAULT
                            Sharpness: 50
                        OutputGroups:
                          - Name: MediaStore
                            OutputGroupSettings:
                              HlsGroupSettings:
                                AdMarkers: []
                                CaptionLanguageMappings: []
                                CaptionLanguageSetting: OMIT
                                ClientCache: ENABLED
                                CodecSpecification: RFC_4281
                                Destination:
                                  DestinationRefId: MediaStore
                                DirectoryStructure: SINGLE_DIRECTORY
                                DiscontinuityTags: INSERT
                                HlsCdnSettings:
                                  HlsMediaStoreSettings:
                                    ConnectionRetryInterval: 1
                                    FilecacheDuration: 300
                                    MediaStoreStorageClass: TEMPORAL
                                    NumRetries: 10
                                    RestartDelay: 15
                                HlsId3SegmentTagging: DISABLED
                                IFrameOnlyPlaylists: DISABLED
                                IncompleteSegmentBehavior: AUTO
                                IndexNSegments: 10
                                InputLossAction: EMIT_OUTPUT
                                IvInManifest: INCLUDE
                                IvSource: FOLLOWS_SEGMENT_NUMBER
                                KeepSegments: 21
                                ManifestCompression: NONE
                                ManifestDurationFormat: FLOATING_POINT
                                Mode: LIVE
                                OutputSelection: MANIFESTS_AND_SEGMENTS
                                ProgramDateTime: EXCLUDE
                                ProgramDateTimeClock: INITIALIZE_FROM_OUTPUT_TIMECODE
                                ProgramDateTimePeriod: 600
                                RedundantManifest: DISABLED
                                SegmentLength: 10
                                SegmentationMode: USE_SEGMENT_DURATION
                                SegmentsPerSubdirectory: 10000
                                StreamInfResolution: INCLUDE
                                TimedMetadataId3Frame: PRIV
                                TimedMetadataId3Period: 10
                                TsFileMode: SEGMENTED_FILES
                            Outputs:
                              - OutputName.$: States.UUID()
                                OutputSettings:
                                  HlsOutputSettings:
                                    H265PackagingType: HVC1
                                    HlsSettings:
                                      StandardHlsSettings:
                                        AudioRenditionSets: program_audio
                                        M3u8Settings:
                                          AudioFramesPerPes: 4
                                          AudioPids: "492-498"
                                          NielsenId3Behavior: NO_PASSTHROUGH
                                          PcrControl: PCR_EVERY_PES_PACKET
                                          PmtPid: "480"
                                          ProgramNum: 1
                                          Scte35Behavior: NO_PASSTHROUGH
                                          Scte35Pid: "500"
                                          TimedMetadataBehavior: NO_PASSTHROUGH
                                          TimedMetadataPid: "502"
                                          VideoPid: "481"
                                    NameModifier: "_1"
                                AudioDescriptionNames:
                                  - オーディオ
                                CaptionDescriptionNames: []
                                VideoDescriptionName: 動画
                    Next: CalculateMP4StartTime
                  CalculateMP4StartTime:
                    Type: Task
                    Comment: ライブ配信 - オープニング動画の開始時間を計算
                    InputPath: $
                    ResultPath: $[0].ChannelInput.MP4StartTime
                    Resource:
                      Fn::GetAtt: [calculateMP4StartTime, Arn]
                    Next: BatchUpdateSchedule
                  BatchUpdateSchedule:
                    Type: Task
                    Comment: ライブ配信 - 配信スケジュールを更新
                    InputPath: $
                    ResultPath: $[0].ChannelResult.Schedule
                    Resource: arn:aws:states:::aws-sdk:medialive:batchUpdateSchedule
                    Parameters:
                      ChannelId.$: $[0].ChannelResult.Channel.Id
                      Creates:
                        ScheduleActions:
                          - ActionName: StartMP4
                            ScheduleActionStartSettings:
                              FixedModeScheduleActionStartSettings:
                                Time.$: $[0].ChannelInput.MP4StartTime
                            ScheduleActionSettings:
                              InputSwitchSettings:
                                InputAttachmentNameReference.$: $[1].MP4Result.Input.Name
                          - ActionName: StartLive
                            ScheduleActionStartSettings:
                              FixedModeScheduleActionStartSettings:
                                Time.$: $[0].ChannelInput.StartTime
                            ScheduleActionSettings:
                              InputSwitchSettings:
                                InputAttachmentNameReference.$: $[0].RtmpResult.Input.Name
                    End: true
              - StartAt: ExtractMediaStoreDomain
                States:
                  ExtractMediaStoreDomain:
                    Type: Task
                    Comment: ライブ配信 - MediaStoreのドメイン名を抽出
                    InputPath: $
                    Resource:
                      Fn::GetAtt: [extractMediaStoreDomain, Arn]
                    ResultPath: $[2].ContainerStatus.Container.Endpoint
                    Next: CreateDistribution
                  CreateDistribution:
                    Type: Task
                    Comment: ライブ配信 - MediaStoreをオリジンにするCloudFrontディストリビューションを作成
                    InputPath: $
                    ResultPath: $[2].DistributionResult
                    Resource: arn:aws:states:::aws-sdk:cloudfront:createDistribution
                    Parameters:
                      DistributionConfig:
                        CallerReference.$: $[2].ContainerResult.Container.Name
                        Comment: MediaStoreをオリジンにするCloudFrontディストリビューション
                        Enabled: true
                        HttpVersion: http2
                        Origins:
                          Quantity: 1
                          Items:
                          - Id.$: States.Format('{}.data.mediastore.ap-northeast-1.amazonaws.com', $[2].ContainerResult.Container.Name)
                            DomainName.$: $[2].ContainerStatus.Container.Endpoint
                            CustomOriginConfig:
                              HttpPort: 80
                              HttpsPort: 443
                              OriginProtocolPolicy: https-only
                        DefaultCacheBehavior:
                          TargetOriginId.$: States.Format('{}.data.mediastore.ap-northeast-1.amazonaws.com', $[2].ContainerResult.Container.Name)
                          ViewerProtocolPolicy: redirect-to-https
                          AllowedMethods:
                            Quantity: 7
                            Items:
                              - GET
                              - HEAD
                              - OPTIONS
                              - PUT
                              - POST
                              - PATCH
                              - DELETE
                          ForwardedValues:
                            QueryString: false
                            Cookies:
                              Forward: none
                            Headers:
                              Quantity: 2
                              Items:
                                - Origin
                                - Access-Con
                          MinTTL: 1
                    Next: PutContainerPolicy
                  PutContainerPolicy:
                    Type: Task
                    Comment: ライブ配信 - チャンネルに対するポリシーを設定
                    InputPath: $
                    ResultPath: $[2].ContainerPolicyResult
                    Resource: arn:aws:states:::aws-sdk:mediastore:putContainerPolicy
                    Parameters:
                      ContainerName.$: $[2].ContainerResult.Container.Name
                      Policy:
                        Version: '2012-10-17'
                        Statement:
                          - Sid: AllowCloudFrontServicePrincipalReadOnly
                            Effect: Allow
                            Principal:
                              AWS: '*'
                            Action:
                              - mediastore:GetObject
                              - mediastore:DescribeObject
                            Resource.$: States.Format('{}/*', $[2].ContainerResult.Container.Arn)
                            Condition:
                              StringEquals:
                                AWS:SourceArn.$: $[2].DistributionResult.Distribution.Arn
                              Bool:
                                aws:SecureTransport: 'true'
                    End: true
              - StartAt: PutCorsPolicy
                States:
                  PutCorsPolicy:
                    Type: Task
                    Comment: ライブ配信 - MediaStoreコンテナに対するCORSポリシーを設定
                    InputPath: $
                    ResultPath: $[2].CorsPolicyResult
                    Resource: arn:aws:states:::aws-sdk:mediastore:putCorsPolicy
                    Parameters:
                      ContainerName.$: $[2].ContainerResult.Container.Name
                      CorsPolicy:
                        - AllowedOrigins:
                            - '*'
                          AllowedMethods:
                            - GET
                            - HEAD
                          AllowedHeaders:
                            - '*'
                          MaxAgeSeconds: 3000
                    Next: PutLifecyclePolicy
                  PutLifecyclePolicy:
                    Type: Task
                    Comment: ライブ配信 - MediaStoreコンテナに対するライフサイクルポリシーを設定
                    InputPath: $
                    ResultPath: $[2].LifecyclePolicyResult
                    Resource: arn:aws:states:::aws-sdk:mediastore:putLifecyclePolicy
                    Parameters:
                      ContainerName.$: $[2].ContainerResult.Container.Name
                      LifecyclePolicy:  {"rules":[{"definition":{"path":[{"wildcard":"*"}],"days_since_create":[{"numeric":[">",1]}]},"action":"EXPIRE"}]}
                    End: true

plugins:
  - serverless-step-functions
