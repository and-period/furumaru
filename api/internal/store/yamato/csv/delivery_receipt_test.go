package csv

import (
	"testing"
	"time"

	"github.com/and-period/furumaru/api/internal/store/entity"
	uentity "github.com/and-period/furumaru/api/internal/user/entity"
	"github.com/stretchr/testify/assert"
)

func TestDeliveryReceipts(t *testing.T) {
	t.Parallel()
	now := time.Now()
	params := &DeliveryReceiptsParams{
		Orders: entity.Orders{
			{
				ID:            "order-id",
				UserID:        "user-id",
				PromotionID:   "",
				CoordinatorID: "coordinator-id",
				CreatedAt:     now,
				UpdatedAt:     now,
				OrderPayment: entity.OrderPayment{
					OrderID:           "order-id",
					AddressRevisionID: 1,
					TransactionID:     "transaction-id",
					Status:            entity.PaymentStatusPending,
					MethodType:        entity.PaymentMethodTypeCreditCard,
					Subtotal:          1100,
					Discount:          0,
					ShippingFee:       500,
					Tax:               145,
					Total:             1600,
					CreatedAt:         now,
					UpdatedAt:         now,
				},
				OrderFulfillments: entity.OrderFulfillments{
					{
						ID:                "fulfillment-id",
						OrderID:           "order-id",
						AddressRevisionID: 1,
						Status:            entity.FulfillmentStatusUnfulfilled,
						TrackingNumber:    "",
						ShippingCarrier:   entity.ShippingCarrierUnknown,
						ShippingType:      entity.ShippingTypeNormal,
						BoxNumber:         1,
						BoxSize:           entity.ShippingSize60,
						CreatedAt:         now,
						UpdatedAt:         now,
					},
				},
				OrderItems: entity.OrderItems{
					{
						FulfillmentID:     "fulfillment-id",
						ProductRevisionID: 1,
						OrderID:           "order-id",
						Quantity:          1,
						CreatedAt:         now,
						UpdatedAt:         now,
					},
				},
			},
		},
		Addresses: map[int64]*uentity.Address{
			1: {
				AddressRevision: uentity.AddressRevision{
					ID:             1,
					AddressID:      "address-id",
					Lastname:       "&.",
					Firstname:      "購入者",
					LastnameKana:   "あんどどっと",
					FirstnameKana:  "こうにゅうしゃ",
					PostalCode:     "1000014",
					Prefecture:     "東京都",
					PrefectureCode: 13,
					City:           "千代田区",
					AddressLine1:   "永田町1-7-1",
					AddressLine2:   "",
					PhoneNumber:    "090-1234-5678",
				},
				ID:        "address-id",
				UserID:    "user-id",
				IsDefault: true,
				CreatedAt: now,
				UpdatedAt: now,
			},
		},
		Products: map[int64]*entity.Product{
			1: {
				ID:              "product-id",
				TypeID:          "type-id",
				TagIDs:          []string{"tag-id"},
				CoordinatorID:   "coordinator-id",
				ProducerID:      "producer-id",
				Name:            "新鮮なじゃがいも",
				Description:     "新鮮なじゃがいもをお届けします。",
				Public:          true,
				Inventory:       100,
				Weight:          100,
				WeightUnit:      entity.WeightUnitGram,
				Item:            1,
				ItemUnit:        "袋",
				ItemDescription: "1袋あたり100gのじゃがいも",
				Media: entity.MultiProductMedia{
					{URL: "https://and-period.jp/thumbnail01.png", IsThumbnail: true},
					{URL: "https://and-period.jp/thumbnail02.png", IsThumbnail: false},
				},
				ExpirationDate:    7,
				StorageMethodType: entity.StorageMethodTypeNormal,
				DeliveryType:      entity.DeliveryTypeNormal,
				Box60Rate:         50,
				Box80Rate:         40,
				Box100Rate:        30,
				OriginPrefecture:  "滋賀県",
				OriginCity:        "彦根市",
				ProductRevision: entity.ProductRevision{
					ID:        1,
					ProductID: "product-id",
					Price:     400,
					Cost:      300,
					CreatedAt: now,
					UpdatedAt: now,
				},
				CreatedAt: now,
				UpdatedAt: now,
			},
		},
	}
	expect := DeliveryReceipts{
		{
			OrderID:                                "order-id",
			ServiceType:                            ServiceTypePrepayment,
			ShippingType:                           ShippingTypeNormal,
			YamatoOrderID:                          "",
			ExpectedShippingDate:                   "",
			ExpectedDeliveryDate:                   "",
			DeliveryTypeFrame:                      DeliveryTimeFrameNone,
			DeliveryCode:                           "1",
			DeliveryPhoneNumber:                    "090-1234-5678",
			DeliveryPhoneNumberExtension:           "",
			DeliveryPostalCode:                     "1000014",
			DeliveryAddress1:                       "東京都 千代田区 永田町1-7-1",
			DeliveryAddress2:                       "",
			DeliveryCompany1:                       "",
			DeliveryCompany2:                       "",
			DeliveryName:                           "&. 購入者",
			DeliveryNameKana:                       "あんどどっと こうにゅうしゃ",
			DeliveryNameHonorific:                  "様",
			ClientCode:                             "1",
			ClientPhoneNumber:                      "090-1234-5678",
			ClientPhoneNumberExtension:             "",
			ClientPostalCode:                       "1000014",
			ClientAddress1:                         "東京都 千代田区 永田町1-7-1",
			ClientAddress2:                         "",
			ClientName:                             "&. 購入者",
			ClientNameKana:                         "あんどどっと こうにゅうしゃ",
			Product1ID:                             "product-id",
			Product1Name:                           "新鮮なじゃがいも",
			Product2ID:                             "",
			Product2Name:                           "",
			Handling1:                              "",
			Handling2:                              "",
			Note:                                   "",
			WebCollectDeliveryAmount:               0,
			WebCollectDeliveryTax:                  0,
			BranchHoldType:                         "",
			BranchCode:                             "",
			IssuedQuantity:                         1,
			PrintingQuantity:                       "",
			BillingCode:                            "",
			BillingGroupCode:                       "",
			ShippingCostControlNumber:              "",
			WebCollectRegistration:                 0,
			WebCollectStoreNumber:                  "",
			WebCollectAcceptanceNumber1:            "",
			WebCollectAcceptanceNumber2:            "",
			WebCollectAcceptanceNumber3:            "",
			DeliveryNotificationEmailUsage:         0,
			DeliveryNotificationEmail:              "",
			InputMethod:                            "",
			DeliveryNotificationEmailMessage:       "",
			DeliveryCompletionEmailUsage:           0,
			DeliveryCompletionEmail:                "",
			DeliveryCompletionEmailMessage:         "",
			CollectionAgencyUsage:                  0,
			Reserve1:                               "",
			CollectionAgencyBillingAmount:          0,
			CollectionAgencyBillingTax:             0,
			CollectionAgencyBillingPostalCode:      "",
			CollectionAgencyBillingAddress1:        "",
			CollectionAgencyBillingAddress2:        "",
			CollectionAgencyBillingCompany1:        "",
			CollectionAgencyBillingCompany2:        "",
			CollectionAgencyBillingName:            "",
			CollectionAgencyBillingNameKana:        "",
			CollectionAgencyInquiryPostalCode:      "",
			CollectionAgencyInquiryAddress1:        "",
			CollectionAgencyInquiryAddress2:        "",
			CollectionAgencyInquiryPhoneNumber:     "",
			CollectionAgencyManagementNumber:       "",
			CollectionAgencyItemName:               "",
			CollectionAgencyRemarks:                "",
			MultiplePackagesGroupingKey:            "",
			SearchKey1Title:                        "",
			SearchKey1Value:                        "",
			SearchKey2Title:                        "",
			SearchKey2Value:                        "",
			SearchKey3Title:                        "",
			SearchKey3Value:                        "",
			SearchKey4Title:                        "",
			SearchKey4Value:                        "",
			SearchKey5Title:                        "",
			SearchKey5Value:                        "",
			Reserve2:                               "",
			Reserve3:                               "",
			MailDropNotificationEmailUsage:         0,
			MailDropNotificationEmail:              "",
			MailDropNotificationEmailMessage:       "",
			MailDropCompletionDeliveryEmailUsage:   0,
			MailDropCompletionDeliveryEmail:        "",
			MailDropCompletionDeliveryEmailMessage: "",
			MailDropCompletionClientEmailusage:     "",
			MailDropCompletionClientEmail:          "",
			MailDropCompletionClientEmailMessage:   "",
		},
	}
	actual := NewDeliveryReceipts(params)
	assert.Equal(t, expect, actual)
}
