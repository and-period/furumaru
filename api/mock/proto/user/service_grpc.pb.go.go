// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/user/service_grpc.pb.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	user "github.com/and-period/marche/api/proto/user"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceClient) CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*user.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUser), varargs...)
}

// CreateUserWithOAuth mocks base method.
func (m *MockUserServiceClient) CreateUserWithOAuth(ctx context.Context, in *user.CreateUserWithOAuthRequest, opts ...grpc.CallOption) (*user.CreateUserWithOAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithOAuth", varargs...)
	ret0, _ := ret[0].(*user.CreateUserWithOAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithOAuth indicates an expected call of CreateUserWithOAuth.
func (mr *MockUserServiceClientMockRecorder) CreateUserWithOAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithOAuth", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUserWithOAuth), varargs...)
}

// DeleteUser mocks base method.
func (m *MockUserServiceClient) DeleteUser(ctx context.Context, in *user.DeleteUserRequest, opts ...grpc.CallOption) (*user.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*user.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUser), varargs...)
}

// ForgotUserPassword mocks base method.
func (m *MockUserServiceClient) ForgotUserPassword(ctx context.Context, in *user.ForgotUserPasswordRequest, opts ...grpc.CallOption) (*user.ForgotUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForgotUserPassword", varargs...)
	ret0, _ := ret[0].(*user.ForgotUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotUserPassword indicates an expected call of ForgotUserPassword.
func (mr *MockUserServiceClientMockRecorder) ForgotUserPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotUserPassword", reflect.TypeOf((*MockUserServiceClient)(nil).ForgotUserPassword), varargs...)
}

// GetUser mocks base method.
func (m *MockUserServiceClient) GetUser(ctx context.Context, in *user.GetUserRequest, opts ...grpc.CallOption) (*user.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*user.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetUser), varargs...)
}

// GetUserAuth mocks base method.
func (m *MockUserServiceClient) GetUserAuth(ctx context.Context, in *user.GetUserAuthRequest, opts ...grpc.CallOption) (*user.GetUserAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserAuth", varargs...)
	ret0, _ := ret[0].(*user.GetUserAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuth indicates an expected call of GetUserAuth.
func (mr *MockUserServiceClientMockRecorder) GetUserAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuth", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserAuth), varargs...)
}

// RefreshUserToken mocks base method.
func (m *MockUserServiceClient) RefreshUserToken(ctx context.Context, in *user.RefreshUserTokenRequest, opts ...grpc.CallOption) (*user.RefreshUserTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshUserToken", varargs...)
	ret0, _ := ret[0].(*user.RefreshUserTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshUserToken indicates an expected call of RefreshUserToken.
func (mr *MockUserServiceClientMockRecorder) RefreshUserToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshUserToken", reflect.TypeOf((*MockUserServiceClient)(nil).RefreshUserToken), varargs...)
}

// SignInUser mocks base method.
func (m *MockUserServiceClient) SignInUser(ctx context.Context, in *user.SignInUserRequest, opts ...grpc.CallOption) (*user.SignInUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignInUser", varargs...)
	ret0, _ := ret[0].(*user.SignInUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInUser indicates an expected call of SignInUser.
func (mr *MockUserServiceClientMockRecorder) SignInUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInUser", reflect.TypeOf((*MockUserServiceClient)(nil).SignInUser), varargs...)
}

// SignOutUser mocks base method.
func (m *MockUserServiceClient) SignOutUser(ctx context.Context, in *user.SignOutUserRequest, opts ...grpc.CallOption) (*user.SignOutUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignOutUser", varargs...)
	ret0, _ := ret[0].(*user.SignOutUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOutUser indicates an expected call of SignOutUser.
func (mr *MockUserServiceClientMockRecorder) SignOutUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOutUser", reflect.TypeOf((*MockUserServiceClient)(nil).SignOutUser), varargs...)
}

// UpdateUserEmail mocks base method.
func (m *MockUserServiceClient) UpdateUserEmail(ctx context.Context, in *user.UpdateUserEmailRequest, opts ...grpc.CallOption) (*user.UpdateUserEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserEmail", varargs...)
	ret0, _ := ret[0].(*user.UpdateUserEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockUserServiceClientMockRecorder) UpdateUserEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUserEmail), varargs...)
}

// UpdateUserPassword mocks base method.
func (m *MockUserServiceClient) UpdateUserPassword(ctx context.Context, in *user.UpdateUserPasswordRequest, opts ...grpc.CallOption) (*user.UpdateUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPassword", varargs...)
	ret0, _ := ret[0].(*user.UpdateUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServiceClientMockRecorder) UpdateUserPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUserPassword), varargs...)
}

// VerifyUser mocks base method.
func (m *MockUserServiceClient) VerifyUser(ctx context.Context, in *user.VerifyUserRequest, opts ...grpc.CallOption) (*user.VerifyUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyUser", varargs...)
	ret0, _ := ret[0].(*user.VerifyUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserServiceClientMockRecorder) VerifyUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserServiceClient)(nil).VerifyUser), varargs...)
}

// VerifyUserEmail mocks base method.
func (m *MockUserServiceClient) VerifyUserEmail(ctx context.Context, in *user.VerifyUserEmailRequest, opts ...grpc.CallOption) (*user.VerifyUserEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyUserEmail", varargs...)
	ret0, _ := ret[0].(*user.VerifyUserEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockUserServiceClientMockRecorder) VerifyUserEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockUserServiceClient)(nil).VerifyUserEmail), varargs...)
}

// VerifyUserPassword mocks base method.
func (m *MockUserServiceClient) VerifyUserPassword(ctx context.Context, in *user.VerifyUserPasswordRequest, opts ...grpc.CallOption) (*user.VerifyUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyUserPassword", varargs...)
	ret0, _ := ret[0].(*user.VerifyUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserPassword indicates an expected call of VerifyUserPassword.
func (mr *MockUserServiceClientMockRecorder) VerifyUserPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserPassword", reflect.TypeOf((*MockUserServiceClient)(nil).VerifyUserPassword), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceServer) CreateUser(arg0 context.Context, arg1 *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUser), arg0, arg1)
}

// CreateUserWithOAuth mocks base method.
func (m *MockUserServiceServer) CreateUserWithOAuth(arg0 context.Context, arg1 *user.CreateUserWithOAuthRequest) (*user.CreateUserWithOAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithOAuth", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateUserWithOAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithOAuth indicates an expected call of CreateUserWithOAuth.
func (mr *MockUserServiceServerMockRecorder) CreateUserWithOAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithOAuth", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUserWithOAuth), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserServiceServer) DeleteUser(arg0 context.Context, arg1 *user.DeleteUserRequest) (*user.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*user.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUser), arg0, arg1)
}

// ForgotUserPassword mocks base method.
func (m *MockUserServiceServer) ForgotUserPassword(arg0 context.Context, arg1 *user.ForgotUserPasswordRequest) (*user.ForgotUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*user.ForgotUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotUserPassword indicates an expected call of ForgotUserPassword.
func (mr *MockUserServiceServerMockRecorder) ForgotUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotUserPassword", reflect.TypeOf((*MockUserServiceServer)(nil).ForgotUserPassword), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserServiceServer) GetUser(arg0 context.Context, arg1 *user.GetUserRequest) (*user.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceServer)(nil).GetUser), arg0, arg1)
}

// GetUserAuth mocks base method.
func (m *MockUserServiceServer) GetUserAuth(arg0 context.Context, arg1 *user.GetUserAuthRequest) (*user.GetUserAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuth", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUserAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuth indicates an expected call of GetUserAuth.
func (mr *MockUserServiceServerMockRecorder) GetUserAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuth", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserAuth), arg0, arg1)
}

// RefreshUserToken mocks base method.
func (m *MockUserServiceServer) RefreshUserToken(arg0 context.Context, arg1 *user.RefreshUserTokenRequest) (*user.RefreshUserTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshUserToken", arg0, arg1)
	ret0, _ := ret[0].(*user.RefreshUserTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshUserToken indicates an expected call of RefreshUserToken.
func (mr *MockUserServiceServerMockRecorder) RefreshUserToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshUserToken", reflect.TypeOf((*MockUserServiceServer)(nil).RefreshUserToken), arg0, arg1)
}

// SignInUser mocks base method.
func (m *MockUserServiceServer) SignInUser(arg0 context.Context, arg1 *user.SignInUserRequest) (*user.SignInUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInUser", arg0, arg1)
	ret0, _ := ret[0].(*user.SignInUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInUser indicates an expected call of SignInUser.
func (mr *MockUserServiceServerMockRecorder) SignInUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInUser", reflect.TypeOf((*MockUserServiceServer)(nil).SignInUser), arg0, arg1)
}

// SignOutUser mocks base method.
func (m *MockUserServiceServer) SignOutUser(arg0 context.Context, arg1 *user.SignOutUserRequest) (*user.SignOutUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOutUser", arg0, arg1)
	ret0, _ := ret[0].(*user.SignOutUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOutUser indicates an expected call of SignOutUser.
func (mr *MockUserServiceServerMockRecorder) SignOutUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOutUser", reflect.TypeOf((*MockUserServiceServer)(nil).SignOutUser), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockUserServiceServer) UpdateUserEmail(arg0 context.Context, arg1 *user.UpdateUserEmailRequest) (*user.UpdateUserEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateUserEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockUserServiceServerMockRecorder) UpdateUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUserEmail), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockUserServiceServer) UpdateUserPassword(arg0 context.Context, arg1 *user.UpdateUserPasswordRequest) (*user.UpdateUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServiceServerMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUserPassword), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockUserServiceServer) VerifyUser(arg0 context.Context, arg1 *user.VerifyUserRequest) (*user.VerifyUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserServiceServerMockRecorder) VerifyUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserServiceServer)(nil).VerifyUser), arg0, arg1)
}

// VerifyUserEmail mocks base method.
func (m *MockUserServiceServer) VerifyUserEmail(arg0 context.Context, arg1 *user.VerifyUserEmailRequest) (*user.VerifyUserEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyUserEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockUserServiceServerMockRecorder) VerifyUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockUserServiceServer)(nil).VerifyUserEmail), arg0, arg1)
}

// VerifyUserPassword mocks base method.
func (m *MockUserServiceServer) VerifyUserPassword(arg0 context.Context, arg1 *user.VerifyUserPasswordRequest) (*user.VerifyUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserPassword indicates an expected call of VerifyUserPassword.
func (mr *MockUserServiceServerMockRecorder) VerifyUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserPassword", reflect.TypeOf((*MockUserServiceServer)(nil).VerifyUserPassword), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
