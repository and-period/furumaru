// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_medialive is a generated GoMock package.
package mock_medialive

import (
	context "context"
	reflect "reflect"

	medialive "github.com/and-period/furumaru/api/pkg/medialive"
	gomock "go.uber.org/mock/gomock"
)

// MockMediaLive is a mock of MediaLive interface.
type MockMediaLive struct {
	ctrl     *gomock.Controller
	recorder *MockMediaLiveMockRecorder
}

// MockMediaLiveMockRecorder is the mock recorder for MockMediaLive.
type MockMediaLiveMockRecorder struct {
	mock *MockMediaLive
}

// NewMockMediaLive creates a new mock instance.
func NewMockMediaLive(ctrl *gomock.Controller) *MockMediaLive {
	mock := &MockMediaLive{ctrl: ctrl}
	mock.recorder = &MockMediaLiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaLive) EXPECT() *MockMediaLiveMockRecorder {
	return m.recorder
}

// ActivateStaticImage mocks base method.
func (m *MockMediaLive) ActivateStaticImage(ctx context.Context, channelID, imageURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateStaticImage", ctx, channelID, imageURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateStaticImage indicates an expected call of ActivateStaticImage.
func (mr *MockMediaLiveMockRecorder) ActivateStaticImage(ctx, channelID, imageURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateStaticImage", reflect.TypeOf((*MockMediaLive)(nil).ActivateStaticImage), ctx, channelID, imageURL)
}

// CreateSchedule mocks base method.
func (m *MockMediaLive) CreateSchedule(ctx context.Context, params *medialive.CreateScheduleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockMediaLiveMockRecorder) CreateSchedule(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockMediaLive)(nil).CreateSchedule), ctx, params)
}

// DeactivateStaticImage mocks base method.
func (m *MockMediaLive) DeactivateStaticImage(ctx context.Context, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateStaticImage", ctx, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateStaticImage indicates an expected call of DeactivateStaticImage.
func (mr *MockMediaLiveMockRecorder) DeactivateStaticImage(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateStaticImage", reflect.TypeOf((*MockMediaLive)(nil).DeactivateStaticImage), ctx, channelID)
}

// StartChannel mocks base method.
func (m *MockMediaLive) StartChannel(ctx context.Context, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannel", ctx, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartChannel indicates an expected call of StartChannel.
func (mr *MockMediaLiveMockRecorder) StartChannel(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannel", reflect.TypeOf((*MockMediaLive)(nil).StartChannel), ctx, channelID)
}

// StopChannel mocks base method.
func (m *MockMediaLive) StopChannel(ctx context.Context, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChannel", ctx, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopChannel indicates an expected call of StopChannel.
func (mr *MockMediaLiveMockRecorder) StopChannel(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannel", reflect.TypeOf((*MockMediaLive)(nil).StopChannel), ctx, channelID)
}
