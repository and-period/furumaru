// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_sentry is a generated GoMock package.
package mock_sentry

import (
	context "context"
	reflect "reflect"
	time "time"

	sentry "github.com/and-period/furumaru/api/pkg/sentry"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockClient) Flush(timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockClientMockRecorder) Flush(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockClient)(nil).Flush), timeout)
}

// ReportError mocks base method.
func (m *MockClient) ReportError(ctx context.Context, err error, opts ...sentry.ReportOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, err}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportError", varargs...)
}

// ReportError indicates an expected call of ReportError.
func (mr *MockClientMockRecorder) ReportError(ctx, err interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, err}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportError", reflect.TypeOf((*MockClient)(nil).ReportError), varargs...)
}

// ReportMessage mocks base method.
func (m *MockClient) ReportMessage(ctx context.Context, msg string, opts ...sentry.ReportOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportMessage", varargs...)
}

// ReportMessage indicates an expected call of ReportMessage.
func (mr *MockClientMockRecorder) ReportMessage(ctx, msg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMessage", reflect.TypeOf((*MockClient)(nil).ReportMessage), varargs...)
}

// ReportPanic mocks base method.
func (m *MockClient) ReportPanic(ctx context.Context, err error, opts ...sentry.ReportOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, err}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportPanic", varargs...)
}

// ReportPanic indicates an expected call of ReportPanic.
func (mr *MockClientMockRecorder) ReportPanic(ctx, err interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, err}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportPanic", reflect.TypeOf((*MockClient)(nil).ReportPanic), varargs...)
}
