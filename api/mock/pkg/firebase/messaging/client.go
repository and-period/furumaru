// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_messaging is a generated GoMock package.
package mock_messaging

import (
	context "context"
	reflect "reflect"

	messaging "github.com/and-period/furumaru/api/pkg/firebase/messaging"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// MultiSend mocks base method.
func (m *MockClient) MultiSend(ctx context.Context, msg *messaging.Message, tokens ...string) (int64, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range tokens {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSend", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MultiSend indicates an expected call of MultiSend.
func (mr *MockClientMockRecorder) MultiSend(ctx, msg interface{}, tokens ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, tokens...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSend", reflect.TypeOf((*MockClient)(nil).MultiSend), varargs...)
}

// Send mocks base method.
func (m *MockClient) Send(ctx context.Context, msg *messaging.Message, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, msg, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(ctx, msg, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), ctx, msg, token)
}
