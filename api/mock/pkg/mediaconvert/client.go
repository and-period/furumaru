// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_mediaconvert is a generated GoMock package.
package mock_mediaconvert

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/mediaconvert/types"
	gomock "github.com/golang/mock/gomock"
)

// MockMediaConvert is a mock of MediaConvert interface.
type MockMediaConvert struct {
	ctrl     *gomock.Controller
	recorder *MockMediaConvertMockRecorder
}

// MockMediaConvertMockRecorder is the mock recorder for MockMediaConvert.
type MockMediaConvertMockRecorder struct {
	mock *MockMediaConvert
}

// NewMockMediaConvert creates a new mock instance.
func NewMockMediaConvert(ctrl *gomock.Controller) *MockMediaConvert {
	mock := &MockMediaConvert{ctrl: ctrl}
	mock.recorder = &MockMediaConvertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaConvert) EXPECT() *MockMediaConvertMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockMediaConvert) CreateJob(ctx context.Context, template string, settings *types.JobSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, template, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockMediaConvertMockRecorder) CreateJob(ctx, template, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockMediaConvert)(nil).CreateJob), ctx, template, settings)
}
