// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_messenger is a generated GoMock package.
package mock_messenger

import (
	context "context"
	reflect "reflect"

	messenger "github.com/and-period/marche/api/internal/messenger"
	gomock "github.com/golang/mock/gomock"
)

// MockMessengerService is a mock of MessengerService interface.
type MockMessengerService struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerServiceMockRecorder
}

// MockMessengerServiceMockRecorder is the mock recorder for MockMessengerService.
type MockMessengerServiceMockRecorder struct {
	mock *MockMessengerService
}

// NewMockMessengerService creates a new mock instance.
func NewMockMessengerService(ctrl *gomock.Controller) *MockMessengerService {
	mock := &MockMessengerService{ctrl: ctrl}
	mock.recorder = &MockMessengerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessengerService) EXPECT() *MockMessengerServiceMockRecorder {
	return m.recorder
}

// NotifyRegisterAdmin mocks base method.
func (m *MockMessengerService) NotifyRegisterAdmin(ctx context.Context, in *messenger.NotifyRegisterAdminInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRegisterAdmin", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRegisterAdmin indicates an expected call of NotifyRegisterAdmin.
func (mr *MockMessengerServiceMockRecorder) NotifyRegisterAdmin(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRegisterAdmin", reflect.TypeOf((*MockMessengerService)(nil).NotifyRegisterAdmin), ctx, in)
}
