// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/and-period/marche/api/internal/store/entity"
	service "github.com/and-period/marche/api/internal/store/service"
	gomock "github.com/golang/mock/gomock"
)

// MockStoreService is a mock of StoreService interface.
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService.
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance.
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// CreateStore mocks base method.
func (m *MockStoreService) CreateStore(ctx context.Context, in *service.CreateStoreInput) (*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", ctx, in)
	ret0, _ := ret[0].(*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockStoreServiceMockRecorder) CreateStore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockStoreService)(nil).CreateStore), ctx, in)
}

// GetStore mocks base method.
func (m *MockStoreService) GetStore(ctx context.Context, in *service.GetStoreInput) (*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", ctx, in)
	ret0, _ := ret[0].(*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockStoreServiceMockRecorder) GetStore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockStoreService)(nil).GetStore), ctx, in)
}

// ListStaffsByStoreID mocks base method.
func (m *MockStoreService) ListStaffsByStoreID(ctx context.Context, in *service.ListStaffsByStoreIDInput) (entity.Staffs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaffsByStoreID", ctx, in)
	ret0, _ := ret[0].(entity.Staffs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaffsByStoreID indicates an expected call of ListStaffsByStoreID.
func (mr *MockStoreServiceMockRecorder) ListStaffsByStoreID(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaffsByStoreID", reflect.TypeOf((*MockStoreService)(nil).ListStaffsByStoreID), ctx, in)
}

// ListStores mocks base method.
func (m *MockStoreService) ListStores(ctx context.Context, in *service.ListStoresInput) (entity.Stores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStores", ctx, in)
	ret0, _ := ret[0].(entity.Stores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStores indicates an expected call of ListStores.
func (mr *MockStoreServiceMockRecorder) ListStores(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStores", reflect.TypeOf((*MockStoreService)(nil).ListStores), ctx, in)
}

// UpdateStore mocks base method.
func (m *MockStoreService) UpdateStore(ctx context.Context, in *service.UpdateStoreInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStore", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStore indicates an expected call of UpdateStore.
func (mr *MockStoreServiceMockRecorder) UpdateStore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStore", reflect.TypeOf((*MockStoreService)(nil).UpdateStore), ctx, in)
}

// UploadStoreThumbnail mocks base method.
func (m *MockStoreService) UploadStoreThumbnail(ctx context.Context, in *service.UploadStoreThumbnailInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStoreThumbnail", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadStoreThumbnail indicates an expected call of UploadStoreThumbnail.
func (mr *MockStoreServiceMockRecorder) UploadStoreThumbnail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStoreThumbnail", reflect.TypeOf((*MockStoreService)(nil).UploadStoreThumbnail), ctx, in)
}
