// Code generated by MockGen. DO NOT EDIT.
// Source: komoju.go

// Package mock_komoju is a generated GoMock package.
package mock_komoju

import (
	context "context"
	reflect "reflect"

	komoju "github.com/and-period/furumaru/api/internal/store/komoju"
	gomock "go.uber.org/mock/gomock"
)

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockPayment) Capture(ctx context.Context, paymentID string) (*komoju.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", ctx, paymentID)
	ret0, _ := ret[0].(*komoju.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockPaymentMockRecorder) Capture(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockPayment)(nil).Capture), ctx, paymentID)
}

// Refund mocks base method.
func (m *MockPayment) Refund(ctx context.Context, paymentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", ctx, paymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refund indicates an expected call of Refund.
func (mr *MockPaymentMockRecorder) Refund(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockPayment)(nil).Refund), ctx, paymentID)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSession) Create(ctx context.Context, params *komoju.CreateSessionParams) (*komoju.SessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(*komoju.SessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionMockRecorder) Create(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSession)(nil).Create), ctx, params)
}

// Show mocks base method.
func (m *MockSession) Show(ctx context.Context, sessionID string) (*komoju.SessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", ctx, sessionID)
	ret0, _ := ret[0].(*komoju.SessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockSessionMockRecorder) Show(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockSession)(nil).Show), ctx, sessionID)
}
