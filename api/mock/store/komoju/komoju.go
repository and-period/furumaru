// Code generated by MockGen. DO NOT EDIT.
// Source: komoju.go

// Package mock_komoju is a generated GoMock package.
package mock_komoju

import (
	context "context"
	reflect "reflect"

	komoju "github.com/and-period/furumaru/api/internal/store/komoju"
	gomock "go.uber.org/mock/gomock"
)

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockPayment) Capture(ctx context.Context, paymentID string) (*komoju.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", ctx, paymentID)
	ret0, _ := ret[0].(*komoju.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockPaymentMockRecorder) Capture(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockPayment)(nil).Capture), ctx, paymentID)
}

// Refund mocks base method.
func (m *MockPayment) Refund(ctx context.Context, params *komoju.RefundParams) (*komoju.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", ctx, params)
	ret0, _ := ret[0].(*komoju.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refund indicates an expected call of Refund.
func (mr *MockPaymentMockRecorder) Refund(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockPayment)(nil).Refund), ctx, params)
}

// RefundRequest mocks base method.
func (m *MockPayment) RefundRequest(ctx context.Context, params *komoju.RefundRequestParams) (*komoju.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundRequest", ctx, params)
	ret0, _ := ret[0].(*komoju.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundRequest indicates an expected call of RefundRequest.
func (mr *MockPaymentMockRecorder) RefundRequest(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundRequest", reflect.TypeOf((*MockPayment)(nil).RefundRequest), ctx, params)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockSession) Cancel(ctx context.Context, sessionID string) (*komoju.SessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, sessionID)
	ret0, _ := ret[0].(*komoju.SessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockSessionMockRecorder) Cancel(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockSession)(nil).Cancel), ctx, sessionID)
}

// Create mocks base method.
func (m *MockSession) Create(ctx context.Context, params *komoju.CreateSessionParams) (*komoju.SessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(*komoju.SessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionMockRecorder) Create(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSession)(nil).Create), ctx, params)
}

// Get mocks base method.
func (m *MockSession) Get(ctx context.Context, sessionID string) (*komoju.SessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, sessionID)
	ret0, _ := ret[0].(*komoju.SessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionMockRecorder) Get(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSession)(nil).Get), ctx, sessionID)
}

// OrderAUPay mocks base method.
func (m *MockSession) OrderAUPay(ctx context.Context, params *komoju.OrderAUPayParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderAUPay", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderAUPay indicates an expected call of OrderAUPay.
func (mr *MockSessionMockRecorder) OrderAUPay(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderAUPay", reflect.TypeOf((*MockSession)(nil).OrderAUPay), ctx, params)
}

// OrderBankTransfer mocks base method.
func (m *MockSession) OrderBankTransfer(ctx context.Context, params *komoju.OrderBankTransferParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderBankTransfer", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderBankTransfer indicates an expected call of OrderBankTransfer.
func (mr *MockSessionMockRecorder) OrderBankTransfer(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBankTransfer", reflect.TypeOf((*MockSession)(nil).OrderBankTransfer), ctx, params)
}

// OrderCreditCard mocks base method.
func (m *MockSession) OrderCreditCard(ctx context.Context, params *komoju.OrderCreditCardParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreditCard", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderCreditCard indicates an expected call of OrderCreditCard.
func (mr *MockSessionMockRecorder) OrderCreditCard(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreditCard", reflect.TypeOf((*MockSession)(nil).OrderCreditCard), ctx, params)
}

// OrderKonbini mocks base method.
func (m *MockSession) OrderKonbini(ctx context.Context, params *komoju.OrderKonbiniParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderKonbini", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderKonbini indicates an expected call of OrderKonbini.
func (mr *MockSessionMockRecorder) OrderKonbini(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderKonbini", reflect.TypeOf((*MockSession)(nil).OrderKonbini), ctx, params)
}

// OrderLinePay mocks base method.
func (m *MockSession) OrderLinePay(ctx context.Context, params *komoju.OrderLinePayParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderLinePay", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderLinePay indicates an expected call of OrderLinePay.
func (mr *MockSessionMockRecorder) OrderLinePay(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderLinePay", reflect.TypeOf((*MockSession)(nil).OrderLinePay), ctx, params)
}

// OrderMerpay mocks base method.
func (m *MockSession) OrderMerpay(ctx context.Context, params *komoju.OrderMerpayParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderMerpay", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderMerpay indicates an expected call of OrderMerpay.
func (mr *MockSessionMockRecorder) OrderMerpay(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderMerpay", reflect.TypeOf((*MockSession)(nil).OrderMerpay), ctx, params)
}

// OrderPayPay mocks base method.
func (m *MockSession) OrderPayPay(ctx context.Context, params *komoju.OrderPayPayParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderPayPay", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderPayPay indicates an expected call of OrderPayPay.
func (mr *MockSessionMockRecorder) OrderPayPay(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderPayPay", reflect.TypeOf((*MockSession)(nil).OrderPayPay), ctx, params)
}

// OrderRakutenPay mocks base method.
func (m *MockSession) OrderRakutenPay(ctx context.Context, params *komoju.OrderRakutenPayParams) (*komoju.OrderSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderRakutenPay", ctx, params)
	ret0, _ := ret[0].(*komoju.OrderSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderRakutenPay indicates an expected call of OrderRakutenPay.
func (mr *MockSessionMockRecorder) OrderRakutenPay(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderRakutenPay", reflect.TypeOf((*MockSession)(nil).OrderRakutenPay), ctx, params)
}
