// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_media is a generated GoMock package.
package mock_media

import (
	context "context"
	reflect "reflect"

	media "github.com/and-period/furumaru/api/internal/media"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateCoordinatorHeader mocks base method.
func (m *MockService) GenerateCoordinatorHeader(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCoordinatorHeader", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCoordinatorHeader indicates an expected call of GenerateCoordinatorHeader.
func (mr *MockServiceMockRecorder) GenerateCoordinatorHeader(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCoordinatorHeader", reflect.TypeOf((*MockService)(nil).GenerateCoordinatorHeader), ctx, in)
}

// GenerateCoordinatorThumbnail mocks base method.
func (m *MockService) GenerateCoordinatorThumbnail(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCoordinatorThumbnail", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCoordinatorThumbnail indicates an expected call of GenerateCoordinatorThumbnail.
func (mr *MockServiceMockRecorder) GenerateCoordinatorThumbnail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCoordinatorThumbnail", reflect.TypeOf((*MockService)(nil).GenerateCoordinatorThumbnail), ctx, in)
}

// GenerateProducerHeader mocks base method.
func (m *MockService) GenerateProducerHeader(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProducerHeader", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProducerHeader indicates an expected call of GenerateProducerHeader.
func (mr *MockServiceMockRecorder) GenerateProducerHeader(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProducerHeader", reflect.TypeOf((*MockService)(nil).GenerateProducerHeader), ctx, in)
}

// GenerateProducerThumbnail mocks base method.
func (m *MockService) GenerateProducerThumbnail(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProducerThumbnail", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProducerThumbnail indicates an expected call of GenerateProducerThumbnail.
func (mr *MockServiceMockRecorder) GenerateProducerThumbnail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProducerThumbnail", reflect.TypeOf((*MockService)(nil).GenerateProducerThumbnail), ctx, in)
}

// GenerateProductMediaImage mocks base method.
func (m *MockService) GenerateProductMediaImage(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProductMediaImage", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProductMediaImage indicates an expected call of GenerateProductMediaImage.
func (mr *MockServiceMockRecorder) GenerateProductMediaImage(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProductMediaImage", reflect.TypeOf((*MockService)(nil).GenerateProductMediaImage), ctx, in)
}

// GenerateProductMediaVideo mocks base method.
func (m *MockService) GenerateProductMediaVideo(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProductMediaVideo", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProductMediaVideo indicates an expected call of GenerateProductMediaVideo.
func (mr *MockServiceMockRecorder) GenerateProductMediaVideo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProductMediaVideo", reflect.TypeOf((*MockService)(nil).GenerateProductMediaVideo), ctx, in)
}

// GenerateProductTypeIcon mocks base method.
func (m *MockService) GenerateProductTypeIcon(ctx context.Context, in *media.GenerateFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProductTypeIcon", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProductTypeIcon indicates an expected call of GenerateProductTypeIcon.
func (mr *MockServiceMockRecorder) GenerateProductTypeIcon(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProductTypeIcon", reflect.TypeOf((*MockService)(nil).GenerateProductTypeIcon), ctx, in)
}

// UploadCoordinatorHeader mocks base method.
func (m *MockService) UploadCoordinatorHeader(ctx context.Context, in *media.UploadFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCoordinatorHeader", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadCoordinatorHeader indicates an expected call of UploadCoordinatorHeader.
func (mr *MockServiceMockRecorder) UploadCoordinatorHeader(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCoordinatorHeader", reflect.TypeOf((*MockService)(nil).UploadCoordinatorHeader), ctx, in)
}

// UploadCoordinatorThumbnail mocks base method.
func (m *MockService) UploadCoordinatorThumbnail(ctx context.Context, in *media.UploadFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCoordinatorThumbnail", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadCoordinatorThumbnail indicates an expected call of UploadCoordinatorThumbnail.
func (mr *MockServiceMockRecorder) UploadCoordinatorThumbnail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCoordinatorThumbnail", reflect.TypeOf((*MockService)(nil).UploadCoordinatorThumbnail), ctx, in)
}

// UploadProducerHeader mocks base method.
func (m *MockService) UploadProducerHeader(ctx context.Context, in *media.UploadFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProducerHeader", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProducerHeader indicates an expected call of UploadProducerHeader.
func (mr *MockServiceMockRecorder) UploadProducerHeader(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProducerHeader", reflect.TypeOf((*MockService)(nil).UploadProducerHeader), ctx, in)
}

// UploadProducerThumbnail mocks base method.
func (m *MockService) UploadProducerThumbnail(ctx context.Context, in *media.UploadFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProducerThumbnail", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProducerThumbnail indicates an expected call of UploadProducerThumbnail.
func (mr *MockServiceMockRecorder) UploadProducerThumbnail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProducerThumbnail", reflect.TypeOf((*MockService)(nil).UploadProducerThumbnail), ctx, in)
}

// UploadProductMedia mocks base method.
func (m *MockService) UploadProductMedia(ctx context.Context, in *media.UploadFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProductMedia", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProductMedia indicates an expected call of UploadProductMedia.
func (mr *MockServiceMockRecorder) UploadProductMedia(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProductMedia", reflect.TypeOf((*MockService)(nil).UploadProductMedia), ctx, in)
}

// UploadProductTypeIcon mocks base method.
func (m *MockService) UploadProductTypeIcon(ctx context.Context, in *media.UploadFileInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProductTypeIcon", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProductTypeIcon indicates an expected call of UploadProductTypeIcon.
func (mr *MockServiceMockRecorder) UploadProductTypeIcon(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProductTypeIcon", reflect.TypeOf((*MockService)(nil).UploadProductTypeIcon), ctx, in)
}
