// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	common "github.com/and-period/furumaru/api/internal/common"
	database "github.com/and-period/furumaru/api/internal/user/database"
	entity "github.com/and-period/furumaru/api/internal/user/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAddress is a mock of Address interface.
type MockAddress struct {
	ctrl     *gomock.Controller
	recorder *MockAddressMockRecorder
}

// MockAddressMockRecorder is the mock recorder for MockAddress.
type MockAddressMockRecorder struct {
	mock *MockAddress
}

// NewMockAddress creates a new mock instance.
func NewMockAddress(ctrl *gomock.Controller) *MockAddress {
	mock := &MockAddress{ctrl: ctrl}
	mock.recorder = &MockAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddress) EXPECT() *MockAddressMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockAddress) Count(ctx context.Context, params *database.ListAddressesParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockAddressMockRecorder) Count(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAddress)(nil).Count), ctx, params)
}

// Create mocks base method.
func (m *MockAddress) Create(ctx context.Context, address *entity.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAddressMockRecorder) Create(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAddress)(nil).Create), ctx, address)
}

// Delete mocks base method.
func (m *MockAddress) Delete(ctx context.Context, addressID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, addressID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressMockRecorder) Delete(ctx, addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddress)(nil).Delete), ctx, addressID, userID)
}

// Get mocks base method.
func (m *MockAddress) Get(ctx context.Context, addressID string, fields ...string) (*entity.Address, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, addressID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAddressMockRecorder) Get(ctx, addressID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, addressID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAddress)(nil).Get), varargs...)
}

// GetDefault mocks base method.
func (m *MockAddress) GetDefault(ctx context.Context, userID string, fields ...string) (*entity.Address, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefault", varargs...)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefault indicates an expected call of GetDefault.
func (mr *MockAddressMockRecorder) GetDefault(ctx, userID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefault", reflect.TypeOf((*MockAddress)(nil).GetDefault), varargs...)
}

// List mocks base method.
func (m *MockAddress) List(ctx context.Context, params *database.ListAddressesParams, fields ...string) (entity.Addresses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(entity.Addresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAddressMockRecorder) List(ctx, params interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAddress)(nil).List), varargs...)
}

// ListDefault mocks base method.
func (m *MockAddress) ListDefault(ctx context.Context, userIDs []string, fields ...string) (entity.Addresses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDefault", varargs...)
	ret0, _ := ret[0].(entity.Addresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDefault indicates an expected call of ListDefault.
func (mr *MockAddressMockRecorder) ListDefault(ctx, userIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDefault", reflect.TypeOf((*MockAddress)(nil).ListDefault), varargs...)
}

// MultiGet mocks base method.
func (m *MockAddress) MultiGet(ctx context.Context, addressIDs []string, fields ...string) (entity.Addresses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, addressIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].(entity.Addresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockAddressMockRecorder) MultiGet(ctx, addressIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, addressIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockAddress)(nil).MultiGet), varargs...)
}

// MultiGetByRevision mocks base method.
func (m *MockAddress) MultiGetByRevision(ctx context.Context, revisionIDs []int64, fields ...string) (entity.Addresses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, revisionIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGetByRevision", varargs...)
	ret0, _ := ret[0].(entity.Addresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetByRevision indicates an expected call of MultiGetByRevision.
func (mr *MockAddressMockRecorder) MultiGetByRevision(ctx, revisionIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, revisionIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetByRevision", reflect.TypeOf((*MockAddress)(nil).MultiGetByRevision), varargs...)
}

// Update mocks base method.
func (m *MockAddress) Update(ctx context.Context, addressID, userID string, params *database.UpdateAddressParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, addressID, userID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressMockRecorder) Update(ctx, addressID, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddress)(nil).Update), ctx, addressID, userID, params)
}

// MockAdmin is a mock of Admin interface.
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin.
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance.
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAdmin) Get(ctx context.Context, adminID string, fields ...string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, adminID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAdminMockRecorder) Get(ctx, adminID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, adminID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAdmin)(nil).Get), varargs...)
}

// GetByCognitoID mocks base method.
func (m *MockAdmin) GetByCognitoID(ctx context.Context, cognitoID string, fields ...string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, cognitoID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByCognitoID", varargs...)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCognitoID indicates an expected call of GetByCognitoID.
func (mr *MockAdminMockRecorder) GetByCognitoID(ctx, cognitoID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, cognitoID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCognitoID", reflect.TypeOf((*MockAdmin)(nil).GetByCognitoID), varargs...)
}

// GetByEmail mocks base method.
func (m *MockAdmin) GetByEmail(ctx context.Context, email string, fields ...string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, email}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByEmail", varargs...)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockAdminMockRecorder) GetByEmail(ctx, email interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, email}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockAdmin)(nil).GetByEmail), varargs...)
}

// MultiGet mocks base method.
func (m *MockAdmin) MultiGet(ctx context.Context, adminIDs []string, fields ...string) (entity.Admins, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, adminIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].(entity.Admins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockAdminMockRecorder) MultiGet(ctx, adminIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, adminIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockAdmin)(nil).MultiGet), varargs...)
}

// UpdateDevice mocks base method.
func (m *MockAdmin) UpdateDevice(ctx context.Context, adminID, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, adminID, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockAdminMockRecorder) UpdateDevice(ctx, adminID, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockAdmin)(nil).UpdateDevice), ctx, adminID, device)
}

// UpdateEmail mocks base method.
func (m *MockAdmin) UpdateEmail(ctx context.Context, adminID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", ctx, adminID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockAdminMockRecorder) UpdateEmail(ctx, adminID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockAdmin)(nil).UpdateEmail), ctx, adminID, email)
}

// UpdateSignInAt mocks base method.
func (m *MockAdmin) UpdateSignInAt(ctx context.Context, adminID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignInAt", ctx, adminID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignInAt indicates an expected call of UpdateSignInAt.
func (mr *MockAdminMockRecorder) UpdateSignInAt(ctx, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignInAt", reflect.TypeOf((*MockAdmin)(nil).UpdateSignInAt), ctx, adminID)
}

// MockAdministrator is a mock of Administrator interface.
type MockAdministrator struct {
	ctrl     *gomock.Controller
	recorder *MockAdministratorMockRecorder
}

// MockAdministratorMockRecorder is the mock recorder for MockAdministrator.
type MockAdministratorMockRecorder struct {
	mock *MockAdministrator
}

// NewMockAdministrator creates a new mock instance.
func NewMockAdministrator(ctrl *gomock.Controller) *MockAdministrator {
	mock := &MockAdministrator{ctrl: ctrl}
	mock.recorder = &MockAdministratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdministrator) EXPECT() *MockAdministratorMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockAdministrator) Count(ctx context.Context, params *database.ListAdministratorsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockAdministratorMockRecorder) Count(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAdministrator)(nil).Count), ctx, params)
}

// Create mocks base method.
func (m *MockAdministrator) Create(ctx context.Context, administrator *entity.Administrator, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, administrator, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAdministratorMockRecorder) Create(ctx, administrator, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdministrator)(nil).Create), ctx, administrator, auth)
}

// Delete mocks base method.
func (m *MockAdministrator) Delete(ctx context.Context, administratorID string, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, administratorID, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAdministratorMockRecorder) Delete(ctx, administratorID, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAdministrator)(nil).Delete), ctx, administratorID, auth)
}

// Get mocks base method.
func (m *MockAdministrator) Get(ctx context.Context, administratorID string, fields ...string) (*entity.Administrator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, administratorID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.Administrator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAdministratorMockRecorder) Get(ctx, administratorID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, administratorID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAdministrator)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockAdministrator) List(ctx context.Context, params *database.ListAdministratorsParams, fields ...string) (entity.Administrators, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(entity.Administrators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAdministratorMockRecorder) List(ctx, params interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdministrator)(nil).List), varargs...)
}

// MultiGet mocks base method.
func (m *MockAdministrator) MultiGet(ctx context.Context, administratorIDs []string, fields ...string) (entity.Administrators, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, administratorIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].(entity.Administrators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockAdministratorMockRecorder) MultiGet(ctx, administratorIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, administratorIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockAdministrator)(nil).MultiGet), varargs...)
}

// Update mocks base method.
func (m *MockAdministrator) Update(ctx context.Context, administratorID string, params *database.UpdateAdministratorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, administratorID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAdministratorMockRecorder) Update(ctx, administratorID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdministrator)(nil).Update), ctx, administratorID, params)
}

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCoordinator) Count(ctx context.Context, params *database.ListCoordinatorsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCoordinatorMockRecorder) Count(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCoordinator)(nil).Count), ctx, params)
}

// Create mocks base method.
func (m *MockCoordinator) Create(ctx context.Context, coordinator *entity.Coordinator, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, coordinator, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCoordinatorMockRecorder) Create(ctx, coordinator, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoordinator)(nil).Create), ctx, coordinator, auth)
}

// Delete mocks base method.
func (m *MockCoordinator) Delete(ctx context.Context, coordinatorID string, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, coordinatorID, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCoordinatorMockRecorder) Delete(ctx, coordinatorID, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCoordinator)(nil).Delete), ctx, coordinatorID, auth)
}

// Get mocks base method.
func (m *MockCoordinator) Get(ctx context.Context, coordinatorID string, fields ...string) (*entity.Coordinator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, coordinatorID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.Coordinator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCoordinatorMockRecorder) Get(ctx, coordinatorID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, coordinatorID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCoordinator)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockCoordinator) List(ctx context.Context, params *database.ListCoordinatorsParams, fields ...string) (entity.Coordinators, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(entity.Coordinators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCoordinatorMockRecorder) List(ctx, params interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCoordinator)(nil).List), varargs...)
}

// MultiGet mocks base method.
func (m *MockCoordinator) MultiGet(ctx context.Context, coordinatorIDs []string, fields ...string) (entity.Coordinators, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, coordinatorIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].(entity.Coordinators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockCoordinatorMockRecorder) MultiGet(ctx, coordinatorIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, coordinatorIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockCoordinator)(nil).MultiGet), varargs...)
}

// RemoveProductTypeID mocks base method.
func (m *MockCoordinator) RemoveProductTypeID(ctx context.Context, productTypeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProductTypeID", ctx, productTypeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProductTypeID indicates an expected call of RemoveProductTypeID.
func (mr *MockCoordinatorMockRecorder) RemoveProductTypeID(ctx, productTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProductTypeID", reflect.TypeOf((*MockCoordinator)(nil).RemoveProductTypeID), ctx, productTypeID)
}

// Update mocks base method.
func (m *MockCoordinator) Update(ctx context.Context, coordinatorID string, params *database.UpdateCoordinatorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, coordinatorID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCoordinatorMockRecorder) Update(ctx, coordinatorID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCoordinator)(nil).Update), ctx, coordinatorID, params)
}

// UpdateHeaders mocks base method.
func (m *MockCoordinator) UpdateHeaders(ctx context.Context, coordinatorID string, headers common.Images) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHeaders", ctx, coordinatorID, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaders indicates an expected call of UpdateHeaders.
func (mr *MockCoordinatorMockRecorder) UpdateHeaders(ctx, coordinatorID, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaders", reflect.TypeOf((*MockCoordinator)(nil).UpdateHeaders), ctx, coordinatorID, headers)
}

// UpdateThumbnails mocks base method.
func (m *MockCoordinator) UpdateThumbnails(ctx context.Context, coordinatorID string, thumbnails common.Images) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThumbnails", ctx, coordinatorID, thumbnails)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThumbnails indicates an expected call of UpdateThumbnails.
func (mr *MockCoordinatorMockRecorder) UpdateThumbnails(ctx, coordinatorID, thumbnails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThumbnails", reflect.TypeOf((*MockCoordinator)(nil).UpdateThumbnails), ctx, coordinatorID, thumbnails)
}

// MockGuest is a mock of Guest interface.
type MockGuest struct {
	ctrl     *gomock.Controller
	recorder *MockGuestMockRecorder
}

// MockGuestMockRecorder is the mock recorder for MockGuest.
type MockGuestMockRecorder struct {
	mock *MockGuest
}

// NewMockGuest creates a new mock instance.
func NewMockGuest(ctrl *gomock.Controller) *MockGuest {
	mock := &MockGuest{ctrl: ctrl}
	mock.recorder = &MockGuestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuest) EXPECT() *MockGuestMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGuest) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGuestMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGuest)(nil).Delete), ctx, userID)
}

// MockMember is a mock of Member interface.
type MockMember struct {
	ctrl     *gomock.Controller
	recorder *MockMemberMockRecorder
}

// MockMemberMockRecorder is the mock recorder for MockMember.
type MockMemberMockRecorder struct {
	mock *MockMember
}

// NewMockMember creates a new mock instance.
func NewMockMember(ctrl *gomock.Controller) *MockMember {
	mock := &MockMember{ctrl: ctrl}
	mock.recorder = &MockMemberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMember) EXPECT() *MockMemberMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMember) Create(ctx context.Context, user *entity.User, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMemberMockRecorder) Create(ctx, user, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMember)(nil).Create), ctx, user, auth)
}

// Delete mocks base method.
func (m *MockMember) Delete(ctx context.Context, userID string, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemberMockRecorder) Delete(ctx, userID, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMember)(nil).Delete), ctx, userID, auth)
}

// Get mocks base method.
func (m *MockMember) Get(ctx context.Context, userID string, fields ...string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemberMockRecorder) Get(ctx, userID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMember)(nil).Get), varargs...)
}

// GetByCognitoID mocks base method.
func (m *MockMember) GetByCognitoID(ctx context.Context, cognitoID string, fields ...string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, cognitoID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByCognitoID", varargs...)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCognitoID indicates an expected call of GetByCognitoID.
func (mr *MockMemberMockRecorder) GetByCognitoID(ctx, cognitoID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, cognitoID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCognitoID", reflect.TypeOf((*MockMember)(nil).GetByCognitoID), varargs...)
}

// GetByEmail mocks base method.
func (m *MockMember) GetByEmail(ctx context.Context, email string, fields ...string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, email}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByEmail", varargs...)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockMemberMockRecorder) GetByEmail(ctx, email interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, email}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockMember)(nil).GetByEmail), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockMember) UpdateAccount(ctx context.Context, userID, accountID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, userID, accountID, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockMemberMockRecorder) UpdateAccount(ctx, userID, accountID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockMember)(nil).UpdateAccount), ctx, userID, accountID, username)
}

// UpdateEmail mocks base method.
func (m *MockMember) UpdateEmail(ctx context.Context, userID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", ctx, userID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockMemberMockRecorder) UpdateEmail(ctx, userID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockMember)(nil).UpdateEmail), ctx, userID, email)
}

// UpdateVerified mocks base method.
func (m *MockMember) UpdateVerified(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerified", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVerified indicates an expected call of UpdateVerified.
func (mr *MockMemberMockRecorder) UpdateVerified(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerified", reflect.TypeOf((*MockMember)(nil).UpdateVerified), ctx, userID)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// AggregateByCoordinatorID mocks base method.
func (m *MockProducer) AggregateByCoordinatorID(ctx context.Context, coordinatorIDs []string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateByCoordinatorID", ctx, coordinatorIDs)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateByCoordinatorID indicates an expected call of AggregateByCoordinatorID.
func (mr *MockProducerMockRecorder) AggregateByCoordinatorID(ctx, coordinatorIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateByCoordinatorID", reflect.TypeOf((*MockProducer)(nil).AggregateByCoordinatorID), ctx, coordinatorIDs)
}

// Count mocks base method.
func (m *MockProducer) Count(ctx context.Context, params *database.ListProducersParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockProducerMockRecorder) Count(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProducer)(nil).Count), ctx, params)
}

// Create mocks base method.
func (m *MockProducer) Create(ctx context.Context, producer *entity.Producer, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, producer, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProducerMockRecorder) Create(ctx, producer, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProducer)(nil).Create), ctx, producer, auth)
}

// Delete mocks base method.
func (m *MockProducer) Delete(ctx context.Context, producerID string, auth func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, producerID, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProducerMockRecorder) Delete(ctx, producerID, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProducer)(nil).Delete), ctx, producerID, auth)
}

// Get mocks base method.
func (m *MockProducer) Get(ctx context.Context, producerID string, fields ...string) (*entity.Producer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, producerID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProducerMockRecorder) Get(ctx, producerID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, producerID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProducer)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockProducer) List(ctx context.Context, params *database.ListProducersParams, fields ...string) (entity.Producers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(entity.Producers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProducerMockRecorder) List(ctx, params interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProducer)(nil).List), varargs...)
}

// MultiGet mocks base method.
func (m *MockProducer) MultiGet(ctx context.Context, producerIDs []string, fields ...string) (entity.Producers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, producerIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].(entity.Producers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockProducerMockRecorder) MultiGet(ctx, producerIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, producerIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockProducer)(nil).MultiGet), varargs...)
}

// Update mocks base method.
func (m *MockProducer) Update(ctx context.Context, producerID string, params *database.UpdateProducerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, producerID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProducerMockRecorder) Update(ctx, producerID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProducer)(nil).Update), ctx, producerID, params)
}

// UpdateHeaders mocks base method.
func (m *MockProducer) UpdateHeaders(ctx context.Context, producerID string, headers common.Images) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHeaders", ctx, producerID, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaders indicates an expected call of UpdateHeaders.
func (mr *MockProducerMockRecorder) UpdateHeaders(ctx, producerID, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaders", reflect.TypeOf((*MockProducer)(nil).UpdateHeaders), ctx, producerID, headers)
}

// UpdateRelationship mocks base method.
func (m *MockProducer) UpdateRelationship(ctx context.Context, coordinatorID string, producerIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, coordinatorID}
	for _, a := range producerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRelationship", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRelationship indicates an expected call of UpdateRelationship.
func (mr *MockProducerMockRecorder) UpdateRelationship(ctx, coordinatorID interface{}, producerIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, coordinatorID}, producerIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelationship", reflect.TypeOf((*MockProducer)(nil).UpdateRelationship), varargs...)
}

// UpdateThumbnails mocks base method.
func (m *MockProducer) UpdateThumbnails(ctx context.Context, producerID string, thumbnails common.Images) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThumbnails", ctx, producerID, thumbnails)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThumbnails indicates an expected call of UpdateThumbnails.
func (mr *MockProducerMockRecorder) UpdateThumbnails(ctx, producerID, thumbnails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThumbnails", reflect.TypeOf((*MockProducer)(nil).UpdateThumbnails), ctx, producerID, thumbnails)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUser) Count(ctx context.Context, params *database.ListUsersParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserMockRecorder) Count(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUser)(nil).Count), ctx, params)
}

// Get mocks base method.
func (m *MockUser) Get(ctx context.Context, userID string, fields ...string) (*entity.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserMockRecorder) Get(ctx, userID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUser)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockUser) List(ctx context.Context, params *database.ListUsersParams, fields ...string) (entity.Users, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserMockRecorder) List(ctx, params interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUser)(nil).List), varargs...)
}

// MultiGet mocks base method.
func (m *MockUser) MultiGet(ctx context.Context, userIDs []string, fields ...string) (entity.Users, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userIDs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockUserMockRecorder) MultiGet(ctx, userIDs interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userIDs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockUser)(nil).MultiGet), varargs...)
}
