/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesAuthResponse,
  TypesGetAccessTokenRequest,
  TypesSignInRequest,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesAuthResponseFromJSON,
    TypesAuthResponseToJSON,
    TypesGetAccessTokenRequestFromJSON,
    TypesGetAccessTokenRequestToJSON,
    TypesSignInRequestFromJSON,
    TypesSignInRequestToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface FacilitiesFacilityIdAuthDeleteRequest {
    facilityId: string;
}

export interface FacilitiesFacilityIdAuthPostRequest {
    facilityId: string;
    typesSignInRequest: TypesSignInRequest;
}

export interface FacilitiesFacilityIdAuthRefreshTokenPostRequest {
    facilityId: string;
    typesGetAccessTokenRequest: TypesGetAccessTokenRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * ふるマルからサインアウトします。
     * サインアウト
     */
    async facilitiesFacilityIdAuthDeleteRaw(requestParameters: FacilitiesFacilityIdAuthDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdAuthDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/auth`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ふるマルからサインアウトします。
     * サインアウト
     */
    async facilitiesFacilityIdAuthDelete(requestParameters: FacilitiesFacilityIdAuthDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.facilitiesFacilityIdAuthDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * LINEの認証トークンを渡すことで、ふるマルへサインインします。
     * サインイン
     */
    async facilitiesFacilityIdAuthPostRaw(requestParameters: FacilitiesFacilityIdAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdAuthPost().'
            );
        }

        if (requestParameters['typesSignInRequest'] == null) {
            throw new runtime.RequiredError(
                'typesSignInRequest',
                'Required parameter "typesSignInRequest" was null or undefined when calling facilitiesFacilityIdAuthPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/facilities/{facilityId}/auth`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesSignInRequestToJSON(requestParameters['typesSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthResponseFromJSON(jsonValue));
    }

    /**
     * LINEの認証トークンを渡すことで、ふるマルへサインインします。
     * サインイン
     */
    async facilitiesFacilityIdAuthPost(requestParameters: FacilitiesFacilityIdAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthResponse> {
        const response = await this.facilitiesFacilityIdAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新トークンを渡すことで、アクセストークンを再発行します。
     * アクセストークンの再発行
     */
    async facilitiesFacilityIdAuthRefreshTokenPostRaw(requestParameters: FacilitiesFacilityIdAuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdAuthRefreshTokenPost().'
            );
        }

        if (requestParameters['typesGetAccessTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'typesGetAccessTokenRequest',
                'Required parameter "typesGetAccessTokenRequest" was null or undefined when calling facilitiesFacilityIdAuthRefreshTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/auth/refresh-token`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesGetAccessTokenRequestToJSON(requestParameters['typesGetAccessTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthResponseFromJSON(jsonValue));
    }

    /**
     * 更新トークンを渡すことで、アクセストークンを再発行します。
     * アクセストークンの再発行
     */
    async facilitiesFacilityIdAuthRefreshTokenPost(requestParameters: FacilitiesFacilityIdAuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthResponse> {
        const response = await this.facilitiesFacilityIdAuthRefreshTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
