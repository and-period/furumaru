/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesAddCartItemRequest,
  TypesCalcCartResponse,
  TypesCartResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesAddCartItemRequestFromJSON,
    TypesAddCartItemRequestToJSON,
    TypesCalcCartResponseFromJSON,
    TypesCalcCartResponseToJSON,
    TypesCartResponseFromJSON,
    TypesCartResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface FacilitiesFacilityIdCartsCoordinatorIdGetRequest {
    facilityId: string;
    coordinatorId: string;
    number?: number;
    promotion?: string;
}

export interface FacilitiesFacilityIdCartsGetRequest {
    facilityId: string;
}

export interface FacilitiesFacilityIdCartsItemsPostRequest {
    facilityId: string;
    typesAddCartItemRequest: TypesAddCartItemRequest;
}

export interface FacilitiesFacilityIdCartsItemsProductIdDeleteRequest {
    facilityId: string;
    productId: string;
}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI {

    /**
     * カートの内容を計算します。
     * カート計算
     */
    async facilitiesFacilityIdCartsCoordinatorIdGetRaw(requestParameters: FacilitiesFacilityIdCartsCoordinatorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCalcCartResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdCartsCoordinatorIdGet().'
            );
        }

        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling facilitiesFacilityIdCartsCoordinatorIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['number'] != null) {
            queryParameters['number'] = requestParameters['number'];
        }

        if (requestParameters['promotion'] != null) {
            queryParameters['promotion'] = requestParameters['promotion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/carts/{coordinatorId}`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))).replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCalcCartResponseFromJSON(jsonValue));
    }

    /**
     * カートの内容を計算します。
     * カート計算
     */
    async facilitiesFacilityIdCartsCoordinatorIdGet(requestParameters: FacilitiesFacilityIdCartsCoordinatorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCalcCartResponse> {
        const response = await this.facilitiesFacilityIdCartsCoordinatorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * カートの内容を取得します。
     * カート取得
     */
    async facilitiesFacilityIdCartsGetRaw(requestParameters: FacilitiesFacilityIdCartsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCartResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdCartsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/carts`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCartResponseFromJSON(jsonValue));
    }

    /**
     * カートの内容を取得します。
     * カート取得
     */
    async facilitiesFacilityIdCartsGet(requestParameters: FacilitiesFacilityIdCartsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCartResponse> {
        const response = await this.facilitiesFacilityIdCartsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * カートに商品を追加します。
     * カートに追加
     */
    async facilitiesFacilityIdCartsItemsPostRaw(requestParameters: FacilitiesFacilityIdCartsItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdCartsItemsPost().'
            );
        }

        if (requestParameters['typesAddCartItemRequest'] == null) {
            throw new runtime.RequiredError(
                'typesAddCartItemRequest',
                'Required parameter "typesAddCartItemRequest" was null or undefined when calling facilitiesFacilityIdCartsItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/carts/-/items`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesAddCartItemRequestToJSON(requestParameters['typesAddCartItemRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * カートに商品を追加します。
     * カートに追加
     */
    async facilitiesFacilityIdCartsItemsPost(requestParameters: FacilitiesFacilityIdCartsItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.facilitiesFacilityIdCartsItemsPostRaw(requestParameters, initOverrides);
    }

    /**
     * カートから商品を削除します。
     * カートから削除
     */
    async facilitiesFacilityIdCartsItemsProductIdDeleteRaw(requestParameters: FacilitiesFacilityIdCartsItemsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdCartsItemsProductIdDelete().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling facilitiesFacilityIdCartsItemsProductIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/carts/-/items/{productId}`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * カートから商品を削除します。
     * カートから削除
     */
    async facilitiesFacilityIdCartsItemsProductIdDelete(requestParameters: FacilitiesFacilityIdCartsItemsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.facilitiesFacilityIdCartsItemsProductIdDeleteRaw(requestParameters, initOverrides);
    }

}
