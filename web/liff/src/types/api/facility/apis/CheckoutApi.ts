/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesCheckoutRequest,
  TypesCheckoutResponse,
  TypesCheckoutStateResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesCheckoutRequestFromJSON,
    TypesCheckoutRequestToJSON,
    TypesCheckoutResponseFromJSON,
    TypesCheckoutResponseToJSON,
    TypesCheckoutStateResponseFromJSON,
    TypesCheckoutStateResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface FacilitiesFacilityIdCheckoutsPostRequest {
    facilityId: string;
    typesCheckoutRequest: TypesCheckoutRequest;
}

export interface FacilitiesFacilityIdCheckoutsTransactionIdGetRequest {
    facilityId: string;
    transactionId: string;
}

/**
 * 
 */
export class CheckoutApi extends runtime.BaseAPI {

    /**
     * 商品を購入します。
     * 購入する
     */
    async facilitiesFacilityIdCheckoutsPostRaw(requestParameters: FacilitiesFacilityIdCheckoutsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCheckoutResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdCheckoutsPost().'
            );
        }

        if (requestParameters['typesCheckoutRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCheckoutRequest',
                'Required parameter "typesCheckoutRequest" was null or undefined when calling facilitiesFacilityIdCheckoutsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/checkouts`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCheckoutRequestToJSON(requestParameters['typesCheckoutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * 商品を購入します。
     * 購入する
     */
    async facilitiesFacilityIdCheckoutsPost(requestParameters: FacilitiesFacilityIdCheckoutsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCheckoutResponse> {
        const response = await this.facilitiesFacilityIdCheckoutsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 支払い状態を取得します。
     * 支払い状態取得
     */
    async facilitiesFacilityIdCheckoutsTransactionIdGetRaw(requestParameters: FacilitiesFacilityIdCheckoutsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCheckoutStateResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdCheckoutsTransactionIdGet().'
            );
        }

        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling facilitiesFacilityIdCheckoutsTransactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/checkouts/{transactionId}`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCheckoutStateResponseFromJSON(jsonValue));
    }

    /**
     * 支払い状態を取得します。
     * 支払い状態取得
     */
    async facilitiesFacilityIdCheckoutsTransactionIdGet(requestParameters: FacilitiesFacilityIdCheckoutsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCheckoutStateResponse> {
        const response = await this.facilitiesFacilityIdCheckoutsTransactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
