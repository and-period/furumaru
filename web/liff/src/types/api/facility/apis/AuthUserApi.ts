/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestCreateAuthUserRequest,
  RequestUpdateAuthUserRequest,
  ResponseAuthUserResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestCreateAuthUserRequestFromJSON,
    RequestCreateAuthUserRequestToJSON,
    RequestUpdateAuthUserRequestFromJSON,
    RequestUpdateAuthUserRequestToJSON,
    ResponseAuthUserResponseFromJSON,
    ResponseAuthUserResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface FacilitiesFacilityIdUsersMeGetRequest {
    facilityId: string;
}

export interface FacilitiesFacilityIdUsersMePutRequest {
    facilityId: string;
    requestUpdateAuthUserRequest: RequestUpdateAuthUserRequest;
}

export interface FacilitiesFacilityIdUsersPostRequest {
    facilityId: string;
    requestCreateAuthUserRequest: RequestCreateAuthUserRequest;
}

/**
 * 
 */
export class AuthUserApi extends runtime.BaseAPI {

    /**
     * ユーザーの詳細情報を取得します。
     * ユーザー情報取得
     */
    async facilitiesFacilityIdUsersMeGetRaw(requestParameters: FacilitiesFacilityIdUsersMeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthUserResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdUsersMeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/users/me`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * ユーザーの詳細情報を取得します。
     * ユーザー情報取得
     */
    async facilitiesFacilityIdUsersMeGet(requestParameters: FacilitiesFacilityIdUsersMeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthUserResponse> {
        const response = await this.facilitiesFacilityIdUsersMeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーの詳細情報を更新します。
     * ユーザー情報更新
     */
    async facilitiesFacilityIdUsersMePutRaw(requestParameters: FacilitiesFacilityIdUsersMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdUsersMePut().'
            );
        }

        if (requestParameters['requestUpdateAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthUserRequest',
                'Required parameter "requestUpdateAuthUserRequest" was null or undefined when calling facilitiesFacilityIdUsersMePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/facilities/{facilityId}/users/me`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthUserRequestToJSON(requestParameters['requestUpdateAuthUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの詳細情報を更新します。
     * ユーザー情報更新
     */
    async facilitiesFacilityIdUsersMePut(requestParameters: FacilitiesFacilityIdUsersMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.facilitiesFacilityIdUsersMePutRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの詳細情報を登録します。
     * ユーザー情報登録
     */
    async facilitiesFacilityIdUsersPostRaw(requestParameters: FacilitiesFacilityIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthUserResponse>> {
        if (requestParameters['facilityId'] == null) {
            throw new runtime.RequiredError(
                'facilityId',
                'Required parameter "facilityId" was null or undefined when calling facilitiesFacilityIdUsersPost().'
            );
        }

        if (requestParameters['requestCreateAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'requestCreateAuthUserRequest',
                'Required parameter "requestCreateAuthUserRequest" was null or undefined when calling facilitiesFacilityIdUsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/facilities/{facilityId}/users`.replace(`{${"facilityId"}}`, encodeURIComponent(String(requestParameters['facilityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCreateAuthUserRequestToJSON(requestParameters['requestCreateAuthUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * ユーザーの詳細情報を登録します。
     * ユーザー情報登録
     */
    async facilitiesFacilityIdUsersPost(requestParameters: FacilitiesFacilityIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthUserResponse> {
        const response = await this.facilitiesFacilityIdUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
