/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TypesCoordinator } from './TypesCoordinator';
import {
    TypesCoordinatorFromJSON,
    TypesCoordinatorFromJSONTyped,
    TypesCoordinatorToJSON,
} from './TypesCoordinator';
import type { TypesCart } from './TypesCart';
import {
    TypesCartFromJSON,
    TypesCartFromJSONTyped,
    TypesCartToJSON,
} from './TypesCart';
import type { TypesProduct } from './TypesProduct';
import {
    TypesProductFromJSON,
    TypesProductFromJSONTyped,
    TypesProductToJSON,
} from './TypesProduct';
import type { TypesCartItem } from './TypesCartItem';
import {
    TypesCartItemFromJSON,
    TypesCartItemFromJSONTyped,
    TypesCartItemToJSON,
} from './TypesCartItem';
import type { TypesPromotion } from './TypesPromotion';
import {
    TypesPromotionFromJSON,
    TypesPromotionFromJSONTyped,
    TypesPromotionToJSON,
} from './TypesPromotion';

/**
 * 
 * @export
 * @interface TypesCalcCartResponse
 */
export interface TypesCalcCartResponse {
    /**
     * カート一覧
     * @type {Array<TypesCart>}
     * @memberof TypesCalcCartResponse
     */
    carts?: Array<TypesCart>;
    /**
     * 
     * @type {TypesCoordinator}
     * @memberof TypesCalcCartResponse
     */
    coordinator?: TypesCoordinator;
    /**
     * 割引金額(税込)
     * @type {number}
     * @memberof TypesCalcCartResponse
     */
    discount?: number;
    /**
     * カート内の商品一覧(集計結果)
     * @type {Array<TypesCartItem>}
     * @memberof TypesCalcCartResponse
     */
    items?: Array<TypesCartItem>;
    /**
     * 商品一覧
     * @type {Array<TypesProduct>}
     * @memberof TypesCalcCartResponse
     */
    products?: Array<TypesProduct>;
    /**
     * 
     * @type {TypesPromotion}
     * @memberof TypesCalcCartResponse
     */
    promotion?: TypesPromotion;
    /**
     * 支払い時にAPIへ送信するキー(重複判定用)
     * @type {string}
     * @memberof TypesCalcCartResponse
     */
    requestId?: string;
    /**
     * 配送手数料(税込)
     * @type {number}
     * @memberof TypesCalcCartResponse
     */
    shippingFee?: number;
    /**
     * 購入金額(税込)
     * @type {number}
     * @memberof TypesCalcCartResponse
     */
    subtotal?: number;
    /**
     * 合計金額(税込)
     * @type {number}
     * @memberof TypesCalcCartResponse
     */
    total?: number;
}

/**
 * Check if a given object implements the TypesCalcCartResponse interface.
 */
export function instanceOfTypesCalcCartResponse(value: object): value is TypesCalcCartResponse {
    return true;
}

export function TypesCalcCartResponseFromJSON(json: any): TypesCalcCartResponse {
    return TypesCalcCartResponseFromJSONTyped(json, false);
}

export function TypesCalcCartResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesCalcCartResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'carts': json['carts'] == null ? undefined : ((json['carts'] as Array<any>).map(TypesCartFromJSON)),
        'coordinator': json['coordinator'] == null ? undefined : TypesCoordinatorFromJSON(json['coordinator']),
        'discount': json['discount'] == null ? undefined : json['discount'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(TypesCartItemFromJSON)),
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(TypesProductFromJSON)),
        'promotion': json['promotion'] == null ? undefined : TypesPromotionFromJSON(json['promotion']),
        'requestId': json['requestId'] == null ? undefined : json['requestId'],
        'shippingFee': json['shippingFee'] == null ? undefined : json['shippingFee'],
        'subtotal': json['subtotal'] == null ? undefined : json['subtotal'],
        'total': json['total'] == null ? undefined : json['total'],
    };
}

export function TypesCalcCartResponseToJSON(value?: TypesCalcCartResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'carts': value['carts'] == null ? undefined : ((value['carts'] as Array<any>).map(TypesCartToJSON)),
        'coordinator': TypesCoordinatorToJSON(value['coordinator']),
        'discount': value['discount'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(TypesCartItemToJSON)),
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(TypesProductToJSON)),
        'promotion': TypesPromotionToJSON(value['promotion']),
        'requestId': value['requestId'],
        'shippingFee': value['shippingFee'],
        'subtotal': value['subtotal'],
        'total': value['total'],
    };
}

