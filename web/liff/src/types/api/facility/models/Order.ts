/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderStatus } from './OrderStatus';
import {
    OrderStatusFromJSON,
    OrderStatusFromJSONTyped,
    OrderStatusToJSON,
    OrderStatusToJSONTyped,
} from './OrderStatus';
import type { OrderType } from './OrderType';
import {
    OrderTypeFromJSON,
    OrderTypeFromJSONTyped,
    OrderTypeToJSON,
    OrderTypeToJSONTyped,
} from './OrderType';
import type { OrderItem } from './OrderItem';
import {
    OrderItemFromJSON,
    OrderItemFromJSONTyped,
    OrderItemToJSON,
    OrderItemToJSONTyped,
} from './OrderItem';
import type { OrderRefund } from './OrderRefund';
import {
    OrderRefundFromJSON,
    OrderRefundFromJSONTyped,
    OrderRefundToJSON,
    OrderRefundToJSONTyped,
} from './OrderRefund';
import type { OrderPayment } from './OrderPayment';
import {
    OrderPaymentFromJSON,
    OrderPaymentFromJSONTyped,
    OrderPaymentToJSON,
    OrderPaymentToJSONTyped,
} from './OrderPayment';

/**
 * 注文履歴情報
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * コーディネータID
     * @type {string}
     * @memberof Order
     */
    coordinatorId: string;
    /**
     * 注文履歴ID
     * @type {string}
     * @memberof Order
     */
    id: string;
    /**
     * 注文商品一覧
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    items: Array<OrderItem>;
    /**
     * 
     * @type {OrderPayment}
     * @memberof Order
     */
    payment: OrderPayment;
    /**
     * 受け取り日時
     * @type {number}
     * @memberof Order
     */
    pickupAt: number;
    /**
     * 受け取り場所
     * @type {string}
     * @memberof Order
     */
    pickupLocation: string;
    /**
     * プロモーションID
     * @type {string}
     * @memberof Order
     */
    promotionId: string;
    /**
     * 
     * @type {OrderRefund}
     * @memberof Order
     */
    refund: OrderRefund;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    status: OrderStatus;
    /**
     * 
     * @type {OrderType}
     * @memberof Order
     */
    type: OrderType;
}



/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    if (!('coordinatorId' in value) || value['coordinatorId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    if (!('payment' in value) || value['payment'] === undefined) return false;
    if (!('pickupAt' in value) || value['pickupAt'] === undefined) return false;
    if (!('pickupLocation' in value) || value['pickupLocation'] === undefined) return false;
    if (!('promotionId' in value) || value['promotionId'] === undefined) return false;
    if (!('refund' in value) || value['refund'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'coordinatorId': json['coordinatorId'],
        'id': json['id'],
        'items': ((json['items'] as Array<any>).map(OrderItemFromJSON)),
        'payment': OrderPaymentFromJSON(json['payment']),
        'pickupAt': json['pickupAt'],
        'pickupLocation': json['pickupLocation'],
        'promotionId': json['promotionId'],
        'refund': OrderRefundFromJSON(json['refund']),
        'status': OrderStatusFromJSON(json['status']),
        'type': OrderTypeFromJSON(json['type']),
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'coordinatorId': value['coordinatorId'],
        'id': value['id'],
        'items': ((value['items'] as Array<any>).map(OrderItemToJSON)),
        'payment': OrderPaymentToJSON(value['payment']),
        'pickupAt': value['pickupAt'],
        'pickupLocation': value['pickupLocation'],
        'promotionId': value['promotionId'],
        'refund': OrderRefundToJSON(value['refund']),
        'status': OrderStatusToJSON(value['status']),
        'type': OrderTypeToJSON(value['type']),
    };
}

