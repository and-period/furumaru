/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResponseProduct } from './ResponseProduct';
import {
    ResponseProductFromJSON,
    ResponseProductFromJSONTyped,
    ResponseProductToJSON,
} from './ResponseProduct';
import type { ResponseCategory } from './ResponseCategory';
import {
    ResponseCategoryFromJSON,
    ResponseCategoryFromJSONTyped,
    ResponseCategoryToJSON,
} from './ResponseCategory';
import type { ResponseProductType } from './ResponseProductType';
import {
    ResponseProductTypeFromJSON,
    ResponseProductTypeFromJSONTyped,
    ResponseProductTypeToJSON,
} from './ResponseProductType';
import type { ResponseProductTag } from './ResponseProductTag';
import {
    ResponseProductTagFromJSON,
    ResponseProductTagFromJSONTyped,
    ResponseProductTagToJSON,
} from './ResponseProductTag';
import type { ResponseProducer } from './ResponseProducer';
import {
    ResponseProducerFromJSON,
    ResponseProducerFromJSONTyped,
    ResponseProducerToJSON,
} from './ResponseProducer';
import type { ResponseCoordinator } from './ResponseCoordinator';
import {
    ResponseCoordinatorFromJSON,
    ResponseCoordinatorFromJSONTyped,
    ResponseCoordinatorToJSON,
} from './ResponseCoordinator';

/**
 * 
 * @export
 * @interface ResponseProductResponse
 */
export interface ResponseProductResponse {
    /**
     * 
     * @type {ResponseCategory}
     * @memberof ResponseProductResponse
     */
    category?: ResponseCategory;
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseProductResponse
     */
    coordinator?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseProducer}
     * @memberof ResponseProductResponse
     */
    producer?: ResponseProducer;
    /**
     * 
     * @type {ResponseProduct}
     * @memberof ResponseProductResponse
     */
    product?: ResponseProduct;
    /**
     * 商品タグ一覧
     * @type {Array<ResponseProductTag>}
     * @memberof ResponseProductResponse
     */
    productTags?: Array<ResponseProductTag>;
    /**
     * 
     * @type {ResponseProductType}
     * @memberof ResponseProductResponse
     */
    productType?: ResponseProductType;
}

/**
 * Check if a given object implements the ResponseProductResponse interface.
 */
export function instanceOfResponseProductResponse(value: object): value is ResponseProductResponse {
    return true;
}

export function ResponseProductResponseFromJSON(json: any): ResponseProductResponse {
    return ResponseProductResponseFromJSONTyped(json, false);
}

export function ResponseProductResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseProductResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'category': json['category'] == null ? undefined : ResponseCategoryFromJSON(json['category']),
        'coordinator': json['coordinator'] == null ? undefined : ResponseCoordinatorFromJSON(json['coordinator']),
        'producer': json['producer'] == null ? undefined : ResponseProducerFromJSON(json['producer']),
        'product': json['product'] == null ? undefined : ResponseProductFromJSON(json['product']),
        'productTags': json['productTags'] == null ? undefined : ((json['productTags'] as Array<any>).map(ResponseProductTagFromJSON)),
        'productType': json['productType'] == null ? undefined : ResponseProductTypeFromJSON(json['productType']),
    };
}

export function ResponseProductResponseToJSON(value?: ResponseProductResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'category': ResponseCategoryToJSON(value['category']),
        'coordinator': ResponseCoordinatorToJSON(value['coordinator']),
        'producer': ResponseProducerToJSON(value['producer']),
        'product': ResponseProductToJSON(value['product']),
        'productTags': value['productTags'] == null ? undefined : ((value['productTags'] as Array<any>).map(ResponseProductTagToJSON)),
        'productType': ResponseProductTypeToJSON(value['productType']),
    };
}

