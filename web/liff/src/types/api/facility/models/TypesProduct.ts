/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TypesProductMedia } from './TypesProductMedia';
import {
    TypesProductMediaFromJSON,
    TypesProductMediaFromJSONTyped,
    TypesProductMediaToJSON,
} from './TypesProductMedia';
import type { TypesProductRate } from './TypesProductRate';
import {
    TypesProductRateFromJSON,
    TypesProductRateFromJSONTyped,
    TypesProductRateToJSON,
} from './TypesProductRate';

/**
 * 商品情報
 * @export
 * @interface TypesProduct
 */
export interface TypesProduct {
    /**
     * 箱の占有率(サイズ:60)
     * @type {number}
     * @memberof TypesProduct
     */
    box60Rate?: number;
    /**
     * 箱の占有率(サイズ:80)
     * @type {number}
     * @memberof TypesProduct
     */
    box80Rate?: number;
    /**
     * 箱の占有率(サイズ:100)
     * @type {number}
     * @memberof TypesProduct
     */
    box100Rate?: number;
    /**
     * 商品種別ID
     * @type {string}
     * @memberof TypesProduct
     */
    categoryId?: string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof TypesProduct
     */
    coordinatorId?: string;
    /**
     * 配送方法
     * @type {number}
     * @memberof TypesProduct
     */
    deliveryType?: number;
    /**
     * 商品説明
     * @type {string}
     * @memberof TypesProduct
     */
    description?: string;
    /**
     * 販売終了日時
     * @type {number}
     * @memberof TypesProduct
     */
    endAt?: number;
    /**
     * 賞味期限(単位:日)
     * @type {number}
     * @memberof TypesProduct
     */
    expirationDate?: number;
    /**
     * 商品ID
     * @type {string}
     * @memberof TypesProduct
     */
    id?: string;
    /**
     * 在庫数
     * @type {number}
     * @memberof TypesProduct
     */
    inventory?: number;
    /**
     * 数量単位説明
     * @type {string}
     * @memberof TypesProduct
     */
    itemDescription?: string;
    /**
     * 数量単位
     * @type {string}
     * @memberof TypesProduct
     */
    itemUnit?: string;
    /**
     * メディア一覧
     * @type {Array<TypesProductMedia>}
     * @memberof TypesProduct
     */
    media?: Array<TypesProductMedia>;
    /**
     * 商品名
     * @type {string}
     * @memberof TypesProduct
     */
    name?: string;
    /**
     * 原産地(市区町村)
     * @type {string}
     * @memberof TypesProduct
     */
    originCity?: string;
    /**
     * 原産地(都道府県)
     * @type {string}
     * @memberof TypesProduct
     */
    originPrefecture?: string;
    /**
     * 販売価格(税込)
     * @type {number}
     * @memberof TypesProduct
     */
    price?: number;
    /**
     * 生産者ID
     * @type {string}
     * @memberof TypesProduct
     */
    producerId?: string;
    /**
     * 商品タグID一覧
     * @type {Array<string>}
     * @memberof TypesProduct
     */
    productTagIds?: Array<string>;
    /**
     * 品目ID
     * @type {string}
     * @memberof TypesProduct
     */
    productTypeId?: string;
    /**
     * 
     * @type {TypesProductRate}
     * @memberof TypesProduct
     */
    rate?: TypesProductRate;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof TypesProduct
     */
    recommendedPoint1?: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof TypesProduct
     */
    recommendedPoint2?: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof TypesProduct
     */
    recommendedPoint3?: string;
    /**
     * 販売開始日時
     * @type {number}
     * @memberof TypesProduct
     */
    startAt?: number;
    /**
     * 販売状況
     * @type {number}
     * @memberof TypesProduct
     */
    status?: number;
    /**
     * 保存方法
     * @type {number}
     * @memberof TypesProduct
     */
    storageMethodType?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof TypesProduct
     */
    thumbnailUrl?: string;
    /**
     * 重量(kg,少数第一位まで)
     * @type {number}
     * @memberof TypesProduct
     */
    weight?: number;
}

/**
 * Check if a given object implements the TypesProduct interface.
 */
export function instanceOfTypesProduct(value: object): value is TypesProduct {
    return true;
}

export function TypesProductFromJSON(json: any): TypesProduct {
    return TypesProductFromJSONTyped(json, false);
}

export function TypesProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesProduct {
    if (json == null) {
        return json;
    }
    return {
        
        'box60Rate': json['box60Rate'] == null ? undefined : json['box60Rate'],
        'box80Rate': json['box80Rate'] == null ? undefined : json['box80Rate'],
        'box100Rate': json['box100Rate'] == null ? undefined : json['box100Rate'],
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'coordinatorId': json['coordinatorId'] == null ? undefined : json['coordinatorId'],
        'deliveryType': json['deliveryType'] == null ? undefined : json['deliveryType'],
        'description': json['description'] == null ? undefined : json['description'],
        'endAt': json['endAt'] == null ? undefined : json['endAt'],
        'expirationDate': json['expirationDate'] == null ? undefined : json['expirationDate'],
        'id': json['id'] == null ? undefined : json['id'],
        'inventory': json['inventory'] == null ? undefined : json['inventory'],
        'itemDescription': json['itemDescription'] == null ? undefined : json['itemDescription'],
        'itemUnit': json['itemUnit'] == null ? undefined : json['itemUnit'],
        'media': json['media'] == null ? undefined : ((json['media'] as Array<any>).map(TypesProductMediaFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'originCity': json['originCity'] == null ? undefined : json['originCity'],
        'originPrefecture': json['originPrefecture'] == null ? undefined : json['originPrefecture'],
        'price': json['price'] == null ? undefined : json['price'],
        'producerId': json['producerId'] == null ? undefined : json['producerId'],
        'productTagIds': json['productTagIds'] == null ? undefined : json['productTagIds'],
        'productTypeId': json['productTypeId'] == null ? undefined : json['productTypeId'],
        'rate': json['rate'] == null ? undefined : TypesProductRateFromJSON(json['rate']),
        'recommendedPoint1': json['recommendedPoint1'] == null ? undefined : json['recommendedPoint1'],
        'recommendedPoint2': json['recommendedPoint2'] == null ? undefined : json['recommendedPoint2'],
        'recommendedPoint3': json['recommendedPoint3'] == null ? undefined : json['recommendedPoint3'],
        'startAt': json['startAt'] == null ? undefined : json['startAt'],
        'status': json['status'] == null ? undefined : json['status'],
        'storageMethodType': json['storageMethodType'] == null ? undefined : json['storageMethodType'],
        'thumbnailUrl': json['thumbnailUrl'] == null ? undefined : json['thumbnailUrl'],
        'weight': json['weight'] == null ? undefined : json['weight'],
    };
}

export function TypesProductToJSON(value?: TypesProduct | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'box60Rate': value['box60Rate'],
        'box80Rate': value['box80Rate'],
        'box100Rate': value['box100Rate'],
        'categoryId': value['categoryId'],
        'coordinatorId': value['coordinatorId'],
        'deliveryType': value['deliveryType'],
        'description': value['description'],
        'endAt': value['endAt'],
        'expirationDate': value['expirationDate'],
        'id': value['id'],
        'inventory': value['inventory'],
        'itemDescription': value['itemDescription'],
        'itemUnit': value['itemUnit'],
        'media': value['media'] == null ? undefined : ((value['media'] as Array<any>).map(TypesProductMediaToJSON)),
        'name': value['name'],
        'originCity': value['originCity'],
        'originPrefecture': value['originPrefecture'],
        'price': value['price'],
        'producerId': value['producerId'],
        'productTagIds': value['productTagIds'],
        'productTypeId': value['productTypeId'],
        'rate': TypesProductRateToJSON(value['rate']),
        'recommendedPoint1': value['recommendedPoint1'],
        'recommendedPoint2': value['recommendedPoint2'],
        'recommendedPoint3': value['recommendedPoint3'],
        'startAt': value['startAt'],
        'status': value['status'],
        'storageMethodType': value['storageMethodType'],
        'thumbnailUrl': value['thumbnailUrl'],
        'weight': value['weight'],
    };
}

