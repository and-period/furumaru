/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TypesCoordinator } from './TypesCoordinator';
import {
    TypesCoordinatorFromJSON,
    TypesCoordinatorFromJSONTyped,
    TypesCoordinatorToJSON,
} from './TypesCoordinator';
import type { TypesProductTag } from './TypesProductTag';
import {
    TypesProductTagFromJSON,
    TypesProductTagFromJSONTyped,
    TypesProductTagToJSON,
} from './TypesProductTag';
import type { TypesProduct } from './TypesProduct';
import {
    TypesProductFromJSON,
    TypesProductFromJSONTyped,
    TypesProductToJSON,
} from './TypesProduct';
import type { TypesProducer } from './TypesProducer';
import {
    TypesProducerFromJSON,
    TypesProducerFromJSONTyped,
    TypesProducerToJSON,
} from './TypesProducer';
import type { TypesProductType } from './TypesProductType';
import {
    TypesProductTypeFromJSON,
    TypesProductTypeFromJSONTyped,
    TypesProductTypeToJSON,
} from './TypesProductType';
import type { TypesCategory } from './TypesCategory';
import {
    TypesCategoryFromJSON,
    TypesCategoryFromJSONTyped,
    TypesCategoryToJSON,
} from './TypesCategory';

/**
 * 
 * @export
 * @interface TypesProductsResponse
 */
export interface TypesProductsResponse {
    /**
     * 商品種別一覧
     * @type {Array<TypesCategory>}
     * @memberof TypesProductsResponse
     */
    categories?: Array<TypesCategory>;
    /**
     * コーディネータ一覧
     * @type {Array<TypesCoordinator>}
     * @memberof TypesProductsResponse
     */
    coordinators?: Array<TypesCoordinator>;
    /**
     * 生産者一覧
     * @type {Array<TypesProducer>}
     * @memberof TypesProductsResponse
     */
    producers?: Array<TypesProducer>;
    /**
     * 商品タグ一覧
     * @type {Array<TypesProductTag>}
     * @memberof TypesProductsResponse
     */
    productTags?: Array<TypesProductTag>;
    /**
     * 品目一覧
     * @type {Array<TypesProductType>}
     * @memberof TypesProductsResponse
     */
    productTypes?: Array<TypesProductType>;
    /**
     * 商品一覧
     * @type {Array<TypesProduct>}
     * @memberof TypesProductsResponse
     */
    products?: Array<TypesProduct>;
    /**
     * 商品合計数
     * @type {number}
     * @memberof TypesProductsResponse
     */
    total?: number;
}

/**
 * Check if a given object implements the TypesProductsResponse interface.
 */
export function instanceOfTypesProductsResponse(value: object): value is TypesProductsResponse {
    return true;
}

export function TypesProductsResponseFromJSON(json: any): TypesProductsResponse {
    return TypesProductsResponseFromJSONTyped(json, false);
}

export function TypesProductsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesProductsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'categories': json['categories'] == null ? undefined : ((json['categories'] as Array<any>).map(TypesCategoryFromJSON)),
        'coordinators': json['coordinators'] == null ? undefined : ((json['coordinators'] as Array<any>).map(TypesCoordinatorFromJSON)),
        'producers': json['producers'] == null ? undefined : ((json['producers'] as Array<any>).map(TypesProducerFromJSON)),
        'productTags': json['productTags'] == null ? undefined : ((json['productTags'] as Array<any>).map(TypesProductTagFromJSON)),
        'productTypes': json['productTypes'] == null ? undefined : ((json['productTypes'] as Array<any>).map(TypesProductTypeFromJSON)),
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(TypesProductFromJSON)),
        'total': json['total'] == null ? undefined : json['total'],
    };
}

export function TypesProductsResponseToJSON(value?: TypesProductsResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'categories': value['categories'] == null ? undefined : ((value['categories'] as Array<any>).map(TypesCategoryToJSON)),
        'coordinators': value['coordinators'] == null ? undefined : ((value['coordinators'] as Array<any>).map(TypesCoordinatorToJSON)),
        'producers': value['producers'] == null ? undefined : ((value['producers'] as Array<any>).map(TypesProducerToJSON)),
        'productTags': value['productTags'] == null ? undefined : ((value['productTags'] as Array<any>).map(TypesProductTagToJSON)),
        'productTypes': value['productTypes'] == null ? undefined : ((value['productTypes'] as Array<any>).map(TypesProductTypeToJSON)),
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(TypesProductToJSON)),
        'total': value['total'],
    };
}

