/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 外部宿泊施設向け
 * 外部宿泊施設向けのふるマルAPIです。（公開エンドポイントについては「ふるマルAPI - 購入者向け」を参照してください）
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResponseProduct } from './ResponseProduct';
import {
    ResponseProductFromJSON,
    ResponseProductFromJSONTyped,
    ResponseProductToJSON,
} from './ResponseProduct';
import type { ResponseCartItem } from './ResponseCartItem';
import {
    ResponseCartItemFromJSON,
    ResponseCartItemFromJSONTyped,
    ResponseCartItemToJSON,
} from './ResponseCartItem';
import type { ResponsePromotion } from './ResponsePromotion';
import {
    ResponsePromotionFromJSON,
    ResponsePromotionFromJSONTyped,
    ResponsePromotionToJSON,
} from './ResponsePromotion';
import type { ResponseCart } from './ResponseCart';
import {
    ResponseCartFromJSON,
    ResponseCartFromJSONTyped,
    ResponseCartToJSON,
} from './ResponseCart';
import type { ResponseCoordinator } from './ResponseCoordinator';
import {
    ResponseCoordinatorFromJSON,
    ResponseCoordinatorFromJSONTyped,
    ResponseCoordinatorToJSON,
} from './ResponseCoordinator';

/**
 * 
 * @export
 * @interface ResponseCalcCartResponse
 */
export interface ResponseCalcCartResponse {
    /**
     * カート一覧
     * @type {Array<ResponseCart>}
     * @memberof ResponseCalcCartResponse
     */
    carts?: Array<ResponseCart>;
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseCalcCartResponse
     */
    coordinator?: ResponseCoordinator;
    /**
     * 割引金額(税込)
     * @type {number}
     * @memberof ResponseCalcCartResponse
     */
    discount?: number;
    /**
     * カート内の商品一覧(集計結果)
     * @type {Array<ResponseCartItem>}
     * @memberof ResponseCalcCartResponse
     */
    items?: Array<ResponseCartItem>;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseCalcCartResponse
     */
    products?: Array<ResponseProduct>;
    /**
     * 
     * @type {ResponsePromotion}
     * @memberof ResponseCalcCartResponse
     */
    promotion?: ResponsePromotion;
    /**
     * 支払い時にAPIへ送信するキー(重複判定用)
     * @type {string}
     * @memberof ResponseCalcCartResponse
     */
    requestId?: string;
    /**
     * 配送手数料(税込)
     * @type {number}
     * @memberof ResponseCalcCartResponse
     */
    shippingFee?: number;
    /**
     * 購入金額(税込)
     * @type {number}
     * @memberof ResponseCalcCartResponse
     */
    subtotal?: number;
    /**
     * 合計金額(税込)
     * @type {number}
     * @memberof ResponseCalcCartResponse
     */
    total?: number;
}

/**
 * Check if a given object implements the ResponseCalcCartResponse interface.
 */
export function instanceOfResponseCalcCartResponse(value: object): value is ResponseCalcCartResponse {
    return true;
}

export function ResponseCalcCartResponseFromJSON(json: any): ResponseCalcCartResponse {
    return ResponseCalcCartResponseFromJSONTyped(json, false);
}

export function ResponseCalcCartResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseCalcCartResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'carts': json['carts'] == null ? undefined : ((json['carts'] as Array<any>).map(ResponseCartFromJSON)),
        'coordinator': json['coordinator'] == null ? undefined : ResponseCoordinatorFromJSON(json['coordinator']),
        'discount': json['discount'] == null ? undefined : json['discount'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(ResponseCartItemFromJSON)),
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(ResponseProductFromJSON)),
        'promotion': json['promotion'] == null ? undefined : ResponsePromotionFromJSON(json['promotion']),
        'requestId': json['requestId'] == null ? undefined : json['requestId'],
        'shippingFee': json['shippingFee'] == null ? undefined : json['shippingFee'],
        'subtotal': json['subtotal'] == null ? undefined : json['subtotal'],
        'total': json['total'] == null ? undefined : json['total'],
    };
}

export function ResponseCalcCartResponseToJSON(value?: ResponseCalcCartResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'carts': value['carts'] == null ? undefined : ((value['carts'] as Array<any>).map(ResponseCartToJSON)),
        'coordinator': ResponseCoordinatorToJSON(value['coordinator']),
        'discount': value['discount'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(ResponseCartItemToJSON)),
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(ResponseProductToJSON)),
        'promotion': ResponsePromotionToJSON(value['promotion']),
        'requestId': value['requestId'],
        'shippingFee': value['shippingFee'],
        'subtotal': value['subtotal'],
        'total': value['total'],
    };
}

