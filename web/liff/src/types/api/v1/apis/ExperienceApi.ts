/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExperienceResponse,
  ExperiencesResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperienceResponseFromJSON,
    ExperienceResponseToJSON,
    ExperiencesResponseFromJSON,
    ExperiencesResponseToJSON,
} from '../models/index';

export interface ExperiencesExperienceIdGetRequest {
    experienceId: string;
}

export interface ExperiencesGeolocationGetRequest {
    latitude: number;
    longitude: number;
    radius?: number;
    coordinatorId?: string;
    producerId?: string;
}

export interface ExperiencesGetRequest {
    limit?: number;
    offset?: number;
    prefectureCode?: number;
    coordinatorId?: string;
    producerId?: string;
    name?: string;
}

/**
 * 
 */
export class ExperienceApi extends runtime.BaseAPI {

    /**
     * 指定されたIDの体験詳細を取得します。
     * 体験詳細取得
     */
    async experiencesExperienceIdGetRaw(requestParameters: ExperiencesExperienceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiences/{experienceId}`;
        urlPath = urlPath.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたIDの体験詳細を取得します。
     * 体験詳細取得
     */
    async experiencesExperienceIdGet(requestParameters: ExperiencesExperienceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceResponse> {
        const response = await this.experiencesExperienceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定された位置情報周辺の体験一覧を取得します。
     * 位置情報による体験一覧取得
     */
    async experiencesGeolocationGetRaw(requestParameters: ExperiencesGeolocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperiencesResponse>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling experiencesGeolocationGet().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling experiencesGeolocationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['radius'] != null) {
            queryParameters['radius'] = requestParameters['radius'];
        }

        if (requestParameters['coordinatorId'] != null) {
            queryParameters['coordinatorId'] = requestParameters['coordinatorId'];
        }

        if (requestParameters['producerId'] != null) {
            queryParameters['producerId'] = requestParameters['producerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiences/geolocation`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperiencesResponseFromJSON(jsonValue));
    }

    /**
     * 指定された位置情報周辺の体験一覧を取得します。
     * 位置情報による体験一覧取得
     */
    async experiencesGeolocationGet(requestParameters: ExperiencesGeolocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperiencesResponse> {
        const response = await this.experiencesGeolocationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験の一覧を取得します。
     * 体験一覧取得
     */
    async experiencesGetRaw(requestParameters: ExperiencesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperiencesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['prefectureCode'] != null) {
            queryParameters['prefectureCode'] = requestParameters['prefectureCode'];
        }

        if (requestParameters['coordinatorId'] != null) {
            queryParameters['coordinatorId'] = requestParameters['coordinatorId'];
        }

        if (requestParameters['producerId'] != null) {
            queryParameters['producerId'] = requestParameters['producerId'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiences`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperiencesResponseFromJSON(jsonValue));
    }

    /**
     * 体験の一覧を取得します。
     * 体験一覧取得
     */
    async experiencesGet(requestParameters: ExperiencesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperiencesResponse> {
        const response = await this.experiencesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
