/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  OrderResponse,
  OrdersResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OrderResponseFromJSON,
    OrderResponseToJSON,
    OrdersResponseFromJSON,
    OrdersResponseToJSON,
} from '../models/index';

export interface OrdersGetRequest {
    limit?: number;
    offset?: number;
    types?: Array<number>;
}

export interface OrdersOrderIdGetRequest {
    orderId: string;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     * 注文の一覧を取得します。
     * 注文一覧取得
     */
    async ordersGetRaw(requestParameters: OrdersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * 注文の一覧を取得します。
     * 注文一覧取得
     */
    async ordersGet(requestParameters: OrdersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.ordersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 注文の詳細情報を取得します。
     * 注文詳細取得
     */
    async ordersOrderIdGetRaw(requestParameters: OrdersOrderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling ordersOrderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * 注文の詳細情報を取得します。
     * 注文詳細取得
     */
    async ordersOrderIdGet(requestParameters: OrdersOrderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.ordersOrderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
