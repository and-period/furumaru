/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthUserResponse,
  CreateAuthUserRequest,
  CreateAuthUserResponse,
  CreateAuthUserWithGoogleRequest,
  CreateAuthUserWithLINERequest,
  ErrorResponse,
  UpdateAuthUserAccountIDRequest,
  UpdateAuthUserEmailRequest,
  UpdateAuthUserNotificationRequest,
  UpdateAuthUserThumbnailRequest,
  UpdateAuthUserUsernameRequest,
  VerifyAuthUserEmailRequest,
  VerifyAuthUserRequest,
} from '../models/index';
import {
    AuthUserResponseFromJSON,
    AuthUserResponseToJSON,
    CreateAuthUserRequestFromJSON,
    CreateAuthUserRequestToJSON,
    CreateAuthUserResponseFromJSON,
    CreateAuthUserResponseToJSON,
    CreateAuthUserWithGoogleRequestFromJSON,
    CreateAuthUserWithGoogleRequestToJSON,
    CreateAuthUserWithLINERequestFromJSON,
    CreateAuthUserWithLINERequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateAuthUserAccountIDRequestFromJSON,
    UpdateAuthUserAccountIDRequestToJSON,
    UpdateAuthUserEmailRequestFromJSON,
    UpdateAuthUserEmailRequestToJSON,
    UpdateAuthUserNotificationRequestFromJSON,
    UpdateAuthUserNotificationRequestToJSON,
    UpdateAuthUserThumbnailRequestFromJSON,
    UpdateAuthUserThumbnailRequestToJSON,
    UpdateAuthUserUsernameRequestFromJSON,
    UpdateAuthUserUsernameRequestToJSON,
    VerifyAuthUserEmailRequestFromJSON,
    VerifyAuthUserEmailRequestToJSON,
    VerifyAuthUserRequestFromJSON,
    VerifyAuthUserRequestToJSON,
} from '../models/index';

export interface UsersMeAccountIdPatchRequest {
    updateAuthUserAccountIDRequest: UpdateAuthUserAccountIDRequest;
}

export interface UsersMeEmailPatchRequest {
    updateAuthUserEmailRequest: UpdateAuthUserEmailRequest;
}

export interface UsersMeEmailVerifiedPostRequest {
    verifyAuthUserEmailRequest: VerifyAuthUserEmailRequest;
}

export interface UsersMeGooglePostRequest {
    createAuthUserWithGoogleRequest: CreateAuthUserWithGoogleRequest;
}

export interface UsersMeLinePostRequest {
    createAuthUserWithLINERequest: CreateAuthUserWithLINERequest;
}

export interface UsersMeNotificationPatchRequest {
    updateAuthUserNotificationRequest: UpdateAuthUserNotificationRequest;
}

export interface UsersMePostRequest {
    createAuthUserRequest: CreateAuthUserRequest;
}

export interface UsersMeThumbnailPatchRequest {
    updateAuthUserThumbnailRequest: UpdateAuthUserThumbnailRequest;
}

export interface UsersMeUsernamePatchRequest {
    updateAuthUserUsernameRequest: UpdateAuthUserUsernameRequest;
}

export interface UsersMeVerifiedPostRequest {
    verifyAuthUserRequest: VerifyAuthUserRequest;
}

/**
 * 
 */
export class AuthUserApi extends runtime.BaseAPI {

    /**
     * ユーザーのアカウントIDを更新します。
     * アカウントID更新
     */
    async usersMeAccountIdPatchRaw(requestParameters: UsersMeAccountIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthUserAccountIDRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthUserAccountIDRequest',
                'Required parameter "updateAuthUserAccountIDRequest" was null or undefined when calling usersMeAccountIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me/account-id`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthUserAccountIDRequestToJSON(requestParameters['updateAuthUserAccountIDRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのアカウントIDを更新します。
     * アカウントID更新
     */
    async usersMeAccountIdPatch(requestParameters: UsersMeAccountIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeAccountIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーアカウントを削除します。
     * ユーザー削除
     */
    async usersMeDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーアカウントを削除します。
     * ユーザー削除
     */
    async usersMeDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeDeleteRaw(initOverrides);
    }

    /**
     * ユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async usersMeEmailPatchRaw(requestParameters: UsersMeEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthUserEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthUserEmailRequest',
                'Required parameter "updateAuthUserEmailRequest" was null or undefined when calling usersMeEmailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me/email`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthUserEmailRequestToJSON(requestParameters['updateAuthUserEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async usersMeEmailPatch(requestParameters: UsersMeEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeEmailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新時に送信される確認コードで更新を確定します。
     * メールアドレス更新確認
     */
    async usersMeEmailVerifiedPostRaw(requestParameters: UsersMeEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyAuthUserEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyAuthUserEmailRequest',
                'Required parameter "verifyAuthUserEmailRequest" was null or undefined when calling usersMeEmailVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me/email/verified`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyAuthUserEmailRequestToJSON(requestParameters['verifyAuthUserEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新時に送信される確認コードで更新を確定します。
     * メールアドレス更新確認
     */
    async usersMeEmailVerifiedPost(requestParameters: UsersMeEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeEmailVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * ログイン中のユーザー情報を取得します。
     * 認証ユーザー情報取得
     */
    async usersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中のユーザー情報を取得します。
     * 認証ユーザー情報取得
     */
    async usersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUserResponse> {
        const response = await this.usersMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Googleアカウントを使用してユーザー登録を行います。
     * Googleアカウントでユーザー登録
     */
    async usersMeGooglePostRaw(requestParameters: UsersMeGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUserResponse>> {
        if (requestParameters['createAuthUserWithGoogleRequest'] == null) {
            throw new runtime.RequiredError(
                'createAuthUserWithGoogleRequest',
                'Required parameter "createAuthUserWithGoogleRequest" was null or undefined when calling usersMeGooglePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/me/google`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthUserWithGoogleRequestToJSON(requestParameters['createAuthUserWithGoogleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserResponseFromJSON(jsonValue));
    }

    /**
     * Googleアカウントを使用してユーザー登録を行います。
     * Googleアカウントでユーザー登録
     */
    async usersMeGooglePost(requestParameters: UsersMeGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUserResponse> {
        const response = await this.usersMeGooglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINEアカウントを使用してユーザー登録を行います。
     * LINEアカウントでユーザー登録
     */
    async usersMeLinePostRaw(requestParameters: UsersMeLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUserResponse>> {
        if (requestParameters['createAuthUserWithLINERequest'] == null) {
            throw new runtime.RequiredError(
                'createAuthUserWithLINERequest',
                'Required parameter "createAuthUserWithLINERequest" was null or undefined when calling usersMeLinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/me/line`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthUserWithLINERequestToJSON(requestParameters['createAuthUserWithLINERequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserResponseFromJSON(jsonValue));
    }

    /**
     * LINEアカウントを使用してユーザー登録を行います。
     * LINEアカウントでユーザー登録
     */
    async usersMeLinePost(requestParameters: UsersMeLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUserResponse> {
        const response = await this.usersMeLinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーの通知設定を更新します。
     * 通知設定更新
     */
    async usersMeNotificationPatchRaw(requestParameters: UsersMeNotificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthUserNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthUserNotificationRequest',
                'Required parameter "updateAuthUserNotificationRequest" was null or undefined when calling usersMeNotificationPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me/notification`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthUserNotificationRequestToJSON(requestParameters['updateAuthUserNotificationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの通知設定を更新します。
     * 通知設定更新
     */
    async usersMeNotificationPatch(requestParameters: UsersMeNotificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeNotificationPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 新しいユーザーを登録します。
     * ユーザー登録
     */
    async usersMePostRaw(requestParameters: UsersMePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAuthUserResponse>> {
        if (requestParameters['createAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'createAuthUserRequest',
                'Required parameter "createAuthUserRequest" was null or undefined when calling usersMePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthUserRequestToJSON(requestParameters['createAuthUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * 新しいユーザーを登録します。
     * ユーザー登録
     */
    async usersMePost(requestParameters: UsersMePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAuthUserResponse> {
        const response = await this.usersMePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーのサムネイル画像を更新します。
     * サムネイル更新
     */
    async usersMeThumbnailPatchRaw(requestParameters: UsersMeThumbnailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthUserThumbnailRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthUserThumbnailRequest',
                'Required parameter "updateAuthUserThumbnailRequest" was null or undefined when calling usersMeThumbnailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me/thumbnail`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthUserThumbnailRequestToJSON(requestParameters['updateAuthUserThumbnailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのサムネイル画像を更新します。
     * サムネイル更新
     */
    async usersMeThumbnailPatch(requestParameters: UsersMeThumbnailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeThumbnailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの表示名を更新します。
     * ユーザー名更新
     */
    async usersMeUsernamePatchRaw(requestParameters: UsersMeUsernamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthUserUsernameRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthUserUsernameRequest',
                'Required parameter "updateAuthUserUsernameRequest" was null or undefined when calling usersMeUsernamePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/users/me/username`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthUserUsernameRequestToJSON(requestParameters['updateAuthUserUsernameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの表示名を更新します。
     * ユーザー名更新
     */
    async usersMeUsernamePatch(requestParameters: UsersMeUsernamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeUsernamePatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー登録時に送信される確認コードで登録を確定します。
     * ユーザー登録確認
     */
    async usersMeVerifiedPostRaw(requestParameters: UsersMeVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyAuthUserRequest',
                'Required parameter "verifyAuthUserRequest" was null or undefined when calling usersMeVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/me/verified`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyAuthUserRequestToJSON(requestParameters['verifyAuthUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー登録時に送信される確認コードで登録を確定します。
     * ユーザー登録確認
     */
    async usersMeVerifiedPost(requestParameters: UsersMeVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeVerifiedPostRaw(requestParameters, initOverrides);
    }

}
