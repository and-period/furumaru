/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesAuthUserResponse,
  TypesCreateAuthUserRequest,
  TypesCreateAuthUserResponse,
  TypesCreateAuthUserWithGoogleRequest,
  TypesCreateAuthUserWithLINERequest,
  TypesUpdateAuthUserAccountIDRequest,
  TypesUpdateAuthUserEmailRequest,
  TypesUpdateAuthUserNotificationRequest,
  TypesUpdateAuthUserThumbnailRequest,
  TypesUpdateAuthUserUsernameRequest,
  TypesVerifyAuthUserEmailRequest,
  TypesVerifyAuthUserRequest,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesAuthUserResponseFromJSON,
    TypesAuthUserResponseToJSON,
    TypesCreateAuthUserRequestFromJSON,
    TypesCreateAuthUserRequestToJSON,
    TypesCreateAuthUserResponseFromJSON,
    TypesCreateAuthUserResponseToJSON,
    TypesCreateAuthUserWithGoogleRequestFromJSON,
    TypesCreateAuthUserWithGoogleRequestToJSON,
    TypesCreateAuthUserWithLINERequestFromJSON,
    TypesCreateAuthUserWithLINERequestToJSON,
    TypesUpdateAuthUserAccountIDRequestFromJSON,
    TypesUpdateAuthUserAccountIDRequestToJSON,
    TypesUpdateAuthUserEmailRequestFromJSON,
    TypesUpdateAuthUserEmailRequestToJSON,
    TypesUpdateAuthUserNotificationRequestFromJSON,
    TypesUpdateAuthUserNotificationRequestToJSON,
    TypesUpdateAuthUserThumbnailRequestFromJSON,
    TypesUpdateAuthUserThumbnailRequestToJSON,
    TypesUpdateAuthUserUsernameRequestFromJSON,
    TypesUpdateAuthUserUsernameRequestToJSON,
    TypesVerifyAuthUserEmailRequestFromJSON,
    TypesVerifyAuthUserEmailRequestToJSON,
    TypesVerifyAuthUserRequestFromJSON,
    TypesVerifyAuthUserRequestToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface UsersMeAccountIdPatchRequest {
    typesUpdateAuthUserAccountIDRequest: TypesUpdateAuthUserAccountIDRequest;
}

export interface UsersMeEmailPatchRequest {
    typesUpdateAuthUserEmailRequest: TypesUpdateAuthUserEmailRequest;
}

export interface UsersMeEmailVerifiedPostRequest {
    typesVerifyAuthUserEmailRequest: TypesVerifyAuthUserEmailRequest;
}

export interface UsersMeGooglePostRequest {
    typesCreateAuthUserWithGoogleRequest: TypesCreateAuthUserWithGoogleRequest;
}

export interface UsersMeLinePostRequest {
    typesCreateAuthUserWithLINERequest: TypesCreateAuthUserWithLINERequest;
}

export interface UsersMeNotificationPatchRequest {
    typesUpdateAuthUserNotificationRequest: TypesUpdateAuthUserNotificationRequest;
}

export interface UsersMePostRequest {
    typesCreateAuthUserRequest: TypesCreateAuthUserRequest;
}

export interface UsersMeThumbnailPatchRequest {
    typesUpdateAuthUserThumbnailRequest: TypesUpdateAuthUserThumbnailRequest;
}

export interface UsersMeUsernamePatchRequest {
    typesUpdateAuthUserUsernameRequest: TypesUpdateAuthUserUsernameRequest;
}

export interface UsersMeVerifiedPostRequest {
    typesVerifyAuthUserRequest: TypesVerifyAuthUserRequest;
}

/**
 * 
 */
export class AuthUserApi extends runtime.BaseAPI {

    /**
     * ユーザーのアカウントIDを更新します。
     * アカウントID更新
     */
    async usersMeAccountIdPatchRaw(requestParameters: UsersMeAccountIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesUpdateAuthUserAccountIDRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateAuthUserAccountIDRequest',
                'Required parameter "typesUpdateAuthUserAccountIDRequest" was null or undefined when calling usersMeAccountIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/account-id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAuthUserAccountIDRequestToJSON(requestParameters['typesUpdateAuthUserAccountIDRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのアカウントIDを更新します。
     * アカウントID更新
     */
    async usersMeAccountIdPatch(requestParameters: UsersMeAccountIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeAccountIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーアカウントを削除します。
     * ユーザー削除
     */
    async usersMeDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーアカウントを削除します。
     * ユーザー削除
     */
    async usersMeDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeDeleteRaw(initOverrides);
    }

    /**
     * ユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async usersMeEmailPatchRaw(requestParameters: UsersMeEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesUpdateAuthUserEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateAuthUserEmailRequest',
                'Required parameter "typesUpdateAuthUserEmailRequest" was null or undefined when calling usersMeEmailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/email`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAuthUserEmailRequestToJSON(requestParameters['typesUpdateAuthUserEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async usersMeEmailPatch(requestParameters: UsersMeEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeEmailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新時に送信される確認コードで更新を確定します。
     * メールアドレス更新確認
     */
    async usersMeEmailVerifiedPostRaw(requestParameters: UsersMeEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesVerifyAuthUserEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'typesVerifyAuthUserEmailRequest',
                'Required parameter "typesVerifyAuthUserEmailRequest" was null or undefined when calling usersMeEmailVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/email/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesVerifyAuthUserEmailRequestToJSON(requestParameters['typesVerifyAuthUserEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新時に送信される確認コードで更新を確定します。
     * メールアドレス更新確認
     */
    async usersMeEmailVerifiedPost(requestParameters: UsersMeEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeEmailVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * ログイン中のユーザー情報を取得します。
     * 認証ユーザー情報取得
     */
    async usersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中のユーザー情報を取得します。
     * 認証ユーザー情報取得
     */
    async usersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthUserResponse> {
        const response = await this.usersMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Googleアカウントを使用してユーザー登録を行います。
     * Googleアカウントでユーザー登録
     */
    async usersMeGooglePostRaw(requestParameters: UsersMeGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthUserResponse>> {
        if (requestParameters['typesCreateAuthUserWithGoogleRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCreateAuthUserWithGoogleRequest',
                'Required parameter "typesCreateAuthUserWithGoogleRequest" was null or undefined when calling usersMeGooglePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/google`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateAuthUserWithGoogleRequestToJSON(requestParameters['typesCreateAuthUserWithGoogleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * Googleアカウントを使用してユーザー登録を行います。
     * Googleアカウントでユーザー登録
     */
    async usersMeGooglePost(requestParameters: UsersMeGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthUserResponse> {
        const response = await this.usersMeGooglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINEアカウントを使用してユーザー登録を行います。
     * LINEアカウントでユーザー登録
     */
    async usersMeLinePostRaw(requestParameters: UsersMeLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthUserResponse>> {
        if (requestParameters['typesCreateAuthUserWithLINERequest'] == null) {
            throw new runtime.RequiredError(
                'typesCreateAuthUserWithLINERequest',
                'Required parameter "typesCreateAuthUserWithLINERequest" was null or undefined when calling usersMeLinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/line`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateAuthUserWithLINERequestToJSON(requestParameters['typesCreateAuthUserWithLINERequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * LINEアカウントを使用してユーザー登録を行います。
     * LINEアカウントでユーザー登録
     */
    async usersMeLinePost(requestParameters: UsersMeLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthUserResponse> {
        const response = await this.usersMeLinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーの通知設定を更新します。
     * 通知設定更新
     */
    async usersMeNotificationPatchRaw(requestParameters: UsersMeNotificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesUpdateAuthUserNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateAuthUserNotificationRequest',
                'Required parameter "typesUpdateAuthUserNotificationRequest" was null or undefined when calling usersMeNotificationPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/notification`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAuthUserNotificationRequestToJSON(requestParameters['typesUpdateAuthUserNotificationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの通知設定を更新します。
     * 通知設定更新
     */
    async usersMeNotificationPatch(requestParameters: UsersMeNotificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeNotificationPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 新しいユーザーを登録します。
     * ユーザー登録
     */
    async usersMePostRaw(requestParameters: UsersMePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCreateAuthUserResponse>> {
        if (requestParameters['typesCreateAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCreateAuthUserRequest',
                'Required parameter "typesCreateAuthUserRequest" was null or undefined when calling usersMePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateAuthUserRequestToJSON(requestParameters['typesCreateAuthUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCreateAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * 新しいユーザーを登録します。
     * ユーザー登録
     */
    async usersMePost(requestParameters: UsersMePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCreateAuthUserResponse> {
        const response = await this.usersMePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーのサムネイル画像を更新します。
     * サムネイル更新
     */
    async usersMeThumbnailPatchRaw(requestParameters: UsersMeThumbnailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesUpdateAuthUserThumbnailRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateAuthUserThumbnailRequest',
                'Required parameter "typesUpdateAuthUserThumbnailRequest" was null or undefined when calling usersMeThumbnailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/thumbnail`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAuthUserThumbnailRequestToJSON(requestParameters['typesUpdateAuthUserThumbnailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのサムネイル画像を更新します。
     * サムネイル更新
     */
    async usersMeThumbnailPatch(requestParameters: UsersMeThumbnailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeThumbnailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの表示名を更新します。
     * ユーザー名更新
     */
    async usersMeUsernamePatchRaw(requestParameters: UsersMeUsernamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesUpdateAuthUserUsernameRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateAuthUserUsernameRequest',
                'Required parameter "typesUpdateAuthUserUsernameRequest" was null or undefined when calling usersMeUsernamePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/username`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAuthUserUsernameRequestToJSON(requestParameters['typesUpdateAuthUserUsernameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの表示名を更新します。
     * ユーザー名更新
     */
    async usersMeUsernamePatch(requestParameters: UsersMeUsernamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeUsernamePatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー登録時に送信される確認コードで登録を確定します。
     * ユーザー登録確認
     */
    async usersMeVerifiedPostRaw(requestParameters: UsersMeVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['typesVerifyAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'typesVerifyAuthUserRequest',
                'Required parameter "typesVerifyAuthUserRequest" was null or undefined when calling usersMeVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesVerifyAuthUserRequestToJSON(requestParameters['typesVerifyAuthUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー登録時に送信される確認コードで登録を確定します。
     * ユーザー登録確認
     */
    async usersMeVerifiedPost(requestParameters: UsersMeVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeVerifiedPostRaw(requestParameters, initOverrides);
    }

}
