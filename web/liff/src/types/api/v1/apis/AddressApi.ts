/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesAddressResponse,
  TypesAddressesResponse,
  TypesCreateAddressRequest,
  TypesUpdateAddressRequest,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesAddressResponseFromJSON,
    TypesAddressResponseToJSON,
    TypesAddressesResponseFromJSON,
    TypesAddressesResponseToJSON,
    TypesCreateAddressRequestFromJSON,
    TypesCreateAddressRequestToJSON,
    TypesUpdateAddressRequestFromJSON,
    TypesUpdateAddressRequestToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface AddressesAddressIdDeleteRequest {
    addressId: string;
}

export interface AddressesAddressIdGetRequest {
    addressId: string;
}

export interface AddressesAddressIdPatchRequest {
    addressId: string;
    typesUpdateAddressRequest: TypesUpdateAddressRequest;
}

export interface AddressesGetRequest {
    limit?: number;
    offset?: number;
}

export interface AddressesPostRequest {
    typesCreateAddressRequest: TypesCreateAddressRequest;
}

/**
 * 
 */
export class AddressApi extends runtime.BaseAPI {

    /**
     * 指定されたIDの住所を削除します。
     * 住所削除
     */
    async addressesAddressIdDeleteRaw(requestParameters: AddressesAddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling addressesAddressIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters['addressId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定されたIDの住所を削除します。
     * 住所削除
     */
    async addressesAddressIdDelete(requestParameters: AddressesAddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addressesAddressIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたIDの住所詳細を取得します。
     * 住所詳細取得
     */
    async addressesAddressIdGetRaw(requestParameters: AddressesAddressIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAddressResponse>> {
        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling addressesAddressIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters['addressId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAddressResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたIDの住所詳細を取得します。
     * 住所詳細取得
     */
    async addressesAddressIdGet(requestParameters: AddressesAddressIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAddressResponse> {
        const response = await this.addressesAddressIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたIDの住所情報を更新します。
     * 住所更新
     */
    async addressesAddressIdPatchRaw(requestParameters: AddressesAddressIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling addressesAddressIdPatch().'
            );
        }

        if (requestParameters['typesUpdateAddressRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateAddressRequest',
                'Required parameter "typesUpdateAddressRequest" was null or undefined when calling addressesAddressIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters['addressId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAddressRequestToJSON(requestParameters['typesUpdateAddressRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定されたIDの住所情報を更新します。
     * 住所更新
     */
    async addressesAddressIdPatch(requestParameters: AddressesAddressIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addressesAddressIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの登録済み住所一覧を取得します。
     * 住所一覧取得
     */
    async addressesGetRaw(requestParameters: AddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAddressesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAddressesResponseFromJSON(jsonValue));
    }

    /**
     * ユーザーの登録済み住所一覧を取得します。
     * 住所一覧取得
     */
    async addressesGet(requestParameters: AddressesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAddressesResponse> {
        const response = await this.addressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい住所を登録します。
     * 住所登録
     */
    async addressesPostRaw(requestParameters: AddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAddressResponse>> {
        if (requestParameters['typesCreateAddressRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCreateAddressRequest',
                'Required parameter "typesCreateAddressRequest" was null or undefined when calling addressesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateAddressRequestToJSON(requestParameters['typesCreateAddressRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAddressResponseFromJSON(jsonValue));
    }

    /**
     * 新しい住所を登録します。
     * 住所登録
     */
    async addressesPost(requestParameters: AddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAddressResponse> {
        const response = await this.addressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
