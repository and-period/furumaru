/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCartItemRequest,
  CalcCartResponse,
  CartResponse,
  ErrorResponse,
} from '../models/index';
import {
    AddCartItemRequestFromJSON,
    AddCartItemRequestToJSON,
    CalcCartResponseFromJSON,
    CalcCartResponseToJSON,
    CartResponseFromJSON,
    CartResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CartsCoordinatorIdGetRequest {
    coordinatorId: string;
    number?: number;
    prefecture?: number;
    promotion?: string;
}

export interface CartsItemsPostRequest {
    addCartItemRequest: AddCartItemRequest;
}

export interface CartsItemsProductIdDeleteRequest {
    productId: string;
    number?: number;
}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI {

    /**
     * 指定されたコーディネータの買い物かごの送料や合計金額を計算します。
     * 買い物かご計算
     */
    async cartsCoordinatorIdGetRaw(requestParameters: CartsCoordinatorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalcCartResponse>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling cartsCoordinatorIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['number'] != null) {
            queryParameters['number'] = requestParameters['number'];
        }

        if (requestParameters['prefecture'] != null) {
            queryParameters['prefecture'] = requestParameters['prefecture'];
        }

        if (requestParameters['promotion'] != null) {
            queryParameters['promotion'] = requestParameters['promotion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carts/{coordinatorId}`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalcCartResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたコーディネータの買い物かごの送料や合計金額を計算します。
     * 買い物かご計算
     */
    async cartsCoordinatorIdGet(requestParameters: CartsCoordinatorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalcCartResponse> {
        const response = await this.cartsCoordinatorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 買い物かごの内容を取得します。
     * 買い物かご取得
     */
    async cartsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartResponseFromJSON(jsonValue));
    }

    /**
     * 買い物かごの内容を取得します。
     * 買い物かご取得
     */
    async cartsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse> {
        const response = await this.cartsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 買い物かごに商品を追加します。
     * 買い物かごに商品追加
     */
    async cartsItemsPostRaw(requestParameters: CartsItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addCartItemRequest'] == null) {
            throw new runtime.RequiredError(
                'addCartItemRequest',
                'Required parameter "addCartItemRequest" was null or undefined when calling cartsItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carts/-/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCartItemRequestToJSON(requestParameters['addCartItemRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 買い物かごに商品を追加します。
     * 買い物かごに商品追加
     */
    async cartsItemsPost(requestParameters: CartsItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cartsItemsPostRaw(requestParameters, initOverrides);
    }

    /**
     * 買い物かごから商品を削除します。
     * 買い物かごから商品削除
     */
    async cartsItemsProductIdDeleteRaw(requestParameters: CartsItemsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling cartsItemsProductIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['number'] != null) {
            queryParameters['number'] = requestParameters['number'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carts/-/items/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 買い物かごから商品を削除します。
     * 買い物かごから商品削除
     */
    async cartsItemsProductIdDelete(requestParameters: CartsItemsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cartsItemsProductIdDeleteRaw(requestParameters, initOverrides);
    }

}
