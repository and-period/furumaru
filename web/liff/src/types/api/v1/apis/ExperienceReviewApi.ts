/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestCreateExperienceReviewRequest,
  RequestUpdateExperienceReviewRequest,
  RequestUpsertExperienceReviewReactionRequest,
  ResponseExperienceReviewResponse,
  ResponseExperienceReviewsResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestCreateExperienceReviewRequestFromJSON,
    RequestCreateExperienceReviewRequestToJSON,
    RequestUpdateExperienceReviewRequestFromJSON,
    RequestUpdateExperienceReviewRequestToJSON,
    RequestUpsertExperienceReviewReactionRequestFromJSON,
    RequestUpsertExperienceReviewReactionRequestToJSON,
    ResponseExperienceReviewResponseFromJSON,
    ResponseExperienceReviewResponseToJSON,
    ResponseExperienceReviewsResponseFromJSON,
    ResponseExperienceReviewsResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface ExperiencesExperienceIdReviewsGetRequest {
    experienceId: string;
    limit?: number;
    offset?: number;
}

export interface ExperiencesExperienceIdReviewsPostRequest {
    experienceId: string;
    requestCreateExperienceReviewRequest: RequestCreateExperienceReviewRequest;
}

export interface ExperiencesExperienceIdReviewsReviewIdGetRequest {
    experienceId: string;
    reviewId: string;
}

export interface ExperiencesExperienceIdReviewsReviewIdPatchRequest {
    experienceId: string;
    reviewId: string;
    requestUpdateExperienceReviewRequest: RequestUpdateExperienceReviewRequest;
}

export interface ExperiencesExperienceIdReviewsReviewIdReactionsDeleteRequest {
    experienceId: string;
    reviewId: string;
}

export interface ExperiencesExperienceIdReviewsReviewIdReactionsPostRequest {
    experienceId: string;
    reviewId: string;
    requestUpsertExperienceReviewReactionRequest: RequestUpsertExperienceReviewReactionRequest;
}

export interface UsersMeExperiencesExperienceIdReviewsGetRequest {
    experienceId: string;
}

/**
 * 
 */
export class ExperienceReviewApi extends runtime.BaseAPI {

    /**
     * 指定した体験のレビュー一覧を取得します。
     * 体験レビュー一覧取得
     */
    async experiencesExperienceIdReviewsGetRaw(requestParameters: ExperiencesExperienceIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExperienceReviewsResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdReviewsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experiences/{experienceId}/reviews`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExperienceReviewsResponseFromJSON(jsonValue));
    }

    /**
     * 指定した体験のレビュー一覧を取得します。
     * 体験レビュー一覧取得
     */
    async experiencesExperienceIdReviewsGet(requestParameters: ExperiencesExperienceIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExperienceReviewsResponse> {
        const response = await this.experiencesExperienceIdReviewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験のレビューを作成します。
     * 体験レビュー作成
     */
    async experiencesExperienceIdReviewsPostRaw(requestParameters: ExperiencesExperienceIdReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdReviewsPost().'
            );
        }

        if (requestParameters['requestCreateExperienceReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'requestCreateExperienceReviewRequest',
                'Required parameter "requestCreateExperienceReviewRequest" was null or undefined when calling experiencesExperienceIdReviewsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/experiences/{experienceId}/reviews`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCreateExperienceReviewRequestToJSON(requestParameters['requestCreateExperienceReviewRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験のレビューを作成します。
     * 体験レビュー作成
     */
    async experiencesExperienceIdReviewsPost(requestParameters: ExperiencesExperienceIdReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.experiencesExperienceIdReviewsPostRaw(requestParameters, initOverrides);
    }

    /**
     * 体験レビューの詳細情報を取得します。
     * 体験レビュー詳細取得
     */
    async experiencesExperienceIdReviewsReviewIdGetRaw(requestParameters: ExperiencesExperienceIdReviewsReviewIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExperienceReviewResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdGet().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experiences/{experienceId}/reviews/{reviewId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExperienceReviewResponseFromJSON(jsonValue));
    }

    /**
     * 体験レビューの詳細情報を取得します。
     * 体験レビュー詳細取得
     */
    async experiencesExperienceIdReviewsReviewIdGet(requestParameters: ExperiencesExperienceIdReviewsReviewIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExperienceReviewResponse> {
        const response = await this.experiencesExperienceIdReviewsReviewIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験レビューの内容を更新します。
     * 体験レビュー更新
     */
    async experiencesExperienceIdReviewsReviewIdPatchRaw(requestParameters: ExperiencesExperienceIdReviewsReviewIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdPatch().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdPatch().'
            );
        }

        if (requestParameters['requestUpdateExperienceReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateExperienceReviewRequest',
                'Required parameter "requestUpdateExperienceReviewRequest" was null or undefined when calling experiencesExperienceIdReviewsReviewIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/experiences/{experienceId}/reviews/{reviewId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateExperienceReviewRequestToJSON(requestParameters['requestUpdateExperienceReviewRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビューの内容を更新します。
     * 体験レビュー更新
     */
    async experiencesExperienceIdReviewsReviewIdPatch(requestParameters: ExperiencesExperienceIdReviewsReviewIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.experiencesExperienceIdReviewsReviewIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 体験レビューに対するリアクションを削除します。
     * 体験レビューリアクション削除
     */
    async experiencesExperienceIdReviewsReviewIdReactionsDeleteRaw(requestParameters: ExperiencesExperienceIdReviewsReviewIdReactionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdReactionsDelete().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdReactionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/experiences/{experienceId}/reviews/{reviewId}/reactions`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビューに対するリアクションを削除します。
     * 体験レビューリアクション削除
     */
    async experiencesExperienceIdReviewsReviewIdReactionsDelete(requestParameters: ExperiencesExperienceIdReviewsReviewIdReactionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.experiencesExperienceIdReviewsReviewIdReactionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 体験レビューに対するリアクション（いいねなど）を登録または更新します。
     * 体験レビューリアクション登録/更新
     */
    async experiencesExperienceIdReviewsReviewIdReactionsPostRaw(requestParameters: ExperiencesExperienceIdReviewsReviewIdReactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdReactionsPost().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling experiencesExperienceIdReviewsReviewIdReactionsPost().'
            );
        }

        if (requestParameters['requestUpsertExperienceReviewReactionRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpsertExperienceReviewReactionRequest',
                'Required parameter "requestUpsertExperienceReviewReactionRequest" was null or undefined when calling experiencesExperienceIdReviewsReviewIdReactionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/experiences/{experienceId}/reviews/{reviewId}/reactions`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpsertExperienceReviewReactionRequestToJSON(requestParameters['requestUpsertExperienceReviewReactionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビューに対するリアクション（いいねなど）を登録または更新します。
     * 体験レビューリアクション登録/更新
     */
    async experiencesExperienceIdReviewsReviewIdReactionsPost(requestParameters: ExperiencesExperienceIdReviewsReviewIdReactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.experiencesExperienceIdReviewsReviewIdReactionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * ログイン中のユーザーが投稿した体験レビューの一覧を取得します。
     * ユーザー体験レビュー一覧取得
     */
    async usersMeExperiencesExperienceIdReviewsGetRaw(requestParameters: UsersMeExperiencesExperienceIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExperienceReviewsResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling usersMeExperiencesExperienceIdReviewsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/experiences/{experienceId}/reviews`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExperienceReviewsResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中のユーザーが投稿した体験レビューの一覧を取得します。
     * ユーザー体験レビュー一覧取得
     */
    async usersMeExperiencesExperienceIdReviewsGet(requestParameters: UsersMeExperiencesExperienceIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExperienceReviewsResponse> {
        const response = await this.usersMeExperiencesExperienceIdReviewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
