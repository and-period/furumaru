/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesCheckoutExperienceRequest,
  TypesCheckoutProductRequest,
  TypesCheckoutResponse,
  TypesCheckoutStateResponse,
  TypesPreCheckoutExperienceResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesCheckoutExperienceRequestFromJSON,
    TypesCheckoutExperienceRequestToJSON,
    TypesCheckoutProductRequestFromJSON,
    TypesCheckoutProductRequestToJSON,
    TypesCheckoutResponseFromJSON,
    TypesCheckoutResponseToJSON,
    TypesCheckoutStateResponseFromJSON,
    TypesCheckoutStateResponseToJSON,
    TypesPreCheckoutExperienceResponseFromJSON,
    TypesPreCheckoutExperienceResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface CheckoutsExperiencesExperienceIdGetRequest {
    experienceId: string;
}

export interface CheckoutsExperiencesExperienceIdPostRequest {
    experienceId: string;
    typesCheckoutExperienceRequest: TypesCheckoutExperienceRequest;
}

export interface CheckoutsProductsPostRequest {
    typesCheckoutProductRequest: TypesCheckoutProductRequest;
}

export interface CheckoutsTransactionIdGetRequest {
    transactionId: string;
}

/**
 * 
 */
export class CheckoutApi extends runtime.BaseAPI {

    /**
     * 体験を決済する前に必要な情報を取得します。
     * 体験事前決済情報取得
     */
    async checkoutsExperiencesExperienceIdGetRaw(requestParameters: CheckoutsExperiencesExperienceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesPreCheckoutExperienceResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling checkoutsExperiencesExperienceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/experiences/{experienceId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesPreCheckoutExperienceResponseFromJSON(jsonValue));
    }

    /**
     * 体験を決済する前に必要な情報を取得します。
     * 体験事前決済情報取得
     */
    async checkoutsExperiencesExperienceIdGet(requestParameters: CheckoutsExperiencesExperienceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesPreCheckoutExperienceResponse> {
        const response = await this.checkoutsExperiencesExperienceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験の決済を実行し、予約を作成します。
     * 体験決済
     */
    async checkoutsExperiencesExperienceIdPostRaw(requestParameters: CheckoutsExperiencesExperienceIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCheckoutResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling checkoutsExperiencesExperienceIdPost().'
            );
        }

        if (requestParameters['typesCheckoutExperienceRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCheckoutExperienceRequest',
                'Required parameter "typesCheckoutExperienceRequest" was null or undefined when calling checkoutsExperiencesExperienceIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/experiences/{experienceId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCheckoutExperienceRequestToJSON(requestParameters['typesCheckoutExperienceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * 体験の決済を実行し、予約を作成します。
     * 体験決済
     */
    async checkoutsExperiencesExperienceIdPost(requestParameters: CheckoutsExperiencesExperienceIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCheckoutResponse> {
        const response = await this.checkoutsExperiencesExperienceIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品の決済を実行し、注文を作成します。
     * 商品決済
     */
    async checkoutsProductsPostRaw(requestParameters: CheckoutsProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCheckoutResponse>> {
        if (requestParameters['typesCheckoutProductRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCheckoutProductRequest',
                'Required parameter "typesCheckoutProductRequest" was null or undefined when calling checkoutsProductsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCheckoutProductRequestToJSON(requestParameters['typesCheckoutProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * 商品の決済を実行し、注文を作成します。
     * 商品決済
     */
    async checkoutsProductsPost(requestParameters: CheckoutsProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCheckoutResponse> {
        const response = await this.checkoutsProductsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 決済トランザクションの状態を取得します。
     * 決済状態取得
     */
    async checkoutsTransactionIdGetRaw(requestParameters: CheckoutsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesCheckoutStateResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling checkoutsTransactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesCheckoutStateResponseFromJSON(jsonValue));
    }

    /**
     * 決済トランザクションの状態を取得します。
     * 決済状態取得
     */
    async checkoutsTransactionIdGet(requestParameters: CheckoutsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesCheckoutStateResponse> {
        const response = await this.checkoutsTransactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
