/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestGuestCheckoutExperienceRequest,
  RequestGuestCheckoutProductRequest,
  ResponseCheckoutResponse,
  ResponseCheckoutStateResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestGuestCheckoutExperienceRequestFromJSON,
    RequestGuestCheckoutExperienceRequestToJSON,
    RequestGuestCheckoutProductRequestFromJSON,
    RequestGuestCheckoutProductRequestToJSON,
    ResponseCheckoutResponseFromJSON,
    ResponseCheckoutResponseToJSON,
    ResponseCheckoutStateResponseFromJSON,
    ResponseCheckoutStateResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface GuestsCheckoutsExperiencesExperienceIdPostRequest {
    experienceId: string;
    requestGuestCheckoutExperienceRequest: RequestGuestCheckoutExperienceRequest;
}

export interface GuestsCheckoutsProductsPostRequest {
    requestGuestCheckoutProductRequest: RequestGuestCheckoutProductRequest;
}

export interface GuestsCheckoutsTransactionIdGetRequest {
    transactionId: string;
}

/**
 * 
 */
export class GuestCheckoutApi extends runtime.BaseAPI {

    /**
     * ゲストユーザーとして体験の決済を実行し、予約を作成します。
     * ゲスト体験決済
     */
    async guestsCheckoutsExperiencesExperienceIdPostRaw(requestParameters: GuestsCheckoutsExperiencesExperienceIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCheckoutResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling guestsCheckoutsExperiencesExperienceIdPost().'
            );
        }

        if (requestParameters['requestGuestCheckoutExperienceRequest'] == null) {
            throw new runtime.RequiredError(
                'requestGuestCheckoutExperienceRequest',
                'Required parameter "requestGuestCheckoutExperienceRequest" was null or undefined when calling guestsCheckoutsExperiencesExperienceIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/guests/checkouts/experiences/{experienceId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestGuestCheckoutExperienceRequestToJSON(requestParameters['requestGuestCheckoutExperienceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * ゲストユーザーとして体験の決済を実行し、予約を作成します。
     * ゲスト体験決済
     */
    async guestsCheckoutsExperiencesExperienceIdPost(requestParameters: GuestsCheckoutsExperiencesExperienceIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCheckoutResponse> {
        const response = await this.guestsCheckoutsExperiencesExperienceIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲストユーザーとして商品の決済を実行し、注文を作成します。
     * ゲスト商品決済
     */
    async guestsCheckoutsProductsPostRaw(requestParameters: GuestsCheckoutsProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCheckoutResponse>> {
        if (requestParameters['requestGuestCheckoutProductRequest'] == null) {
            throw new runtime.RequiredError(
                'requestGuestCheckoutProductRequest',
                'Required parameter "requestGuestCheckoutProductRequest" was null or undefined when calling guestsCheckoutsProductsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/guests/checkouts/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestGuestCheckoutProductRequestToJSON(requestParameters['requestGuestCheckoutProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * ゲストユーザーとして商品の決済を実行し、注文を作成します。
     * ゲスト商品決済
     */
    async guestsCheckoutsProductsPost(requestParameters: GuestsCheckoutsProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCheckoutResponse> {
        const response = await this.guestsCheckoutsProductsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲストユーザーの決済トランザクション状態を取得します。
     * ゲスト決済状態取得
     */
    async guestsCheckoutsTransactionIdGetRaw(requestParameters: GuestsCheckoutsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCheckoutStateResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling guestsCheckoutsTransactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/guests/checkouts/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCheckoutStateResponseFromJSON(jsonValue));
    }

    /**
     * ゲストユーザーの決済トランザクション状態を取得します。
     * ゲスト決済状態取得
     */
    async guestsCheckoutsTransactionIdGet(requestParameters: GuestsCheckoutsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCheckoutStateResponse> {
        const response = await this.guestsCheckoutsTransactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
