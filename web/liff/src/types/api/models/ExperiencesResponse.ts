/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Experience } from './Experience';
import {
    ExperienceFromJSON,
    ExperienceFromJSONTyped,
    ExperienceToJSON,
} from './Experience';
import type { ExperienceType } from './ExperienceType';
import {
    ExperienceTypeFromJSON,
    ExperienceTypeFromJSONTyped,
    ExperienceTypeToJSON,
} from './ExperienceType';
import type { Producer } from './Producer';
import {
    ProducerFromJSON,
    ProducerFromJSONTyped,
    ProducerToJSON,
} from './Producer';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
} from './Coordinator';

/**
 * 
 * @export
 * @interface ExperiencesResponse
 */
export interface ExperiencesResponse {
    /**
     * 体験一覧
     * @type {Array<Experience>}
     * @memberof ExperiencesResponse
     */
    experiences: Array<Experience>;
    /**
     * コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof ExperiencesResponse
     */
    coordinators: Array<Coordinator>;
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof ExperiencesResponse
     */
    producers: Array<Producer>;
    /**
     * 体験種別一覧
     * @type {Array<ExperienceType>}
     * @memberof ExperiencesResponse
     */
    experienceTypes: Array<ExperienceType>;
    /**
     * 合計数
     * @type {number}
     * @memberof ExperiencesResponse
     */
    total: number;
}

/**
 * Check if a given object implements the ExperiencesResponse interface.
 */
export function instanceOfExperiencesResponse(value: object): value is ExperiencesResponse {
    if (!('experiences' in value) || value['experiences'] === undefined) return false;
    if (!('coordinators' in value) || value['coordinators'] === undefined) return false;
    if (!('producers' in value) || value['producers'] === undefined) return false;
    if (!('experienceTypes' in value) || value['experienceTypes'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    return true;
}

export function ExperiencesResponseFromJSON(json: any): ExperiencesResponse {
    return ExperiencesResponseFromJSONTyped(json, false);
}

export function ExperiencesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperiencesResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'experiences': ((json['experiences'] as Array<any>).map(ExperienceFromJSON)),
        'coordinators': ((json['coordinators'] as Array<any>).map(CoordinatorFromJSON)),
        'producers': ((json['producers'] as Array<any>).map(ProducerFromJSON)),
        'experienceTypes': ((json['experienceTypes'] as Array<any>).map(ExperienceTypeFromJSON)),
        'total': json['total'],
    };
}

export function ExperiencesResponseToJSON(value?: ExperiencesResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'experiences': ((value['experiences'] as Array<any>).map(ExperienceToJSON)),
        'coordinators': ((value['coordinators'] as Array<any>).map(CoordinatorToJSON)),
        'producers': ((value['producers'] as Array<any>).map(ProducerToJSON)),
        'experienceTypes': ((value['experienceTypes'] as Array<any>).map(ExperienceTypeToJSON)),
        'total': value['total'],
    };
}

