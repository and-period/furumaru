/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthUserResponse,
  CreateAuthUserRequest,
  CreateAuthUserResponse,
  CreateAuthUserWithOAuthRequest,
  ErrorResponse,
  GetUploadUrlRequest,
  UpdateAuthUserAccountIdRequest,
  UpdateAuthUserEmailRequest,
  UpdateAuthUserThumbnailRequest,
  UpdateAuthUserUsernameRequest,
  UploadUrlResponse,
  VerifyAuthUserEmailRequest,
  VerifyAuthUserRequest,
} from '../models/index';
import {
    AuthUserResponseFromJSON,
    AuthUserResponseToJSON,
    CreateAuthUserRequestFromJSON,
    CreateAuthUserRequestToJSON,
    CreateAuthUserResponseFromJSON,
    CreateAuthUserResponseToJSON,
    CreateAuthUserWithOAuthRequestFromJSON,
    CreateAuthUserWithOAuthRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetUploadUrlRequestFromJSON,
    GetUploadUrlRequestToJSON,
    UpdateAuthUserAccountIdRequestFromJSON,
    UpdateAuthUserAccountIdRequestToJSON,
    UpdateAuthUserEmailRequestFromJSON,
    UpdateAuthUserEmailRequestToJSON,
    UpdateAuthUserThumbnailRequestFromJSON,
    UpdateAuthUserThumbnailRequestToJSON,
    UpdateAuthUserUsernameRequestFromJSON,
    UpdateAuthUserUsernameRequestToJSON,
    UploadUrlResponseFromJSON,
    UploadUrlResponseToJSON,
    VerifyAuthUserEmailRequestFromJSON,
    VerifyAuthUserEmailRequestToJSON,
    VerifyAuthUserRequestFromJSON,
    VerifyAuthUserRequestToJSON,
} from '../models/index';

export interface V1CreateAuthUserRequest {
    body: CreateAuthUserRequest;
}

export interface V1CreateAuthUserWithOAuthRequest {
    body: CreateAuthUserWithOAuthRequest;
}

export interface V1GetUserThumbnailUploadUrlRequest {
    body: GetUploadUrlRequest;
}

export interface V1UpdateAuthUserAccountIdRequest {
    body: UpdateAuthUserAccountIdRequest;
}

export interface V1UpdateAuthUserEmailRequest {
    body: UpdateAuthUserEmailRequest;
}

export interface V1UpdateAuthUserThumbnailRequest {
    body: UpdateAuthUserThumbnailRequest;
}

export interface V1UpdateAuthUserUsernameRequest {
    body: UpdateAuthUserUsernameRequest;
}

export interface V1VerifyAuthUserRequest {
    body: VerifyAuthUserRequest;
}

export interface V1VerifyAuthUserEmailRequest {
    body: VerifyAuthUserEmailRequest;
}

/**
 * 
 */
export class AuthUserApi extends runtime.BaseAPI {

    /**
     * 購入者登録 (メール/SMS認証)
     */
    async v1CreateAuthUserRaw(requestParameters: V1CreateAuthUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAuthUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateAuthUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/users/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * 購入者登録 (メール/SMS認証)
     */
    async v1CreateAuthUser(requestParameters: V1CreateAuthUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAuthUserResponse> {
        const response = await this.v1CreateAuthUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 購入者登録 (SNS認証)
     */
    async v1CreateAuthUserWithOAuthRaw(requestParameters: V1CreateAuthUserWithOAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateAuthUserWithOAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/oauth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserResponseFromJSON(jsonValue));
    }

    /**
     * 購入者登録 (SNS認証)
     */
    async v1CreateAuthUserWithOAuth(requestParameters: V1CreateAuthUserWithOAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUserResponse> {
        const response = await this.v1CreateAuthUserWithOAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 購入者退会
     */
    async v1DeleteAuthUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 購入者退会
     */
    async v1DeleteAuthUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1DeleteAuthUserRaw(initOverrides);
    }

    /**
     * 購入者情報取得
     */
    async v1GetAuthUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserResponseFromJSON(jsonValue));
    }

    /**
     * 購入者情報取得
     */
    async v1GetAuthUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUserResponse> {
        const response = await this.v1GetAuthUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * 購入者サムネイルアップロード用URL取得
     */
    async v1GetUserThumbnailUploadUrlRaw(requestParameters: V1GetUserThumbnailUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadUrlResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1GetUserThumbnailUploadUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/upload/users/thumbnail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadUrlResponseFromJSON(jsonValue));
    }

    /**
     * 購入者サムネイルアップロード用URL取得
     */
    async v1GetUserThumbnailUploadUrl(requestParameters: V1GetUserThumbnailUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadUrlResponse> {
        const response = await this.v1GetUserThumbnailUploadUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーID(検索用)更新
     */
    async v1UpdateAuthUserAccountIdRaw(requestParameters: V1UpdateAuthUserAccountIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAuthUserAccountId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/account-id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーID(検索用)更新
     */
    async v1UpdateAuthUserAccountId(requestParameters: V1UpdateAuthUserAccountIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1UpdateAuthUserAccountIdRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新
     */
    async v1UpdateAuthUserEmailRaw(requestParameters: V1UpdateAuthUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAuthUserEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/email`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新
     */
    async v1UpdateAuthUserEmail(requestParameters: V1UpdateAuthUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1UpdateAuthUserEmailRaw(requestParameters, initOverrides);
    }

    /**
     * サムネイル更新
     */
    async v1UpdateAuthUserThumbnailRaw(requestParameters: V1UpdateAuthUserThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAuthUserThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/thumbnail`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * サムネイル更新
     */
    async v1UpdateAuthUserThumbnail(requestParameters: V1UpdateAuthUserThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1UpdateAuthUserThumbnailRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー名(表示名)更新
     */
    async v1UpdateAuthUserUsernameRaw(requestParameters: V1UpdateAuthUserUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAuthUserUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/username`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー名(表示名)更新
     */
    async v1UpdateAuthUserUsername(requestParameters: V1UpdateAuthUserUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1UpdateAuthUserUsernameRaw(requestParameters, initOverrides);
    }

    /**
     * 購入者登録 - コード検証 (メール/SMS認証)
     */
    async v1VerifyAuthUserRaw(requestParameters: V1VerifyAuthUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1VerifyAuthUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/users/me/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 購入者登録 - コード検証 (メール/SMS認証)
     */
    async v1VerifyAuthUser(requestParameters: V1VerifyAuthUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1VerifyAuthUserRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新 - コード検証
     */
    async v1VerifyAuthUserEmailRaw(requestParameters: V1VerifyAuthUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1VerifyAuthUserEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/email/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新 - コード検証
     */
    async v1VerifyAuthUserEmail(requestParameters: V1VerifyAuthUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1VerifyAuthUserEmailRaw(requestParameters, initOverrides);
    }

}
