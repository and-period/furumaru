/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressResponse,
  AddressesResponse,
  ErrorResponse,
  PostalCodeResponse,
} from '../models/index';
import {
    AddressResponseFromJSON,
    AddressResponseToJSON,
    AddressesResponseFromJSON,
    AddressesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostalCodeResponseFromJSON,
    PostalCodeResponseToJSON,
} from '../models/index';

export interface V1GetAddressRequest {
    addressId: string;
}

export interface V1ListAddressesRequest {
    limit?: number;
    offset?: number;
}

export interface V1SearchPostalCodeRequest {
    postalCode: string;
}

/**
 * 
 */
export class AddressApi extends runtime.BaseAPI {

    /**
     * アドレス取得
     */
    async v1GetAddressRaw(requestParameters: V1GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressResponse>> {
        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling v1GetAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressResponseFromJSON(jsonValue));
    }

    /**
     * アドレス取得
     */
    async v1GetAddress(requestParameters: V1GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressResponse> {
        const response = await this.v1GetAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アドレス一覧取得
     */
    async v1ListAddressesRaw(requestParameters: V1ListAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesResponseFromJSON(jsonValue));
    }

    /**
     * アドレス一覧取得
     */
    async v1ListAddresses(requestParameters: V1ListAddressesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesResponse> {
        const response = await this.v1ListAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 郵便番号情報検索
     */
    async v1SearchPostalCodeRaw(requestParameters: V1SearchPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostalCodeResponse>> {
        if (requestParameters.postalCode === null || requestParameters.postalCode === undefined) {
            throw new runtime.RequiredError('postalCode','Required parameter requestParameters.postalCode was null or undefined when calling v1SearchPostalCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/postal-codes/{postalCode}`.replace(`{${"postalCode"}}`, encodeURIComponent(String(requestParameters.postalCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostalCodeResponseFromJSON(jsonValue));
    }

    /**
     * 郵便番号情報検索
     */
    async v1SearchPostalCode(requestParameters: V1SearchPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostalCodeResponse> {
        const response = await this.v1SearchPostalCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
