/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExperienceResponse,
  ExperiencesResponse,
  Prefecture,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperienceResponseFromJSON,
    ExperienceResponseToJSON,
    ExperiencesResponseFromJSON,
    ExperiencesResponseToJSON,
    PrefectureFromJSON,
    PrefectureToJSON,
} from '../models/index';

export interface V1GetExperienceRequest {
    experienceId: string;
}

export interface V1ListExperiencesRequest {
    limit?: number;
    offset?: number;
    coordinatorId?: string;
    prefecture?: Prefecture;
}

/**
 * 
 */
export class ExperienceApi extends runtime.BaseAPI {

    /**
     * 体験取得
     */
    async v1GetExperienceRaw(requestParameters: V1GetExperienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1GetExperience().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences/{experienceId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceResponseFromJSON(jsonValue));
    }

    /**
     * 体験取得
     */
    async v1GetExperience(requestParameters: V1GetExperienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceResponse> {
        const response = await this.v1GetExperienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験一覧取得
     */
    async v1ListExperiencesRaw(requestParameters: V1ListExperiencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperiencesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['coordinatorId'] != null) {
            queryParameters['coordinatorId'] = requestParameters['coordinatorId'];
        }

        if (requestParameters['prefecture'] != null) {
            queryParameters['prefecture'] = requestParameters['prefecture'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperiencesResponseFromJSON(jsonValue));
    }

    /**
     * 体験一覧取得
     */
    async v1ListExperiences(requestParameters: V1ListExperiencesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperiencesResponse> {
        const response = await this.v1ListExperiencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
