/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExperienceReviewRequest,
  ErrorResponse,
  ExperienceResponse,
  ExperienceReviewResponse,
  ExperienceReviewsResponse,
  ExperiencesResponse,
  Prefecture,
  UpdateExperienceReviewRequest,
  UpsertExperienceReviewReactionRequest,
  UserExperienceReviewsResponse,
} from '../models/index';
import {
    CreateExperienceReviewRequestFromJSON,
    CreateExperienceReviewRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperienceResponseFromJSON,
    ExperienceResponseToJSON,
    ExperienceReviewResponseFromJSON,
    ExperienceReviewResponseToJSON,
    ExperienceReviewsResponseFromJSON,
    ExperienceReviewsResponseToJSON,
    ExperiencesResponseFromJSON,
    ExperiencesResponseToJSON,
    PrefectureFromJSON,
    PrefectureToJSON,
    UpdateExperienceReviewRequestFromJSON,
    UpdateExperienceReviewRequestToJSON,
    UpsertExperienceReviewReactionRequestFromJSON,
    UpsertExperienceReviewReactionRequestToJSON,
    UserExperienceReviewsResponseFromJSON,
    UserExperienceReviewsResponseToJSON,
} from '../models/index';

export interface V1CreateExperienceReviewRequest {
    experienceId: string;
    body: CreateExperienceReviewRequest;
}

export interface V1DeleteExperienceReviewRequest {
    experienceId: string;
    reviewId: string;
}

export interface V1DeleteExperienceReviewReactionRequest {
    experienceId: string;
    reviewId: string;
}

export interface V1GetExperienceRequest {
    experienceId: string;
}

export interface V1GetExperienceReviewRequest {
    experienceId: string;
    reviewId: string;
}

export interface V1ListExperienceReviewsRequest {
    experienceId: string;
    userId?: string;
    limit?: number;
    nextToken?: string;
    rates?: string;
}

export interface V1ListExperiencesRequest {
    limit?: number;
    offset?: number;
    coordinatorId?: string;
    producerId?: string;
    prefecture?: Prefecture;
}

export interface V1ListExperiencesByGeolocationRequest {
    longitude: number;
    latitude: number;
    radius?: number;
    coordinatorId?: string;
    producerId?: string;
}

export interface V1UpdateExperienceReviewRequest {
    experienceId: string;
    reviewId: string;
    body: UpdateExperienceReviewRequest;
}

export interface V1UpsertExperienceReviewReactionRequest {
    experienceId: string;
    reviewId: string;
    body: UpsertExperienceReviewReactionRequest;
}

export interface V1UserListExperienceReviewsRequest {
    experienceId: string;
}

/**
 * 
 */
export class ExperienceApi extends runtime.BaseAPI {

    /**
     * 体験レビュー投稿
     */
    async v1CreateExperienceReviewRaw(requestParameters: V1CreateExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1CreateExperienceReview().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling v1CreateExperienceReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビュー投稿
     */
    async v1CreateExperienceReview(requestParameters: V1CreateExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CreateExperienceReviewRaw(requestParameters, initOverrides);
    }

    /**
     * 体験レビュー削除
     */
    async v1DeleteExperienceReviewRaw(requestParameters: V1DeleteExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1DeleteExperienceReview().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling v1DeleteExperienceReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews/{reviewId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビュー削除
     */
    async v1DeleteExperienceReview(requestParameters: V1DeleteExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1DeleteExperienceReviewRaw(requestParameters, initOverrides);
    }

    /**
     * 体験レビューへのリアクション削除
     */
    async v1DeleteExperienceReviewReactionRaw(requestParameters: V1DeleteExperienceReviewReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1DeleteExperienceReviewReaction().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling v1DeleteExperienceReviewReaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews/{reviewId}/reactions`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビューへのリアクション削除
     */
    async v1DeleteExperienceReviewReaction(requestParameters: V1DeleteExperienceReviewReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1DeleteExperienceReviewReactionRaw(requestParameters, initOverrides);
    }

    /**
     * 体験取得
     */
    async v1GetExperienceRaw(requestParameters: V1GetExperienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1GetExperience().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences/{experienceId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceResponseFromJSON(jsonValue));
    }

    /**
     * 体験取得
     */
    async v1GetExperience(requestParameters: V1GetExperienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceResponse> {
        const response = await this.v1GetExperienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験レビュー取得
     */
    async v1GetExperienceReviewRaw(requestParameters: V1GetExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceReviewResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1GetExperienceReview().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling v1GetExperienceReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews/{reviewId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceReviewResponseFromJSON(jsonValue));
    }

    /**
     * 体験レビュー取得
     */
    async v1GetExperienceReview(requestParameters: V1GetExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceReviewResponse> {
        const response = await this.v1GetExperienceReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験レビュー一覧取得
     */
    async v1ListExperienceReviewsRaw(requestParameters: V1ListExperienceReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceReviewsResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1ListExperienceReviews().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['nextToken'] != null) {
            queryParameters['nextToken'] = requestParameters['nextToken'];
        }

        if (requestParameters['rates'] != null) {
            queryParameters['rates'] = requestParameters['rates'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceReviewsResponseFromJSON(jsonValue));
    }

    /**
     * 体験レビュー一覧取得
     */
    async v1ListExperienceReviews(requestParameters: V1ListExperienceReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceReviewsResponse> {
        const response = await this.v1ListExperienceReviewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験一覧取得
     */
    async v1ListExperiencesRaw(requestParameters: V1ListExperiencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperiencesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['coordinatorId'] != null) {
            queryParameters['coordinatorId'] = requestParameters['coordinatorId'];
        }

        if (requestParameters['producerId'] != null) {
            queryParameters['producerId'] = requestParameters['producerId'];
        }

        if (requestParameters['prefecture'] != null) {
            queryParameters['prefecture'] = requestParameters['prefecture'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperiencesResponseFromJSON(jsonValue));
    }

    /**
     * 体験一覧取得
     */
    async v1ListExperiences(requestParameters: V1ListExperiencesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperiencesResponse> {
        const response = await this.v1ListExperiencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験一覧取得
     */
    async v1ListExperiencesByGeolocationRaw(requestParameters: V1ListExperiencesByGeolocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperiencesResponse>> {
        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling v1ListExperiencesByGeolocation().'
            );
        }

        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling v1ListExperiencesByGeolocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['radius'] != null) {
            queryParameters['radius'] = requestParameters['radius'];
        }

        if (requestParameters['coordinatorId'] != null) {
            queryParameters['coordinatorId'] = requestParameters['coordinatorId'];
        }

        if (requestParameters['producerId'] != null) {
            queryParameters['producerId'] = requestParameters['producerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/experiences/geolocation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperiencesResponseFromJSON(jsonValue));
    }

    /**
     * 体験一覧取得
     */
    async v1ListExperiencesByGeolocation(requestParameters: V1ListExperiencesByGeolocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperiencesResponse> {
        const response = await this.v1ListExperiencesByGeolocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験レビュー更新
     */
    async v1UpdateExperienceReviewRaw(requestParameters: V1UpdateExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1UpdateExperienceReview().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling v1UpdateExperienceReview().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling v1UpdateExperienceReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews/{reviewId}`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビュー更新
     */
    async v1UpdateExperienceReview(requestParameters: V1UpdateExperienceReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1UpdateExperienceReviewRaw(requestParameters, initOverrides);
    }

    /**
     * 体験レビューへのリアクション登録・更新
     */
    async v1UpsertExperienceReviewReactionRaw(requestParameters: V1UpsertExperienceReviewReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1UpsertExperienceReviewReaction().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling v1UpsertExperienceReviewReaction().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling v1UpsertExperienceReviewReaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/experiences/{experienceId}/reviews/{reviewId}/reactions`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験レビューへのリアクション登録・更新
     */
    async v1UpsertExperienceReviewReaction(requestParameters: V1UpsertExperienceReviewReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1UpsertExperienceReviewReactionRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの体験レビュー情報
     */
    async v1UserListExperienceReviewsRaw(requestParameters: V1UserListExperienceReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserExperienceReviewsResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1UserListExperienceReviews().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me/experiences/{experienceId}/reviews`.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserExperienceReviewsResponseFromJSON(jsonValue));
    }

    /**
     * ユーザーの体験レビュー情報
     */
    async v1UserListExperienceReviews(requestParameters: V1UserListExperienceReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserExperienceReviewsResponse> {
        const response = await this.v1UserListExperienceReviewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
