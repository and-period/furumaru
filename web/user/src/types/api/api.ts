/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 購入者ID
     * @type {string}
     * @memberof AuthResponse
     */
    'userId': string;
    /**
     * アクセストークン
     * @type {string}
     * @memberof AuthResponse
     */
    'accessToken': string;
    /**
     * 更新トークン
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken': string;
    /**
     * 有効期限
     * @type {number}
     * @memberof AuthResponse
     */
    'expiresIn': number;
    /**
     * トークン種別
     * @type {string}
     * @memberof AuthResponse
     */
    'tokenType': string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateUserRequest
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof CreateUserRequest
     */
    'phoneNumber': string;
    /**
     * パスワード (8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
     * @type {string}
     * @memberof CreateUserRequest
     */
    'password': string;
    /**
     * パスワード (確認用)
     * @type {string}
     * @memberof CreateUserRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * 購入者ID
     * @type {string}
     * @memberof CreateUserResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * ステータスコード
     * @type {number}
     * @memberof ErrorResponse
     */
    'status': number;
    /**
     * エラー概要
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * エラー詳細
     * @type {string}
     * @memberof ErrorResponse
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface ForgotUserPasswordRequest
 */
export interface ForgotUserPasswordRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof ForgotUserPasswordRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface InitializeUserRequest
 */
export interface InitializeUserRequest {
    /**
     * ユーザー名(表示用)
     * @type {string}
     * @memberof InitializeUserRequest
     */
    'username': string;
    /**
     * ユーザーID(検索用)
     * @type {string}
     * @memberof InitializeUserRequest
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
    /**
     * 更新トークン
     * @type {string}
     * @memberof RefreshAuthTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface ResetUserPasswordRequest
 */
export interface ResetUserPasswordRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResetUserPasswordRequest
     */
    'email': string;
    /**
     * 検証コード
     * @type {string}
     * @memberof ResetUserPasswordRequest
     */
    'verifyCode': string;
    /**
     * パスワード (8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
     * @type {string}
     * @memberof ResetUserPasswordRequest
     */
    'password': string;
    /**
     * パスワード (確認用)
     * @type {string}
     * @memberof ResetUserPasswordRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * ユーザー名 (メールアドレス,電話番号)
     * @type {string}
     * @memberof SignInRequest
     */
    'username': string;
    /**
     * パスワード
     * @type {string}
     * @memberof SignInRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UpdateUserEmailRequest
 */
export interface UpdateUserEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateUserEmailRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateUserPasswordRequest
 */
export interface UpdateUserPasswordRequest {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof UpdateUserPasswordRequest
     */
    'oldPassword': string;
    /**
     * 新しいパスワード (8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
     * @type {string}
     * @memberof UpdateUserPasswordRequest
     */
    'newPassword': string;
    /**
     * パスワード (確認用)
     * @type {string}
     * @memberof UpdateUserPasswordRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface UserMeResponse
 */
export interface UserMeResponse {
    /**
     * 購入者ID
     * @type {string}
     * @memberof UserMeResponse
     */
    'id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof UserMeResponse
     */
    'email': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof UserMeResponse
     */
    'phoneNumber': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof UserMeResponse
     */
    'thumbnailUrl': string;
}
/**
 * 
 * @export
 * @interface V1CreateUserResponse
 */
export interface V1CreateUserResponse {
    /**
     * 購入者ID
     * @type {string}
     * @memberof V1CreateUserResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface VerifyUserEmailRequest
 */
export interface VerifyUserEmailRequest {
    /**
     * 認証コード
     * @type {string}
     * @memberof VerifyUserEmailRequest
     */
    'verifyCode': string;
}
/**
 * 
 * @export
 * @interface VerifyUserRequest
 */
export interface VerifyUserRequest {
    /**
     * ユーザーID
     * @type {string}
     * @memberof VerifyUserRequest
     */
    'id': string;
    /**
     * 認証コード
     * @type {string}
     * @memberof VerifyUserRequest
     */
    'verifyCode': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RefreshAuthToken: async (body: RefreshAuthTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1RefreshAuthToken', 'body', body)
            const localVarPath = `/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignIn: async (body: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1SignIn', 'body', body)
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignOut: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RefreshAuthToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignIn(body: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignOut(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1GetAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1RefreshAuthToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1SignIn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignOut(options?: any): AxiosPromise<object> {
            return localVarFp.v1SignOut(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1GetAuth(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1GetAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1RefreshAuthToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary サインイン
     * @param {SignInRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1SignIn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1SignOut(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1SignOut(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 購入者登録 (メール/SMS認証)
         * @param {CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateUser: async (body: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateUser', 'body', body)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 購入者登録 (SNS認証)
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateUserWithOAuth: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateUserWithOAuth', 'body', body)
            const localVarPath = `/v1/users/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 購入者退会
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードリセット
         * @param {ForgotUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ForgotUserPassword: async (body: ForgotUserPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ForgotUserPassword', 'body', body)
            const localVarPath = `/v1/users/me/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 購入者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetUserMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 初回登録(表示名, 検索名)
         * @param {InitializeUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1InitializeUser: async (body: InitializeUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1InitializeUser', 'body', body)
            const localVarPath = `/v1/users/me/initialized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードリセット - コード検証
         * @param {ResetUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetUserPassword: async (body: ResetUserPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ResetUserPassword', 'body', body)
            const localVarPath = `/v1/users/me/forgot-password/me/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateUserEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateUserEmail: async (body: UpdateUserEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateUserEmail', 'body', body)
            const localVarPath = `/v1/users/me/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateUserPassword: async (body: UpdateUserPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateUserPassword', 'body', body)
            const localVarPath = `/v1/users/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 購入者登録 - コード検証 (メール/SMS認証)
         * @param {VerifyUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyUser: async (body: VerifyUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1VerifyUser', 'body', body)
            const localVarPath = `/v1/users/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyUserEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyUserEmail: async (body: VerifyUserEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1VerifyUserEmail', 'body', body)
            const localVarPath = `/v1/users/me/email/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 購入者登録 (メール/SMS認証)
         * @param {CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateUser(body: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 購入者登録 (SNS認証)
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateUserWithOAuth(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateUserWithOAuth(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 購入者退会
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードリセット
         * @param {ForgotUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ForgotUserPassword(body: ForgotUserPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ForgotUserPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 購入者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetUserMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetUserMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 初回登録(表示名, 検索名)
         * @param {InitializeUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1InitializeUser(body: InitializeUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1InitializeUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードリセット - コード検証
         * @param {ResetUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResetUserPassword(body: ResetUserPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResetUserPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateUserEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateUserEmail(body: UpdateUserEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateUserEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateUserPassword(body: UpdateUserPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateUserPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 購入者登録 - コード検証 (メール/SMS認証)
         * @param {VerifyUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VerifyUser(body: VerifyUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerifyUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyUserEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VerifyUserEmail(body: VerifyUserEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerifyUserEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary 購入者登録 (メール/SMS認証)
         * @param {CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateUser(body: CreateUserRequest, options?: any): AxiosPromise<UserMeResponse> {
            return localVarFp.v1CreateUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 購入者登録 (SNS認証)
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateUserWithOAuth(body: object, options?: any): AxiosPromise<UserMeResponse> {
            return localVarFp.v1CreateUserWithOAuth(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 購入者退会
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteUser(options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードリセット
         * @param {ForgotUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ForgotUserPassword(body: ForgotUserPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1ForgotUserPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 購入者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetUserMe(options?: any): AxiosPromise<UserMeResponse> {
            return localVarFp.v1GetUserMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 初回登録(表示名, 検索名)
         * @param {InitializeUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1InitializeUser(body: InitializeUserRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1InitializeUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードリセット - コード検証
         * @param {ResetUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetUserPassword(body: ResetUserPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1ResetUserPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateUserEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateUserEmail(body: UpdateUserEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateUserEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateUserPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateUserPassword(body: UpdateUserPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateUserPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 購入者登録 - コード検証 (メール/SMS認証)
         * @param {VerifyUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyUser(body: VerifyUserRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1VerifyUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyUserEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyUserEmail(body: VerifyUserEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1VerifyUserEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 購入者登録 (メール/SMS認証)
     * @param {CreateUserRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1CreateUser(body: CreateUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1CreateUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 購入者登録 (SNS認証)
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1CreateUserWithOAuth(body: object, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1CreateUserWithOAuth(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 購入者退会
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1DeleteUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1DeleteUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードリセット
     * @param {ForgotUserPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1ForgotUserPassword(body: ForgotUserPasswordRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1ForgotUserPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 購入者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1GetUserMe(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1GetUserMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 初回登録(表示名, 検索名)
     * @param {InitializeUserRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1InitializeUser(body: InitializeUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1InitializeUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードリセット - コード検証
     * @param {ResetUserPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1ResetUserPassword(body: ResetUserPasswordRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1ResetUserPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレス更新
     * @param {UpdateUserEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1UpdateUserEmail(body: UpdateUserEmailRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1UpdateUserEmail(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワード更新
     * @param {UpdateUserPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1UpdateUserPassword(body: UpdateUserPasswordRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1UpdateUserPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 購入者登録 - コード検証 (メール/SMS認証)
     * @param {VerifyUserRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1VerifyUser(body: VerifyUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1VerifyUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyUserEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1VerifyUserEmail(body: VerifyUserEmailRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1VerifyUserEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}


