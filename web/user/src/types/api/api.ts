/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   * 購入者ID
   * @type {string}
   * @memberof AuthResponse
   */
  userId: string
  /**
   * アクセストークン
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken: string
  /**
   * 更新トークン
   * @type {string}
   * @memberof AuthResponse
   */
  refreshToken: string
  /**
   * 有効期限
   * @type {number}
   * @memberof AuthResponse
   */
  expiresIn: number
  /**
   * トークン種別
   * @type {string}
   * @memberof AuthResponse
   */
  tokenType: string
}
/**
 *
 * @export
 * @interface AuthUserResponse
 */
export interface AuthUserResponse {
  /**
   * 購入者ID
   * @type {string}
   * @memberof AuthUserResponse
   */
  id: string
  /**
   * 表示名
   * @type {string}
   * @memberof AuthUserResponse
   */
  username?: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof AuthUserResponse
   */
  thumbnailUrl: string
}
/**
 *
 * @export
 * @interface CreateAuthRequest
 */
export interface CreateAuthRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof CreateAuthRequest
   */
  email: string
  /**
   * 電話番号(国際番号 + 電話番号)
   * @type {string}
   * @memberof CreateAuthRequest
   */
  phoneNumber: string
  /**
   * パスワード(8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
   * @type {string}
   * @memberof CreateAuthRequest
   */
  password: string
  /**
   * パスワード(確認用)
   * @type {string}
   * @memberof CreateAuthRequest
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface CreateAuthResponse
 */
export interface CreateAuthResponse {
  /**
   * 購入者ID
   * @type {string}
   * @memberof CreateAuthResponse
   */
  id: string
}
/**
 *
 * @export
 * @interface CreateContactRequest
 */
export interface CreateContactRequest {
  /**
   * 件名(64文字まで)
   * @type {string}
   * @memberof CreateContactRequest
   */
  title: string
  /**
   * 内容(2000文字まで)
   * @type {string}
   * @memberof CreateContactRequest
   */
  content: string
  /**
   * 氏名(64文字)
   * @type {string}
   * @memberof CreateContactRequest
   */
  username: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof CreateContactRequest
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof CreateContactRequest
   */
  phoneNumber: string
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * ステータスコード
   * @type {number}
   * @memberof ErrorResponse
   */
  status: number
  /**
   * エラー概要
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string
  /**
   * エラー詳細
   * @type {string}
   * @memberof ErrorResponse
   */
  details: string
}
/**
 *
 * @export
 * @interface ForgotAuthPasswordRequest
 */
export interface ForgotAuthPasswordRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof ForgotAuthPasswordRequest
   */
  email: string
}
/**
 *
 * @export
 * @interface InitializeAuthRequest
 */
export interface InitializeAuthRequest {
  /**
   * ユーザー名(表示用)(32文字まで)
   * @type {string}
   * @memberof InitializeAuthRequest
   */
  username: string
  /**
   * ユーザーID(検索用)(32文字まで)
   * @type {string}
   * @memberof InitializeAuthRequest
   */
  accountId: string
}
/**
 *
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
  /**
   * 更新トークン
   * @type {string}
   * @memberof RefreshAuthTokenRequest
   */
  refreshToken: string
}
/**
 *
 * @export
 * @interface ResetAuthPasswordRequest
 */
export interface ResetAuthPasswordRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof ResetAuthPasswordRequest
   */
  email: string
  /**
   * 検証コード
   * @type {string}
   * @memberof ResetAuthPasswordRequest
   */
  verifyCode: string
  /**
   * パスワード(8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
   * @type {string}
   * @memberof ResetAuthPasswordRequest
   */
  password: string
  /**
   * パスワード(確認用)
   * @type {string}
   * @memberof ResetAuthPasswordRequest
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
  /**
   * ユーザー名(メールアドレス,電話番号)
   * @type {string}
   * @memberof SignInRequest
   */
  username: string
  /**
   * パスワード
   * @type {string}
   * @memberof SignInRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface UpdateAuthEmailRequest
 */
export interface UpdateAuthEmailRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof UpdateAuthEmailRequest
   */
  email: string
}
/**
 *
 * @export
 * @interface UpdateAuthPasswordRequest
 */
export interface UpdateAuthPasswordRequest {
  /**
   * 現在のパスワード
   * @type {string}
   * @memberof UpdateAuthPasswordRequest
   */
  oldPassword: string
  /**
   * 新しいパスワード(8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
   * @type {string}
   * @memberof UpdateAuthPasswordRequest
   */
  newPassword: string
  /**
   * パスワード(確認用)
   * @type {string}
   * @memberof UpdateAuthPasswordRequest
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface V1CreateAuthResponse
 */
export interface V1CreateAuthResponse {
  /**
   * 購入者ID
   * @type {string}
   * @memberof V1CreateAuthResponse
   */
  id: string
}
/**
 *
 * @export
 * @interface VerifyAuthEmailRequest
 */
export interface VerifyAuthEmailRequest {
  /**
   * 認証コード
   * @type {string}
   * @memberof VerifyAuthEmailRequest
   */
  verifyCode: string
}
/**
 *
 * @export
 * @interface VerifyAuthRequest
 */
export interface VerifyAuthRequest {
  /**
   * ユーザーID
   * @type {string}
   * @memberof VerifyAuthRequest
   */
  id: string
  /**
   * 認証コード
   * @type {string}
   * @memberof VerifyAuthRequest
   */
  verifyCode: string
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 購入者登録 (メール/SMS認証)
     * @param {CreateAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAuth: async (
      body: CreateAuthRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateAuth', 'body', body)
      const localVarPath = `/v1/auth/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 購入者登録 (SNS認証)
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAuthWithOAuth: async (
      body: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateAuthWithOAuth', 'body', body)
      const localVarPath = `/v1/auth/user/oauth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 購入者退会
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DeleteAuth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary パスワードリセット
     * @param {ForgotAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ForgotAuthPassword: async (
      body: ForgotAuthPasswordRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1ForgotAuthPassword', 'body', body)
      const localVarPath = `/v1/auth/forgot-password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 購入者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuthUser: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 初回登録(表示名, 検索名)
     * @param {InitializeAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InitializeAuth: async (
      body: InitializeAuthRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1InitializeAuth', 'body', body)
      const localVarPath = `/v1/auth/initialized`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken: async (
      body: RefreshAuthTokenRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1RefreshAuthToken', 'body', body)
      const localVarPath = `/v1/auth/refresh-token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary パスワードリセット - コード検証
     * @param {ResetAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ResetAuthPassword: async (
      body: ResetAuthPasswordRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1ResetAuthPassword', 'body', body)
      const localVarPath = `/v1/auth/forgot-password/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn: async (
      body: SignInRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1SignIn', 'body', body)
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAuthEmail: async (
      body: UpdateAuthEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateAuthEmail', 'body', body)
      const localVarPath = `/v1/auth/email`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateUserPassword: async (
      body: UpdateAuthPasswordRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateUserPassword', 'body', body)
      const localVarPath = `/v1/auth/password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 購入者登録 - コード検証 (メール/SMS認証)
     * @param {VerifyAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAuth: async (
      body: VerifyAuthRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1VerifyAuth', 'body', body)
      const localVarPath = `/v1/auth/user/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAuthEmail: async (
      body: VerifyAuthEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1VerifyAuthEmail', 'body', body)
      const localVarPath = `/v1/auth/email/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 購入者登録 (メール/SMS認証)
     * @param {CreateAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateAuth(
      body: CreateAuthRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateAuth(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 購入者登録 (SNS認証)
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateAuthWithOAuth(
      body: object,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthUserResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateAuthWithOAuth(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 購入者退会
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1DeleteAuth(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteAuth(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary パスワードリセット
     * @param {ForgotAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ForgotAuthPassword(
      body: ForgotAuthPasswordRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ForgotAuthPassword(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAuth(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 購入者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAuthUser(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuthUser(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 初回登録(表示名, 検索名)
     * @param {InitializeAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1InitializeAuth(
      body: InitializeAuthRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1InitializeAuth(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1RefreshAuthToken(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary パスワードリセット - コード検証
     * @param {ResetAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ResetAuthPassword(
      body: ResetAuthPasswordRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ResetAuthPassword(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignIn(
      body: SignInRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignOut(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateAuthEmail(
      body: UpdateAuthEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateAuthEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateUserPassword(
      body: UpdateAuthPasswordRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateUserPassword(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 購入者登録 - コード検証 (メール/SMS認証)
     * @param {VerifyAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1VerifyAuth(
      body: VerifyAuthRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerifyAuth(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1VerifyAuthEmail(
      body: VerifyAuthEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1VerifyAuthEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary 購入者登録 (メール/SMS認証)
     * @param {CreateAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAuth(
      body: CreateAuthRequest,
      options?: any
    ): AxiosPromise<AuthUserResponse> {
      return localVarFp
        .v1CreateAuth(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 購入者登録 (SNS認証)
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAuthWithOAuth(
      body: object,
      options?: any
    ): AxiosPromise<AuthUserResponse> {
      return localVarFp
        .v1CreateAuthWithOAuth(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 購入者退会
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DeleteAuth(options?: any): AxiosPromise<object> {
      return localVarFp
        .v1DeleteAuth(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary パスワードリセット
     * @param {ForgotAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ForgotAuthPassword(
      body: ForgotAuthPasswordRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1ForgotAuthPassword(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1GetAuth(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 購入者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuthUser(options?: any): AxiosPromise<AuthUserResponse> {
      return localVarFp
        .v1GetAuthUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 初回登録(表示名, 検索名)
     * @param {InitializeAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InitializeAuth(
      body: InitializeAuthRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1InitializeAuth(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: any
    ): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1RefreshAuthToken(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary パスワードリセット - コード検証
     * @param {ResetAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ResetAuthPassword(
      body: ResetAuthPasswordRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1ResetAuthPassword(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1SignIn(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut(options?: any): AxiosPromise<object> {
      return localVarFp
        .v1SignOut(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAuthEmail(
      body: UpdateAuthEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateAuthEmail(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateUserPassword(
      body: UpdateAuthPasswordRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateUserPassword(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 購入者登録 - コード検証 (メール/SMS認証)
     * @param {VerifyAuthRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAuth(body: VerifyAuthRequest, options?: any): AxiosPromise<object> {
      return localVarFp
        .v1VerifyAuth(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAuthEmail(
      body: VerifyAuthEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1VerifyAuthEmail(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary 購入者登録 (メール/SMS認証)
   * @param {CreateAuthRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1CreateAuth(body: CreateAuthRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1CreateAuth(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 購入者登録 (SNS認証)
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1CreateAuthWithOAuth(body: object, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1CreateAuthWithOAuth(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 購入者退会
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1DeleteAuth(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1DeleteAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary パスワードリセット
   * @param {ForgotAuthPasswordRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1ForgotAuthPassword(
    body: ForgotAuthPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1ForgotAuthPassword(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary トークン検証
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1GetAuth(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1GetAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 購入者情報取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1GetAuthUser(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1GetAuthUser(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 初回登録(表示名, 検索名)
   * @param {InitializeAuthRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1InitializeAuth(
    body: InitializeAuthRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1InitializeAuth(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary トークン更新
   * @param {RefreshAuthTokenRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1RefreshAuthToken(
    body: RefreshAuthTokenRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1RefreshAuthToken(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary パスワードリセット - コード検証
   * @param {ResetAuthPasswordRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1ResetAuthPassword(
    body: ResetAuthPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1ResetAuthPassword(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインイン
   * @param {SignInRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignIn(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignOut(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignOut(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新
   * @param {UpdateAuthEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1UpdateAuthEmail(
    body: UpdateAuthEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1UpdateAuthEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary パスワード更新
   * @param {UpdateAuthPasswordRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1UpdateUserPassword(
    body: UpdateAuthPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1UpdateUserPassword(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 購入者登録 - コード検証 (メール/SMS認証)
   * @param {VerifyAuthRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1VerifyAuth(body: VerifyAuthRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1VerifyAuth(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新 - コード検証
   * @param {VerifyAuthEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1VerifyAuthEmail(
    body: VerifyAuthEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1VerifyAuthEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary お問い合わせ作成
     * @param {CreateContactRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateContact: async (
      body: CreateContactRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateContact', 'body', body)
      const localVarPath = `/v1/contacts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary お問い合わせ作成
     * @param {CreateContactRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateContact(
      body: CreateContactRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateContact(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContactApiFp(configuration)
  return {
    /**
     *
     * @summary お問い合わせ作成
     * @param {CreateContactRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateContact(
      body: CreateContactRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .v1CreateContact(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
  /**
   *
   * @summary お問い合わせ作成
   * @param {CreateContactRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactApi
   */
  public v1CreateContact(
    body: CreateContactRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactApiFp(this.configuration)
      .v1CreateContact(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
