/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSpotRequest,
  ErrorResponse,
  SpotResponse,
  SpotsResponse,
  UpdateSpotRequest,
} from '../models/index';
import {
    CreateSpotRequestFromJSON,
    CreateSpotRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SpotResponseFromJSON,
    SpotResponseToJSON,
    SpotsResponseFromJSON,
    SpotsResponseToJSON,
    UpdateSpotRequestFromJSON,
    UpdateSpotRequestToJSON,
} from '../models/index';

export interface SpotsGetRequest {
    latitude: number;
    longitude: number;
    radius?: number;
}

export interface SpotsPostRequest {
    createSpotRequest: CreateSpotRequest;
}

export interface SpotsSpotIdDeleteRequest {
    spotId: string;
}

export interface SpotsSpotIdGetRequest {
    spotId: string;
}

export interface SpotsSpotIdPatchRequest {
    spotId: string;
    updateSpotRequest: UpdateSpotRequest;
}

/**
 * 
 */
export class SpotApi extends runtime.BaseAPI {

    /**
     * 指定された位置情報周辺のスポット一覧を取得します。
     * スポット一覧取得
     */
    async spotsGetRaw(requestParameters: SpotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotsResponse>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling spotsGet().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling spotsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['radius'] != null) {
            queryParameters['radius'] = requestParameters['radius'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotsResponseFromJSON(jsonValue));
    }

    /**
     * 指定された位置情報周辺のスポット一覧を取得します。
     * スポット一覧取得
     */
    async spotsGet(requestParameters: SpotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotsResponse> {
        const response = await this.spotsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいスポットを登録します。
     * スポット登録
     */
    async spotsPostRaw(requestParameters: SpotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotResponse>> {
        if (requestParameters['createSpotRequest'] == null) {
            throw new runtime.RequiredError(
                'createSpotRequest',
                'Required parameter "createSpotRequest" was null or undefined when calling spotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/spots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSpotRequestToJSON(requestParameters['createSpotRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotResponseFromJSON(jsonValue));
    }

    /**
     * 新しいスポットを登録します。
     * スポット登録
     */
    async spotsPost(requestParameters: SpotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotResponse> {
        const response = await this.spotsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたIDのスポットを削除します。
     * スポット削除
     */
    async spotsSpotIdDeleteRaw(requestParameters: SpotsSpotIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling spotsSpotIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/spots/{spotId}`.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定されたIDのスポットを削除します。
     * スポット削除
     */
    async spotsSpotIdDelete(requestParameters: SpotsSpotIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.spotsSpotIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたIDのスポット詳細を取得します。
     * スポット詳細取得
     */
    async spotsSpotIdGetRaw(requestParameters: SpotsSpotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotResponse>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling spotsSpotIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spots/{spotId}`.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたIDのスポット詳細を取得します。
     * スポット詳細取得
     */
    async spotsSpotIdGet(requestParameters: SpotsSpotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotResponse> {
        const response = await this.spotsSpotIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたIDのスポット情報を更新します。
     * スポット更新
     */
    async spotsSpotIdPatchRaw(requestParameters: SpotsSpotIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling spotsSpotIdPatch().'
            );
        }

        if (requestParameters['updateSpotRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSpotRequest',
                'Required parameter "updateSpotRequest" was null or undefined when calling spotsSpotIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/spots/{spotId}`.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSpotRequestToJSON(requestParameters['updateSpotRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定されたIDのスポット情報を更新します。
     * スポット更新
     */
    async spotsSpotIdPatch(requestParameters: SpotsSpotIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.spotsSpotIdPatchRaw(requestParameters, initOverrides);
    }

}
