/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesCreateLiveCommentRequest,
  TypesLiveCommentsResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesCreateLiveCommentRequestFromJSON,
    TypesCreateLiveCommentRequestToJSON,
    TypesLiveCommentsResponseFromJSON,
    TypesLiveCommentsResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface SchedulesScheduleIdCommentsGetRequest {
    scheduleId: string;
    limit?: number;
}

export interface SchedulesScheduleIdCommentsPostRequest {
    scheduleId: string;
    typesCreateLiveCommentRequest: TypesCreateLiveCommentRequest;
}

/**
 * 
 */
export class LiveCommentApi extends runtime.BaseAPI {

    /**
     * ライブ配信のコメント一覧を取得します。
     * ライブコメント一覧取得
     */
    async schedulesScheduleIdCommentsGetRaw(requestParameters: SchedulesScheduleIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesLiveCommentsResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesScheduleIdCommentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedules/{scheduleId}/comments`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesLiveCommentsResponseFromJSON(jsonValue));
    }

    /**
     * ライブ配信のコメント一覧を取得します。
     * ライブコメント一覧取得
     */
    async schedulesScheduleIdCommentsGet(requestParameters: SchedulesScheduleIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesLiveCommentsResponse> {
        const response = await this.schedulesScheduleIdCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ライブ配信にコメントを投稿します。
     * ライブコメント作成
     */
    async schedulesScheduleIdCommentsPostRaw(requestParameters: SchedulesScheduleIdCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesScheduleIdCommentsPost().'
            );
        }

        if (requestParameters['typesCreateLiveCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCreateLiveCommentRequest',
                'Required parameter "typesCreateLiveCommentRequest" was null or undefined when calling schedulesScheduleIdCommentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{scheduleId}/comments`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateLiveCommentRequestToJSON(requestParameters['typesCreateLiveCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信にコメントを投稿します。
     * ライブコメント作成
     */
    async schedulesScheduleIdCommentsPost(requestParameters: SchedulesScheduleIdCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.schedulesScheduleIdCommentsPostRaw(requestParameters, initOverrides);
    }

}
