/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestCreateVideoCommentRequest,
  ResponseVideoCommentsResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestCreateVideoCommentRequestFromJSON,
    RequestCreateVideoCommentRequestToJSON,
    ResponseVideoCommentsResponseFromJSON,
    ResponseVideoCommentsResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface VideosVideoIdCommentsGetRequest {
    videoId: string;
    limit?: number;
}

export interface VideosVideoIdCommentsPostRequest {
    videoId: string;
    requestCreateVideoCommentRequest: RequestCreateVideoCommentRequest;
}

/**
 * 
 */
export class VideoCommentApi extends runtime.BaseAPI {

    /**
     * 動画のコメント一覧を取得します。
     * 動画コメント一覧取得
     */
    async videosVideoIdCommentsGetRaw(requestParameters: VideosVideoIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseVideoCommentsResponse>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videosVideoIdCommentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/videos/{videoId}/comments`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseVideoCommentsResponseFromJSON(jsonValue));
    }

    /**
     * 動画のコメント一覧を取得します。
     * 動画コメント一覧取得
     */
    async videosVideoIdCommentsGet(requestParameters: VideosVideoIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseVideoCommentsResponse> {
        const response = await this.videosVideoIdCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画にコメントを投稿します。
     * 動画コメント作成
     */
    async videosVideoIdCommentsPostRaw(requestParameters: VideosVideoIdCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videosVideoIdCommentsPost().'
            );
        }

        if (requestParameters['requestCreateVideoCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'requestCreateVideoCommentRequest',
                'Required parameter "requestCreateVideoCommentRequest" was null or undefined when calling videosVideoIdCommentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/videos/{videoId}/comments`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCreateVideoCommentRequestToJSON(requestParameters['requestCreateVideoCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 動画にコメントを投稿します。
     * 動画コメント作成
     */
    async videosVideoIdCommentsPost(requestParameters: VideosVideoIdCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.videosVideoIdCommentsPostRaw(requestParameters, initOverrides);
    }

}
