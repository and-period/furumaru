/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthGoogleAccountResponse,
  AuthLINEAccountResponse,
  AuthResponse,
  ErrorResponse,
  ForgotAuthPasswordRequest,
  RefreshAuthTokenRequest,
  ResetAuthPasswordRequest,
  SignInRequest,
  UpdateAuthPasswordRequest,
} from '../models/index';
import {
    AuthGoogleAccountResponseFromJSON,
    AuthGoogleAccountResponseToJSON,
    AuthLINEAccountResponseFromJSON,
    AuthLINEAccountResponseToJSON,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ForgotAuthPasswordRequestFromJSON,
    ForgotAuthPasswordRequestToJSON,
    RefreshAuthTokenRequestFromJSON,
    RefreshAuthTokenRequestToJSON,
    ResetAuthPasswordRequestFromJSON,
    ResetAuthPasswordRequestToJSON,
    SignInRequestFromJSON,
    SignInRequestToJSON,
    UpdateAuthPasswordRequestFromJSON,
    UpdateAuthPasswordRequestToJSON,
} from '../models/index';

export interface AuthForgotPasswordPostRequest {
    forgotAuthPasswordRequest: ForgotAuthPasswordRequest;
}

export interface AuthForgotPasswordVerifiedPostRequest {
    resetAuthPasswordRequest: ResetAuthPasswordRequest;
}

export interface AuthGoogleGetRequest {
    state?: string;
    redirectUri?: string;
}

export interface AuthLineGetRequest {
    state?: string;
    redirectUri?: string;
}

export interface AuthPasswordPatchRequest {
    updateAuthPasswordRequest: UpdateAuthPasswordRequest;
}

export interface AuthPostRequest {
    signInRequest: SignInRequest;
}

export interface AuthRefreshTokenPostRequest {
    refreshAuthTokenRequest: RefreshAuthTokenRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * ふるマルからサインアウトします。
     * サインアウト
     */
    async authDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ふるマルからサインアウトします。
     * サインアウト
     */
    async authDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authDeleteRaw(initOverrides);
    }

    /**
     * パスワード再設定のための検証コードをメールで送信します。
     * パスワード再設定リクエスト
     */
    async authForgotPasswordPostRaw(requestParameters: AuthForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forgotAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'forgotAuthPasswordRequest',
                'Required parameter "forgotAuthPasswordRequest" was null or undefined when calling authForgotPasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/forgot-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotAuthPasswordRequestToJSON(requestParameters['forgotAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワード再設定のための検証コードをメールで送信します。
     * パスワード再設定リクエスト
     */
    async authForgotPasswordPost(requestParameters: AuthForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authForgotPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     * 検証コードを使用してパスワードを再設定します。
     * パスワード再設定実行
     */
    async authForgotPasswordVerifiedPostRaw(requestParameters: AuthForgotPasswordVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'resetAuthPasswordRequest',
                'Required parameter "resetAuthPasswordRequest" was null or undefined when calling authForgotPasswordVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/forgot-password/verified`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetAuthPasswordRequestToJSON(requestParameters['resetAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 検証コードを使用してパスワードを再設定します。
     * パスワード再設定実行
     */
    async authForgotPasswordVerifiedPost(requestParameters: AuthForgotPasswordVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authForgotPasswordVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * トークン検証
     */
    async authGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * トークン検証
     */
    async authGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.authGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Google OAuth認証のための認証URLを取得します。
     * Google認証URL取得
     */
    async authGoogleGetRaw(requestParameters: AuthGoogleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGoogleAccountResponse>> {
        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirectUri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/google`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGoogleAccountResponseFromJSON(jsonValue));
    }

    /**
     * Google OAuth認証のための認証URLを取得します。
     * Google認証URL取得
     */
    async authGoogleGet(requestParameters: AuthGoogleGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGoogleAccountResponse> {
        const response = await this.authGoogleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINE OAuth認証のための認証URLを取得します。
     * LINE認証URL取得
     */
    async authLineGetRaw(requestParameters: AuthLineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLINEAccountResponse>> {
        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirectUri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/line`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLINEAccountResponseFromJSON(jsonValue));
    }

    /**
     * LINE OAuth認証のための認証URLを取得します。
     * LINE認証URL取得
     */
    async authLineGet(requestParameters: AuthLineGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLINEAccountResponse> {
        const response = await this.authLineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 現在のパスワードを使用して新しいパスワードに変更します。
     * パスワード変更
     */
    async authPasswordPatchRaw(requestParameters: AuthPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthPasswordRequest',
                'Required parameter "updateAuthPasswordRequest" was null or undefined when calling authPasswordPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/password`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthPasswordRequestToJSON(requestParameters['updateAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 現在のパスワードを使用して新しいパスワードに変更します。
     * パスワード変更
     */
    async authPasswordPatch(requestParameters: AuthPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authPasswordPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー名/メールアドレスとパスワードでサインインします。
     * サインイン
     */
    async authPostRaw(requestParameters: AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['signInRequest'] == null) {
            throw new runtime.RequiredError(
                'signInRequest',
                'Required parameter "signInRequest" was null or undefined when calling authPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestToJSON(requestParameters['signInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * ユーザー名/メールアドレスとパスワードでサインインします。
     * サインイン
     */
    async authPost(requestParameters: AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.authPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * トークンリフレッシュ
     */
    async authRefreshTokenPostRaw(requestParameters: AuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['refreshAuthTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshAuthTokenRequest',
                'Required parameter "refreshAuthTokenRequest" was null or undefined when calling authRefreshTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/refresh-token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshAuthTokenRequestToJSON(requestParameters['refreshAuthTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * トークンリフレッシュ
     */
    async authRefreshTokenPost(requestParameters: AuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.authRefreshTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
