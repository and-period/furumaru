/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestForgotAuthPasswordRequest,
  RequestRefreshAuthTokenRequest,
  RequestResetAuthPasswordRequest,
  RequestSignInRequest,
  RequestUpdateAuthPasswordRequest,
  ResponseAuthGoogleAccountResponse,
  ResponseAuthLINEAccountResponse,
  ResponseAuthResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestForgotAuthPasswordRequestFromJSON,
    RequestForgotAuthPasswordRequestToJSON,
    RequestRefreshAuthTokenRequestFromJSON,
    RequestRefreshAuthTokenRequestToJSON,
    RequestResetAuthPasswordRequestFromJSON,
    RequestResetAuthPasswordRequestToJSON,
    RequestSignInRequestFromJSON,
    RequestSignInRequestToJSON,
    RequestUpdateAuthPasswordRequestFromJSON,
    RequestUpdateAuthPasswordRequestToJSON,
    ResponseAuthGoogleAccountResponseFromJSON,
    ResponseAuthGoogleAccountResponseToJSON,
    ResponseAuthLINEAccountResponseFromJSON,
    ResponseAuthLINEAccountResponseToJSON,
    ResponseAuthResponseFromJSON,
    ResponseAuthResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface AuthForgotPasswordPostRequest {
    requestForgotAuthPasswordRequest: RequestForgotAuthPasswordRequest;
}

export interface AuthForgotPasswordVerifiedPostRequest {
    requestResetAuthPasswordRequest: RequestResetAuthPasswordRequest;
}

export interface AuthGoogleGetRequest {
    state?: string;
    redirectUri?: string;
}

export interface AuthLineGetRequest {
    state?: string;
    redirectUri?: string;
}

export interface AuthPasswordPatchRequest {
    requestUpdateAuthPasswordRequest: RequestUpdateAuthPasswordRequest;
}

export interface AuthPostRequest {
    requestSignInRequest: RequestSignInRequest;
}

export interface AuthRefreshTokenPostRequest {
    requestRefreshAuthTokenRequest: RequestRefreshAuthTokenRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * ふるマルからサインアウトします。
     * サインアウト
     */
    async authDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ふるマルからサインアウトします。
     * サインアウト
     */
    async authDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authDeleteRaw(initOverrides);
    }

    /**
     * パスワード再設定のための検証コードをメールで送信します。
     * パスワード再設定リクエスト
     */
    async authForgotPasswordPostRaw(requestParameters: AuthForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestForgotAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'requestForgotAuthPasswordRequest',
                'Required parameter "requestForgotAuthPasswordRequest" was null or undefined when calling authForgotPasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestForgotAuthPasswordRequestToJSON(requestParameters['requestForgotAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワード再設定のための検証コードをメールで送信します。
     * パスワード再設定リクエスト
     */
    async authForgotPasswordPost(requestParameters: AuthForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authForgotPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     * 検証コードを使用してパスワードを再設定します。
     * パスワード再設定実行
     */
    async authForgotPasswordVerifiedPostRaw(requestParameters: AuthForgotPasswordVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestResetAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'requestResetAuthPasswordRequest',
                'Required parameter "requestResetAuthPasswordRequest" was null or undefined when calling authForgotPasswordVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/forgot-password/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestResetAuthPasswordRequestToJSON(requestParameters['requestResetAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 検証コードを使用してパスワードを再設定します。
     * パスワード再設定実行
     */
    async authForgotPasswordVerifiedPost(requestParameters: AuthForgotPasswordVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authForgotPasswordVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * トークン検証
     */
    async authGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthResponseFromJSON(jsonValue));
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * トークン検証
     */
    async authGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthResponse> {
        const response = await this.authGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Google OAuth認証のための認証URLを取得します。
     * Google認証URL取得
     */
    async authGoogleGetRaw(requestParameters: AuthGoogleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthGoogleAccountResponse>> {
        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirectUri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthGoogleAccountResponseFromJSON(jsonValue));
    }

    /**
     * Google OAuth認証のための認証URLを取得します。
     * Google認証URL取得
     */
    async authGoogleGet(requestParameters: AuthGoogleGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthGoogleAccountResponse> {
        const response = await this.authGoogleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINE OAuth認証のための認証URLを取得します。
     * LINE認証URL取得
     */
    async authLineGetRaw(requestParameters: AuthLineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthLINEAccountResponse>> {
        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirectUri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/line`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthLINEAccountResponseFromJSON(jsonValue));
    }

    /**
     * LINE OAuth認証のための認証URLを取得します。
     * LINE認証URL取得
     */
    async authLineGet(requestParameters: AuthLineGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthLINEAccountResponse> {
        const response = await this.authLineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 現在のパスワードを使用して新しいパスワードに変更します。
     * パスワード変更
     */
    async authPasswordPatchRaw(requestParameters: AuthPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestUpdateAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthPasswordRequest',
                'Required parameter "requestUpdateAuthPasswordRequest" was null or undefined when calling authPasswordPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthPasswordRequestToJSON(requestParameters['requestUpdateAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 現在のパスワードを使用して新しいパスワードに変更します。
     * パスワード変更
     */
    async authPasswordPatch(requestParameters: AuthPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authPasswordPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー名/メールアドレスとパスワードでサインインします。
     * サインイン
     */
    async authPostRaw(requestParameters: AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthResponse>> {
        if (requestParameters['requestSignInRequest'] == null) {
            throw new runtime.RequiredError(
                'requestSignInRequest',
                'Required parameter "requestSignInRequest" was null or undefined when calling authPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestSignInRequestToJSON(requestParameters['requestSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthResponseFromJSON(jsonValue));
    }

    /**
     * ユーザー名/メールアドレスとパスワードでサインインします。
     * サインイン
     */
    async authPost(requestParameters: AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthResponse> {
        const response = await this.authPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * トークンリフレッシュ
     */
    async authRefreshTokenPostRaw(requestParameters: AuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthResponse>> {
        if (requestParameters['requestRefreshAuthTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'requestRefreshAuthTokenRequest',
                'Required parameter "requestRefreshAuthTokenRequest" was null or undefined when calling authRefreshTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestRefreshAuthTokenRequestToJSON(requestParameters['requestRefreshAuthTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthResponseFromJSON(jsonValue));
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * トークンリフレッシュ
     */
    async authRefreshTokenPost(requestParameters: AuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthResponse> {
        const response = await this.authRefreshTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
