/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestCreateAuthUserRequest,
  RequestCreateAuthUserWithGoogleRequest,
  RequestCreateAuthUserWithLINERequest,
  RequestUpdateAuthUserAccountIDRequest,
  RequestUpdateAuthUserEmailRequest,
  RequestUpdateAuthUserNotificationRequest,
  RequestUpdateAuthUserThumbnailRequest,
  RequestUpdateAuthUserUsernameRequest,
  RequestVerifyAuthUserEmailRequest,
  RequestVerifyAuthUserRequest,
  ResponseAuthUserResponse,
  ResponseCreateAuthUserResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestCreateAuthUserRequestFromJSON,
    RequestCreateAuthUserRequestToJSON,
    RequestCreateAuthUserWithGoogleRequestFromJSON,
    RequestCreateAuthUserWithGoogleRequestToJSON,
    RequestCreateAuthUserWithLINERequestFromJSON,
    RequestCreateAuthUserWithLINERequestToJSON,
    RequestUpdateAuthUserAccountIDRequestFromJSON,
    RequestUpdateAuthUserAccountIDRequestToJSON,
    RequestUpdateAuthUserEmailRequestFromJSON,
    RequestUpdateAuthUserEmailRequestToJSON,
    RequestUpdateAuthUserNotificationRequestFromJSON,
    RequestUpdateAuthUserNotificationRequestToJSON,
    RequestUpdateAuthUserThumbnailRequestFromJSON,
    RequestUpdateAuthUserThumbnailRequestToJSON,
    RequestUpdateAuthUserUsernameRequestFromJSON,
    RequestUpdateAuthUserUsernameRequestToJSON,
    RequestVerifyAuthUserEmailRequestFromJSON,
    RequestVerifyAuthUserEmailRequestToJSON,
    RequestVerifyAuthUserRequestFromJSON,
    RequestVerifyAuthUserRequestToJSON,
    ResponseAuthUserResponseFromJSON,
    ResponseAuthUserResponseToJSON,
    ResponseCreateAuthUserResponseFromJSON,
    ResponseCreateAuthUserResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface UsersMeAccountIdPatchRequest {
    requestUpdateAuthUserAccountIDRequest: RequestUpdateAuthUserAccountIDRequest;
}

export interface UsersMeEmailPatchRequest {
    requestUpdateAuthUserEmailRequest: RequestUpdateAuthUserEmailRequest;
}

export interface UsersMeEmailVerifiedPostRequest {
    requestVerifyAuthUserEmailRequest: RequestVerifyAuthUserEmailRequest;
}

export interface UsersMeGooglePostRequest {
    requestCreateAuthUserWithGoogleRequest: RequestCreateAuthUserWithGoogleRequest;
}

export interface UsersMeLinePostRequest {
    requestCreateAuthUserWithLINERequest: RequestCreateAuthUserWithLINERequest;
}

export interface UsersMeNotificationPatchRequest {
    requestUpdateAuthUserNotificationRequest: RequestUpdateAuthUserNotificationRequest;
}

export interface UsersMePostRequest {
    requestCreateAuthUserRequest: RequestCreateAuthUserRequest;
}

export interface UsersMeThumbnailPatchRequest {
    requestUpdateAuthUserThumbnailRequest: RequestUpdateAuthUserThumbnailRequest;
}

export interface UsersMeUsernamePatchRequest {
    requestUpdateAuthUserUsernameRequest: RequestUpdateAuthUserUsernameRequest;
}

export interface UsersMeVerifiedPostRequest {
    requestVerifyAuthUserRequest: RequestVerifyAuthUserRequest;
}

/**
 * 
 */
export class AuthUserApi extends runtime.BaseAPI {

    /**
     * ユーザーのアカウントIDを更新します。
     * アカウントID更新
     */
    async usersMeAccountIdPatchRaw(requestParameters: UsersMeAccountIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestUpdateAuthUserAccountIDRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthUserAccountIDRequest',
                'Required parameter "requestUpdateAuthUserAccountIDRequest" was null or undefined when calling usersMeAccountIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/account-id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthUserAccountIDRequestToJSON(requestParameters['requestUpdateAuthUserAccountIDRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのアカウントIDを更新します。
     * アカウントID更新
     */
    async usersMeAccountIdPatch(requestParameters: UsersMeAccountIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeAccountIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーアカウントを削除します。
     * ユーザー削除
     */
    async usersMeDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーアカウントを削除します。
     * ユーザー削除
     */
    async usersMeDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeDeleteRaw(initOverrides);
    }

    /**
     * ユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async usersMeEmailPatchRaw(requestParameters: UsersMeEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestUpdateAuthUserEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthUserEmailRequest',
                'Required parameter "requestUpdateAuthUserEmailRequest" was null or undefined when calling usersMeEmailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/email`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthUserEmailRequestToJSON(requestParameters['requestUpdateAuthUserEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async usersMeEmailPatch(requestParameters: UsersMeEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeEmailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新時に送信される確認コードで更新を確定します。
     * メールアドレス更新確認
     */
    async usersMeEmailVerifiedPostRaw(requestParameters: UsersMeEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestVerifyAuthUserEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'requestVerifyAuthUserEmailRequest',
                'Required parameter "requestVerifyAuthUserEmailRequest" was null or undefined when calling usersMeEmailVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/email/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestVerifyAuthUserEmailRequestToJSON(requestParameters['requestVerifyAuthUserEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新時に送信される確認コードで更新を確定します。
     * メールアドレス更新確認
     */
    async usersMeEmailVerifiedPost(requestParameters: UsersMeEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeEmailVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * ログイン中のユーザー情報を取得します。
     * 認証ユーザー情報取得
     */
    async usersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中のユーザー情報を取得します。
     * 認証ユーザー情報取得
     */
    async usersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthUserResponse> {
        const response = await this.usersMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Googleアカウントを使用してユーザー登録を行います。
     * Googleアカウントでユーザー登録
     */
    async usersMeGooglePostRaw(requestParameters: UsersMeGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthUserResponse>> {
        if (requestParameters['requestCreateAuthUserWithGoogleRequest'] == null) {
            throw new runtime.RequiredError(
                'requestCreateAuthUserWithGoogleRequest',
                'Required parameter "requestCreateAuthUserWithGoogleRequest" was null or undefined when calling usersMeGooglePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/google`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCreateAuthUserWithGoogleRequestToJSON(requestParameters['requestCreateAuthUserWithGoogleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * Googleアカウントを使用してユーザー登録を行います。
     * Googleアカウントでユーザー登録
     */
    async usersMeGooglePost(requestParameters: UsersMeGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthUserResponse> {
        const response = await this.usersMeGooglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINEアカウントを使用してユーザー登録を行います。
     * LINEアカウントでユーザー登録
     */
    async usersMeLinePostRaw(requestParameters: UsersMeLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAuthUserResponse>> {
        if (requestParameters['requestCreateAuthUserWithLINERequest'] == null) {
            throw new runtime.RequiredError(
                'requestCreateAuthUserWithLINERequest',
                'Required parameter "requestCreateAuthUserWithLINERequest" was null or undefined when calling usersMeLinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/line`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCreateAuthUserWithLINERequestToJSON(requestParameters['requestCreateAuthUserWithLINERequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * LINEアカウントを使用してユーザー登録を行います。
     * LINEアカウントでユーザー登録
     */
    async usersMeLinePost(requestParameters: UsersMeLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAuthUserResponse> {
        const response = await this.usersMeLinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーの通知設定を更新します。
     * 通知設定更新
     */
    async usersMeNotificationPatchRaw(requestParameters: UsersMeNotificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestUpdateAuthUserNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthUserNotificationRequest',
                'Required parameter "requestUpdateAuthUserNotificationRequest" was null or undefined when calling usersMeNotificationPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/notification`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthUserNotificationRequestToJSON(requestParameters['requestUpdateAuthUserNotificationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの通知設定を更新します。
     * 通知設定更新
     */
    async usersMeNotificationPatch(requestParameters: UsersMeNotificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeNotificationPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 新しいユーザーを登録します。
     * ユーザー登録
     */
    async usersMePostRaw(requestParameters: UsersMePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCreateAuthUserResponse>> {
        if (requestParameters['requestCreateAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'requestCreateAuthUserRequest',
                'Required parameter "requestCreateAuthUserRequest" was null or undefined when calling usersMePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCreateAuthUserRequestToJSON(requestParameters['requestCreateAuthUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCreateAuthUserResponseFromJSON(jsonValue));
    }

    /**
     * 新しいユーザーを登録します。
     * ユーザー登録
     */
    async usersMePost(requestParameters: UsersMePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCreateAuthUserResponse> {
        const response = await this.usersMePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーのサムネイル画像を更新します。
     * サムネイル更新
     */
    async usersMeThumbnailPatchRaw(requestParameters: UsersMeThumbnailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestUpdateAuthUserThumbnailRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthUserThumbnailRequest',
                'Required parameter "requestUpdateAuthUserThumbnailRequest" was null or undefined when calling usersMeThumbnailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/thumbnail`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthUserThumbnailRequestToJSON(requestParameters['requestUpdateAuthUserThumbnailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのサムネイル画像を更新します。
     * サムネイル更新
     */
    async usersMeThumbnailPatch(requestParameters: UsersMeThumbnailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeThumbnailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの表示名を更新します。
     * ユーザー名更新
     */
    async usersMeUsernamePatchRaw(requestParameters: UsersMeUsernamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestUpdateAuthUserUsernameRequest'] == null) {
            throw new runtime.RequiredError(
                'requestUpdateAuthUserUsernameRequest',
                'Required parameter "requestUpdateAuthUserUsernameRequest" was null or undefined when calling usersMeUsernamePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/username`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUpdateAuthUserUsernameRequestToJSON(requestParameters['requestUpdateAuthUserUsernameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの表示名を更新します。
     * ユーザー名更新
     */
    async usersMeUsernamePatch(requestParameters: UsersMeUsernamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeUsernamePatchRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー登録時に送信される確認コードで登録を確定します。
     * ユーザー登録確認
     */
    async usersMeVerifiedPostRaw(requestParameters: UsersMeVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestVerifyAuthUserRequest'] == null) {
            throw new runtime.RequiredError(
                'requestVerifyAuthUserRequest',
                'Required parameter "requestVerifyAuthUserRequest" was null or undefined when calling usersMeVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestVerifyAuthUserRequestToJSON(requestParameters['requestVerifyAuthUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー登録時に送信される確認コードで登録を確定します。
     * ユーザー登録確認
     */
    async usersMeVerifiedPost(requestParameters: UsersMeVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersMeVerifiedPostRaw(requestParameters, initOverrides);
    }

}
