/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesCreateProductReviewRequest,
  TypesProductReviewResponse,
  TypesProductReviewsResponse,
  TypesUpdateProductReviewRequest,
  TypesUpsertProductReviewReactionRequest,
  UtilErrorResponse,
} from '../models/index';
import {
    TypesCreateProductReviewRequestFromJSON,
    TypesCreateProductReviewRequestToJSON,
    TypesProductReviewResponseFromJSON,
    TypesProductReviewResponseToJSON,
    TypesProductReviewsResponseFromJSON,
    TypesProductReviewsResponseToJSON,
    TypesUpdateProductReviewRequestFromJSON,
    TypesUpdateProductReviewRequestToJSON,
    TypesUpsertProductReviewReactionRequestFromJSON,
    TypesUpsertProductReviewReactionRequestToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface ProductsProductIdReviewsGetRequest {
    productId: string;
    limit?: number;
    offset?: number;
}

export interface ProductsProductIdReviewsPostRequest {
    productId: string;
    typesCreateProductReviewRequest: TypesCreateProductReviewRequest;
}

export interface ProductsProductIdReviewsReviewIdGetRequest {
    productId: string;
    reviewId: string;
}

export interface ProductsProductIdReviewsReviewIdPatchRequest {
    productId: string;
    reviewId: string;
    typesUpdateProductReviewRequest: TypesUpdateProductReviewRequest;
}

export interface ProductsProductIdReviewsReviewIdReactionsDeleteRequest {
    productId: string;
    reviewId: string;
}

export interface ProductsProductIdReviewsReviewIdReactionsPostRequest {
    productId: string;
    reviewId: string;
    typesUpsertProductReviewReactionRequest: TypesUpsertProductReviewReactionRequest;
}

export interface UsersMeProductsProductIdReviewsGetRequest {
    productId: string;
}

/**
 * 
 */
export class ProductReviewApi extends runtime.BaseAPI {

    /**
     * 指定した商品のレビュー一覧を取得します。
     * 商品レビュー一覧取得
     */
    async productsProductIdReviewsGetRaw(requestParameters: ProductsProductIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesProductReviewsResponse>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling productsProductIdReviewsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{productId}/reviews`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesProductReviewsResponseFromJSON(jsonValue));
    }

    /**
     * 指定した商品のレビュー一覧を取得します。
     * 商品レビュー一覧取得
     */
    async productsProductIdReviewsGet(requestParameters: ProductsProductIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesProductReviewsResponse> {
        const response = await this.productsProductIdReviewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品のレビューを作成します。
     * 商品レビュー作成
     */
    async productsProductIdReviewsPostRaw(requestParameters: ProductsProductIdReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling productsProductIdReviewsPost().'
            );
        }

        if (requestParameters['typesCreateProductReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'typesCreateProductReviewRequest',
                'Required parameter "typesCreateProductReviewRequest" was null or undefined when calling productsProductIdReviewsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}/reviews`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateProductReviewRequestToJSON(requestParameters['typesCreateProductReviewRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品のレビューを作成します。
     * 商品レビュー作成
     */
    async productsProductIdReviewsPost(requestParameters: ProductsProductIdReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsProductIdReviewsPostRaw(requestParameters, initOverrides);
    }

    /**
     * 商品レビューの詳細情報を取得します。
     * 商品レビュー詳細取得
     */
    async productsProductIdReviewsReviewIdGetRaw(requestParameters: ProductsProductIdReviewsReviewIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesProductReviewResponse>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling productsProductIdReviewsReviewIdGet().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling productsProductIdReviewsReviewIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{productId}/reviews/{reviewId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesProductReviewResponseFromJSON(jsonValue));
    }

    /**
     * 商品レビューの詳細情報を取得します。
     * 商品レビュー詳細取得
     */
    async productsProductIdReviewsReviewIdGet(requestParameters: ProductsProductIdReviewsReviewIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesProductReviewResponse> {
        const response = await this.productsProductIdReviewsReviewIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品レビューの内容を更新します。
     * 商品レビュー更新
     */
    async productsProductIdReviewsReviewIdPatchRaw(requestParameters: ProductsProductIdReviewsReviewIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling productsProductIdReviewsReviewIdPatch().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling productsProductIdReviewsReviewIdPatch().'
            );
        }

        if (requestParameters['typesUpdateProductReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpdateProductReviewRequest',
                'Required parameter "typesUpdateProductReviewRequest" was null or undefined when calling productsProductIdReviewsReviewIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}/reviews/{reviewId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateProductReviewRequestToJSON(requestParameters['typesUpdateProductReviewRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品レビューの内容を更新します。
     * 商品レビュー更新
     */
    async productsProductIdReviewsReviewIdPatch(requestParameters: ProductsProductIdReviewsReviewIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsProductIdReviewsReviewIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 商品レビューに対するリアクションを削除します。
     * 商品レビューリアクション削除
     */
    async productsProductIdReviewsReviewIdReactionsDeleteRaw(requestParameters: ProductsProductIdReviewsReviewIdReactionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling productsProductIdReviewsReviewIdReactionsDelete().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling productsProductIdReviewsReviewIdReactionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}/reviews/{reviewId}/reactions`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品レビューに対するリアクションを削除します。
     * 商品レビューリアクション削除
     */
    async productsProductIdReviewsReviewIdReactionsDelete(requestParameters: ProductsProductIdReviewsReviewIdReactionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsProductIdReviewsReviewIdReactionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 商品レビューに対するリアクション（いいねなど）を登録または更新します。
     * 商品レビューリアクション登録/更新
     */
    async productsProductIdReviewsReviewIdReactionsPostRaw(requestParameters: ProductsProductIdReviewsReviewIdReactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling productsProductIdReviewsReviewIdReactionsPost().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling productsProductIdReviewsReviewIdReactionsPost().'
            );
        }

        if (requestParameters['typesUpsertProductReviewReactionRequest'] == null) {
            throw new runtime.RequiredError(
                'typesUpsertProductReviewReactionRequest',
                'Required parameter "typesUpsertProductReviewReactionRequest" was null or undefined when calling productsProductIdReviewsReviewIdReactionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}/reviews/{reviewId}/reactions`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpsertProductReviewReactionRequestToJSON(requestParameters['typesUpsertProductReviewReactionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品レビューに対するリアクション（いいねなど）を登録または更新します。
     * 商品レビューリアクション登録/更新
     */
    async productsProductIdReviewsReviewIdReactionsPost(requestParameters: ProductsProductIdReviewsReviewIdReactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsProductIdReviewsReviewIdReactionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * ログイン中のユーザーが投稿した商品レビューの一覧を取得します。
     * ユーザー商品レビュー一覧取得
     */
    async usersMeProductsProductIdReviewsGetRaw(requestParameters: UsersMeProductsProductIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesProductReviewsResponse>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling usersMeProductsProductIdReviewsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/products/{productId}/reviews`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesProductReviewsResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中のユーザーが投稿した商品レビューの一覧を取得します。
     * ユーザー商品レビュー一覧取得
     */
    async usersMeProductsProductIdReviewsGet(requestParameters: UsersMeProductsProductIdReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesProductReviewsResponse> {
        const response = await this.usersMeProductsProductIdReviewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
