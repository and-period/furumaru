/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestGetUploadURLRequest,
  ResponseUploadStateResponse,
  ResponseUploadURLResponse,
  UtilErrorResponse,
} from '../models/index';
import {
    RequestGetUploadURLRequestFromJSON,
    RequestGetUploadURLRequestToJSON,
    ResponseUploadStateResponseFromJSON,
    ResponseUploadStateResponseToJSON,
    ResponseUploadURLResponseFromJSON,
    ResponseUploadURLResponseToJSON,
    UtilErrorResponseFromJSON,
    UtilErrorResponseToJSON,
} from '../models/index';

export interface UploadSpotsThumbnailPostRequest {
    requestGetUploadURLRequest: RequestGetUploadURLRequest;
}

export interface UploadStateGetRequest {
    key: string;
}

export interface UploadUsersThumbnailPostRequest {
    requestGetUploadURLRequest: RequestGetUploadURLRequest;
}

/**
 * 
 */
export class UploadApi extends runtime.BaseAPI {

    /**
     * スポットサムネイルをアップロードするためのURLを取得します。
     * スポットサムネイルアップロードURL取得
     */
    async uploadSpotsThumbnailPostRaw(requestParameters: UploadSpotsThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUploadURLResponse>> {
        if (requestParameters['requestGetUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'requestGetUploadURLRequest',
                'Required parameter "requestGetUploadURLRequest" was null or undefined when calling uploadSpotsThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/spots/thumbnail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestGetUploadURLRequestToJSON(requestParameters['requestGetUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUploadURLResponseFromJSON(jsonValue));
    }

    /**
     * スポットサムネイルをアップロードするためのURLを取得します。
     * スポットサムネイルアップロードURL取得
     */
    async uploadSpotsThumbnailPost(requestParameters: UploadSpotsThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUploadURLResponse> {
        const response = await this.uploadSpotsThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アップロードファイルの処理状態を取得します。
     * アップロード状態取得
     */
    async uploadStateGetRaw(requestParameters: UploadStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUploadStateResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling uploadStateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/upload/state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUploadStateResponseFromJSON(jsonValue));
    }

    /**
     * アップロードファイルの処理状態を取得します。
     * アップロード状態取得
     */
    async uploadStateGet(requestParameters: UploadStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUploadStateResponse> {
        const response = await this.uploadStateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーサムネイルをアップロードするためのURLを取得します。
     * ユーザーサムネイルアップロードURL取得
     */
    async uploadUsersThumbnailPostRaw(requestParameters: UploadUsersThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUploadURLResponse>> {
        if (requestParameters['requestGetUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'requestGetUploadURLRequest',
                'Required parameter "requestGetUploadURLRequest" was null or undefined when calling uploadUsersThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/users/thumbnail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestGetUploadURLRequestToJSON(requestParameters['requestGetUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUploadURLResponseFromJSON(jsonValue));
    }

    /**
     * ユーザーサムネイルをアップロードするためのURLを取得します。
     * ユーザーサムネイルアップロードURL取得
     */
    async uploadUsersThumbnailPost(requestParameters: UploadUsersThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUploadURLResponse> {
        const response = await this.uploadUsersThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
