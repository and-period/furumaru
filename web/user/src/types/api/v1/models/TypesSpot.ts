/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * スポット情報
 * @export
 * @interface TypesSpot
 */
export interface TypesSpot {
    /**
     * 登録日時
     * @type {number}
     * @memberof TypesSpot
     */
    createdAt?: number;
    /**
     * 説明
     * @type {string}
     * @memberof TypesSpot
     */
    description?: string;
    /**
     * スポットID
     * @type {string}
     * @memberof TypesSpot
     */
    id?: string;
    /**
     * 座標情報:緯度
     * @type {number}
     * @memberof TypesSpot
     */
    latitude?: number;
    /**
     * 座標情報:経度
     * @type {number}
     * @memberof TypesSpot
     */
    longitude?: number;
    /**
     * スポット名
     * @type {string}
     * @memberof TypesSpot
     */
    name?: string;
    /**
     * スポット種別ID
     * @type {string}
     * @memberof TypesSpot
     */
    spotTypeId?: string;
    /**
     * サムネイル画像URL
     * @type {string}
     * @memberof TypesSpot
     */
    thumbnailUrl?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof TypesSpot
     */
    updatedAt?: number;
    /**
     * 投稿者のユーザーID
     * @type {string}
     * @memberof TypesSpot
     */
    userId?: string;
    /**
     * 投稿者名
     * @type {string}
     * @memberof TypesSpot
     */
    userName?: string;
    /**
     * 投稿者のサムネイルURL
     * @type {string}
     * @memberof TypesSpot
     */
    userThumbnailUrl?: string;
    /**
     * 投稿者の種別
     * @type {number}
     * @memberof TypesSpot
     */
    userType?: number;
}

/**
 * Check if a given object implements the TypesSpot interface.
 */
export function instanceOfTypesSpot(value: object): value is TypesSpot {
    return true;
}

export function TypesSpotFromJSON(json: any): TypesSpot {
    return TypesSpotFromJSONTyped(json, false);
}

export function TypesSpotFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesSpot {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'] == null ? undefined : json['id'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'name': json['name'] == null ? undefined : json['name'],
        'spotTypeId': json['spotTypeId'] == null ? undefined : json['spotTypeId'],
        'thumbnailUrl': json['thumbnailUrl'] == null ? undefined : json['thumbnailUrl'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'userName': json['userName'] == null ? undefined : json['userName'],
        'userThumbnailUrl': json['userThumbnailUrl'] == null ? undefined : json['userThumbnailUrl'],
        'userType': json['userType'] == null ? undefined : json['userType'],
    };
}

export function TypesSpotToJSON(value?: TypesSpot | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'createdAt': value['createdAt'],
        'description': value['description'],
        'id': value['id'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'name': value['name'],
        'spotTypeId': value['spotTypeId'],
        'thumbnailUrl': value['thumbnailUrl'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
        'userName': value['userName'],
        'userThumbnailUrl': value['userThumbnailUrl'],
        'userType': value['userType'],
    };
}

