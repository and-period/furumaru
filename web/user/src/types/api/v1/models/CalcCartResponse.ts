/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 購入者向け
 * 購入者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { CartItem } from './CartItem';
import {
    CartItemFromJSON,
    CartItemFromJSONTyped,
    CartItemToJSON,
} from './CartItem';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
} from './Coordinator';
import type { Promotion } from './Promotion';
import {
    PromotionFromJSON,
    PromotionFromJSONTyped,
    PromotionToJSON,
} from './Promotion';
import type { Cart } from './Cart';
import {
    CartFromJSON,
    CartFromJSONTyped,
    CartToJSON,
} from './Cart';

/**
 * 
 * @export
 * @interface CalcCartResponse
 */
export interface CalcCartResponse {
    /**
     * カート一覧
     * @type {Array<Cart>}
     * @memberof CalcCartResponse
     */
    carts?: Array<Cart>;
    /**
     * 
     * @type {Coordinator}
     * @memberof CalcCartResponse
     */
    coordinator?: Coordinator;
    /**
     * 割引金額(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    discount?: number;
    /**
     * カート内の商品一覧(集計結果)
     * @type {Array<CartItem>}
     * @memberof CalcCartResponse
     */
    items?: Array<CartItem>;
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof CalcCartResponse
     */
    products?: Array<Product>;
    /**
     * 
     * @type {Promotion}
     * @memberof CalcCartResponse
     */
    promotion?: Promotion;
    /**
     * 支払い時にAPIへ送信するキー(重複判定用)
     * @type {string}
     * @memberof CalcCartResponse
     */
    requestId?: string;
    /**
     * 配送手数料(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    shippingFee?: number;
    /**
     * 購入金額(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    subtotal?: number;
    /**
     * 合計金額(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    total?: number;
}

/**
 * Check if a given object implements the CalcCartResponse interface.
 */
export function instanceOfCalcCartResponse(value: object): value is CalcCartResponse {
    return true;
}

export function CalcCartResponseFromJSON(json: any): CalcCartResponse {
    return CalcCartResponseFromJSONTyped(json, false);
}

export function CalcCartResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CalcCartResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'carts': json['carts'] == null ? undefined : ((json['carts'] as Array<any>).map(CartFromJSON)),
        'coordinator': json['coordinator'] == null ? undefined : CoordinatorFromJSON(json['coordinator']),
        'discount': json['discount'] == null ? undefined : json['discount'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(CartItemFromJSON)),
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(ProductFromJSON)),
        'promotion': json['promotion'] == null ? undefined : PromotionFromJSON(json['promotion']),
        'requestId': json['requestId'] == null ? undefined : json['requestId'],
        'shippingFee': json['shippingFee'] == null ? undefined : json['shippingFee'],
        'subtotal': json['subtotal'] == null ? undefined : json['subtotal'],
        'total': json['total'] == null ? undefined : json['total'],
    };
}

export function CalcCartResponseToJSON(value?: CalcCartResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'carts': value['carts'] == null ? undefined : ((value['carts'] as Array<any>).map(CartToJSON)),
        'coordinator': CoordinatorToJSON(value['coordinator']),
        'discount': value['discount'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(CartItemToJSON)),
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(ProductToJSON)),
        'promotion': PromotionToJSON(value['promotion']),
        'requestId': value['requestId'],
        'shippingFee': value['shippingFee'],
        'subtotal': value['subtotal'],
        'total': value['total'],
    };
}

