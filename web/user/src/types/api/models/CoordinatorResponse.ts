/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ArchiveSummary } from './ArchiveSummary';
import {
    ArchiveSummaryFromJSON,
    ArchiveSummaryFromJSONTyped,
    ArchiveSummaryToJSON,
} from './ArchiveSummary';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
} from './Coordinator';
import type { LiveSummary } from './LiveSummary';
import {
    LiveSummaryFromJSON,
    LiveSummaryFromJSONTyped,
    LiveSummaryToJSON,
} from './LiveSummary';
import type { Producer } from './Producer';
import {
    ProducerFromJSON,
    ProducerFromJSONTyped,
    ProducerToJSON,
} from './Producer';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { ProductType } from './ProductType';
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
} from './ProductType';

/**
 * 
 * @export
 * @interface CoordinatorResponse
 */
export interface CoordinatorResponse {
    /**
     * 
     * @type {Coordinator}
     * @memberof CoordinatorResponse
     */
    coordinator: Coordinator;
    /**
     * 開催中・開催予定のマルシェ一覧
     * @type {Array<LiveSummary>}
     * @memberof CoordinatorResponse
     */
    lives: Array<LiveSummary>;
    /**
     * 過去のマルシェ一覧
     * @type {Array<ArchiveSummary>}
     * @memberof CoordinatorResponse
     */
    archives: Array<ArchiveSummary>;
    /**
     * 品目一覧
     * @type {Array<ProductType>}
     * @memberof CoordinatorResponse
     */
    productTypes: Array<ProductType>;
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof CoordinatorResponse
     */
    producers: Array<Producer>;
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof CoordinatorResponse
     */
    products: Array<Product>;
}

/**
 * Check if a given object implements the CoordinatorResponse interface.
 */
export function instanceOfCoordinatorResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "coordinator" in value;
    isInstance = isInstance && "lives" in value;
    isInstance = isInstance && "archives" in value;
    isInstance = isInstance && "productTypes" in value;
    isInstance = isInstance && "producers" in value;
    isInstance = isInstance && "products" in value;

    return isInstance;
}

export function CoordinatorResponseFromJSON(json: any): CoordinatorResponse {
    return CoordinatorResponseFromJSONTyped(json, false);
}

export function CoordinatorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoordinatorResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'coordinator': CoordinatorFromJSON(json['coordinator']),
        'lives': ((json['lives'] as Array<any>).map(LiveSummaryFromJSON)),
        'archives': ((json['archives'] as Array<any>).map(ArchiveSummaryFromJSON)),
        'productTypes': ((json['productTypes'] as Array<any>).map(ProductTypeFromJSON)),
        'producers': ((json['producers'] as Array<any>).map(ProducerFromJSON)),
        'products': ((json['products'] as Array<any>).map(ProductFromJSON)),
    };
}

export function CoordinatorResponseToJSON(value?: CoordinatorResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'coordinator': CoordinatorToJSON(value.coordinator),
        'lives': ((value.lives as Array<any>).map(LiveSummaryToJSON)),
        'archives': ((value.archives as Array<any>).map(ArchiveSummaryToJSON)),
        'productTypes': ((value.productTypes as Array<any>).map(ProductTypeToJSON)),
        'producers': ((value.producers as Array<any>).map(ProducerToJSON)),
        'products': ((value.products as Array<any>).map(ProductToJSON)),
    };
}

