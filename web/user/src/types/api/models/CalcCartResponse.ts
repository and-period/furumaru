/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Cart } from './Cart';
import {
    CartFromJSON,
    CartFromJSONTyped,
    CartToJSON,
} from './Cart';
import type { CartItem } from './CartItem';
import {
    CartItemFromJSON,
    CartItemFromJSONTyped,
    CartItemToJSON,
} from './CartItem';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
} from './Coordinator';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { Promotion } from './Promotion';
import {
    PromotionFromJSON,
    PromotionFromJSONTyped,
    PromotionToJSON,
} from './Promotion';

/**
 * 
 * @export
 * @interface CalcCartResponse
 */
export interface CalcCartResponse {
    /**
     * 買い物かご一覧
     * @type {Array<Cart>}
     * @memberof CalcCartResponse
     */
    carts: Array<Cart>;
    /**
     * 買い物かご内の商品一覧(集約結果)
     * @type {Array<CartItem>}
     * @memberof CalcCartResponse
     */
    items: Array<CartItem>;
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof CalcCartResponse
     */
    products: Array<Product>;
    /**
     * 
     * @type {Coordinator}
     * @memberof CalcCartResponse
     */
    coordinator: Coordinator;
    /**
     * 
     * @type {Promotion}
     * @memberof CalcCartResponse
     */
    promotion: Promotion;
    /**
     * 小計(税込:商品合計金額)
     * @type {number}
     * @memberof CalcCartResponse
     */
    subtotal: number;
    /**
     * 割引金額(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    discount: number;
    /**
     * 配送手数料(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    shippingFee: number;
    /**
     * 合計金額(税込)
     * @type {number}
     * @memberof CalcCartResponse
     */
    total: number;
    /**
     * 支払い時にAPIへ送信するキー(重複判定用)
     * @type {string}
     * @memberof CalcCartResponse
     */
    requestId?: string;
}

/**
 * Check if a given object implements the CalcCartResponse interface.
 */
export function instanceOfCalcCartResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "carts" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "products" in value;
    isInstance = isInstance && "coordinator" in value;
    isInstance = isInstance && "promotion" in value;
    isInstance = isInstance && "subtotal" in value;
    isInstance = isInstance && "discount" in value;
    isInstance = isInstance && "shippingFee" in value;
    isInstance = isInstance && "total" in value;

    return isInstance;
}

export function CalcCartResponseFromJSON(json: any): CalcCartResponse {
    return CalcCartResponseFromJSONTyped(json, false);
}

export function CalcCartResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CalcCartResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'carts': ((json['carts'] as Array<any>).map(CartFromJSON)),
        'items': ((json['items'] as Array<any>).map(CartItemFromJSON)),
        'products': ((json['products'] as Array<any>).map(ProductFromJSON)),
        'coordinator': CoordinatorFromJSON(json['coordinator']),
        'promotion': PromotionFromJSON(json['promotion']),
        'subtotal': json['subtotal'],
        'discount': json['discount'],
        'shippingFee': json['shippingFee'],
        'total': json['total'],
        'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
    };
}

export function CalcCartResponseToJSON(value?: CalcCartResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'carts': ((value.carts as Array<any>).map(CartToJSON)),
        'items': ((value.items as Array<any>).map(CartItemToJSON)),
        'products': ((value.products as Array<any>).map(ProductToJSON)),
        'coordinator': CoordinatorToJSON(value.coordinator),
        'promotion': PromotionToJSON(value.promotion),
        'subtotal': value.subtotal,
        'discount': value.discount,
        'shippingFee': value.shippingFee,
        'total': value.total,
        'requestId': value.requestId,
    };
}

