/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentMethodType } from './PaymentMethodType';
import {
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeFromJSONTyped,
    PaymentMethodTypeToJSON,
} from './PaymentMethodType';
import type { GuestCheckoutCreditCard } from './GuestCheckoutCreditCard';
import {
    GuestCheckoutCreditCardFromJSON,
    GuestCheckoutCreditCardFromJSONTyped,
    GuestCheckoutCreditCardToJSON,
} from './GuestCheckoutCreditCard';
import type { GuestCheckoutAddress } from './GuestCheckoutAddress';
import {
    GuestCheckoutAddressFromJSON,
    GuestCheckoutAddressFromJSONTyped,
    GuestCheckoutAddressToJSON,
} from './GuestCheckoutAddress';

/**
 * 
 * @export
 * @interface GuestCheckoutProductRequest
 */
export interface GuestCheckoutProductRequest {
    /**
     * 支払いキー(重複判定用)
     * @type {string}
     * @memberof GuestCheckoutProductRequest
     */
    requestId: string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof GuestCheckoutProductRequest
     */
    coordinatorId: string;
    /**
     * 箱の通番（箱単位で購入する場合のみ）
     * @type {number}
     * @memberof GuestCheckoutProductRequest
     */
    boxNumber: number;
    /**
     * プロモーションコード（割引適用時のみ）
     * @type {string}
     * @memberof GuestCheckoutProductRequest
     */
    promotionCode: string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof GuestCheckoutProductRequest
     */
    paymentMethod: PaymentMethodType;
    /**
     * 決済ページからの遷移先URL
     * @type {string}
     * @memberof GuestCheckoutProductRequest
     */
    callbackUrl: string;
    /**
     * 支払い合計金額（誤り検出用）
     * @type {number}
     * @memberof GuestCheckoutProductRequest
     */
    total: number;
    /**
     * 購入者メールアドレス
     * @type {string}
     * @memberof GuestCheckoutProductRequest
     */
    email: string;
    /**
     * 配送先住所を請求先住所と同一にする
     * @type {boolean}
     * @memberof GuestCheckoutProductRequest
     */
    isSameAddress: boolean;
    /**
     * 
     * @type {GuestCheckoutAddress}
     * @memberof GuestCheckoutProductRequest
     */
    billingAddress?: GuestCheckoutAddress;
    /**
     * 
     * @type {GuestCheckoutAddress}
     * @memberof GuestCheckoutProductRequest
     */
    shippingAddress: GuestCheckoutAddress;
    /**
     * 
     * @type {GuestCheckoutCreditCard}
     * @memberof GuestCheckoutProductRequest
     */
    creditCard: GuestCheckoutCreditCard;
}



/**
 * Check if a given object implements the GuestCheckoutProductRequest interface.
 */
export function instanceOfGuestCheckoutProductRequest(value: object): value is GuestCheckoutProductRequest {
    if (!('requestId' in value) || value['requestId'] === undefined) return false;
    if (!('coordinatorId' in value) || value['coordinatorId'] === undefined) return false;
    if (!('boxNumber' in value) || value['boxNumber'] === undefined) return false;
    if (!('promotionCode' in value) || value['promotionCode'] === undefined) return false;
    if (!('paymentMethod' in value) || value['paymentMethod'] === undefined) return false;
    if (!('callbackUrl' in value) || value['callbackUrl'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('isSameAddress' in value) || value['isSameAddress'] === undefined) return false;
    if (!('shippingAddress' in value) || value['shippingAddress'] === undefined) return false;
    if (!('creditCard' in value) || value['creditCard'] === undefined) return false;
    return true;
}

export function GuestCheckoutProductRequestFromJSON(json: any): GuestCheckoutProductRequest {
    return GuestCheckoutProductRequestFromJSONTyped(json, false);
}

export function GuestCheckoutProductRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GuestCheckoutProductRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'requestId': json['requestId'],
        'coordinatorId': json['coordinatorId'],
        'boxNumber': json['boxNumber'],
        'promotionCode': json['promotionCode'],
        'paymentMethod': PaymentMethodTypeFromJSON(json['paymentMethod']),
        'callbackUrl': json['callbackUrl'],
        'total': json['total'],
        'email': json['email'],
        'isSameAddress': json['isSameAddress'],
        'billingAddress': json['billingAddress'] == null ? undefined : GuestCheckoutAddressFromJSON(json['billingAddress']),
        'shippingAddress': GuestCheckoutAddressFromJSON(json['shippingAddress']),
        'creditCard': GuestCheckoutCreditCardFromJSON(json['creditCard']),
    };
}

export function GuestCheckoutProductRequestToJSON(value?: GuestCheckoutProductRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'requestId': value['requestId'],
        'coordinatorId': value['coordinatorId'],
        'boxNumber': value['boxNumber'],
        'promotionCode': value['promotionCode'],
        'paymentMethod': PaymentMethodTypeToJSON(value['paymentMethod']),
        'callbackUrl': value['callbackUrl'],
        'total': value['total'],
        'email': value['email'],
        'isSameAddress': value['isSameAddress'],
        'billingAddress': GuestCheckoutAddressToJSON(value['billingAddress']),
        'shippingAddress': GuestCheckoutAddressToJSON(value['shippingAddress']),
        'creditCard': GuestCheckoutCreditCardToJSON(value['creditCard']),
    };
}

