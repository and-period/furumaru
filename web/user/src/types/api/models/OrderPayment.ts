/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PaymentMethodType } from './PaymentMethodType';
import {
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeFromJSONTyped,
    PaymentMethodTypeToJSON,
} from './PaymentMethodType';
import type { PaymentStatus } from './PaymentStatus';
import {
    PaymentStatusFromJSON,
    PaymentStatusFromJSONTyped,
    PaymentStatusToJSON,
} from './PaymentStatus';

/**
 * 注文決済情報
 * @export
 * @interface OrderPayment
 */
export interface OrderPayment {
    /**
     * 取引ID
     * @type {string}
     * @memberof OrderPayment
     */
    transactionId: string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof OrderPayment
     */
    methodType: PaymentMethodType;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof OrderPayment
     */
    status: PaymentStatus;
    /**
     * 購入金額（税込）
     * @type {number}
     * @memberof OrderPayment
     */
    subtotal: number;
    /**
     * 割引金額（税込）
     * @type {number}
     * @memberof OrderPayment
     */
    discount: number;
    /**
     * 配送手数料（税込）
     * @type {number}
     * @memberof OrderPayment
     */
    shippingFee: number;
    /**
     * 合計金額（税込）
     * @type {number}
     * @memberof OrderPayment
     */
    total: number;
    /**
     * 注文日時（unixtime）
     * @type {number}
     * @memberof OrderPayment
     */
    orderedAt: number;
    /**
     * 支払日時（unixtime）
     * @type {number}
     * @memberof OrderPayment
     */
    paidAt: number;
}

/**
 * Check if a given object implements the OrderPayment interface.
 */
export function instanceOfOrderPayment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "methodType" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "subtotal" in value;
    isInstance = isInstance && "discount" in value;
    isInstance = isInstance && "shippingFee" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "orderedAt" in value;
    isInstance = isInstance && "paidAt" in value;

    return isInstance;
}

export function OrderPaymentFromJSON(json: any): OrderPayment {
    return OrderPaymentFromJSONTyped(json, false);
}

export function OrderPaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderPayment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': json['transactionId'],
        'methodType': PaymentMethodTypeFromJSON(json['methodType']),
        'status': PaymentStatusFromJSON(json['status']),
        'subtotal': json['subtotal'],
        'discount': json['discount'],
        'shippingFee': json['shippingFee'],
        'total': json['total'],
        'orderedAt': json['orderedAt'],
        'paidAt': json['paidAt'],
    };
}

export function OrderPaymentToJSON(value?: OrderPayment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionId': value.transactionId,
        'methodType': PaymentMethodTypeToJSON(value.methodType),
        'status': PaymentStatusToJSON(value.status),
        'subtotal': value.subtotal,
        'discount': value.discount,
        'shippingFee': value.shippingFee,
        'total': value.total,
        'orderedAt': value.orderedAt,
        'paidAt': value.paidAt,
    };
}

