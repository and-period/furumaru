/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
} from './Category';
import type { Producer } from './Producer';
import {
    ProducerFromJSON,
    ProducerFromJSONTyped,
    ProducerToJSON,
} from './Producer';
import type { ProductTag } from './ProductTag';
import {
    ProductTagFromJSON,
    ProductTagFromJSONTyped,
    ProductTagToJSON,
} from './ProductTag';
import type { ProductType } from './ProductType';
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
} from './ProductType';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
} from './Coordinator';

/**
 * 
 * @export
 * @interface ProductsResponse
 */
export interface ProductsResponse {
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof ProductsResponse
     */
    products: Array<Product>;
    /**
     * コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof ProductsResponse
     */
    coordinators: Array<Coordinator>;
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof ProductsResponse
     */
    producers: Array<Producer>;
    /**
     * 商品種別一覧
     * @type {Array<Category>}
     * @memberof ProductsResponse
     */
    categories: Array<Category>;
    /**
     * 品目一覧
     * @type {Array<ProductType>}
     * @memberof ProductsResponse
     */
    productTypes: Array<ProductType>;
    /**
     * 商品タグ一覧
     * @type {Array<ProductTag>}
     * @memberof ProductsResponse
     */
    productTags: Array<ProductTag>;
    /**
     * 合計数
     * @type {number}
     * @memberof ProductsResponse
     */
    total: number;
}

/**
 * Check if a given object implements the ProductsResponse interface.
 */
export function instanceOfProductsResponse(value: object): value is ProductsResponse {
    if (!('products' in value) || value['products'] === undefined) return false;
    if (!('coordinators' in value) || value['coordinators'] === undefined) return false;
    if (!('producers' in value) || value['producers'] === undefined) return false;
    if (!('categories' in value) || value['categories'] === undefined) return false;
    if (!('productTypes' in value) || value['productTypes'] === undefined) return false;
    if (!('productTags' in value) || value['productTags'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    return true;
}

export function ProductsResponseFromJSON(json: any): ProductsResponse {
    return ProductsResponseFromJSONTyped(json, false);
}

export function ProductsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'products': ((json['products'] as Array<any>).map(ProductFromJSON)),
        'coordinators': ((json['coordinators'] as Array<any>).map(CoordinatorFromJSON)),
        'producers': ((json['producers'] as Array<any>).map(ProducerFromJSON)),
        'categories': ((json['categories'] as Array<any>).map(CategoryFromJSON)),
        'productTypes': ((json['productTypes'] as Array<any>).map(ProductTypeFromJSON)),
        'productTags': ((json['productTags'] as Array<any>).map(ProductTagFromJSON)),
        'total': json['total'],
    };
}

export function ProductsResponseToJSON(value?: ProductsResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'products': ((value['products'] as Array<any>).map(ProductToJSON)),
        'coordinators': ((value['coordinators'] as Array<any>).map(CoordinatorToJSON)),
        'producers': ((value['producers'] as Array<any>).map(ProducerToJSON)),
        'categories': ((value['categories'] as Array<any>).map(CategoryToJSON)),
        'productTypes': ((value['productTypes'] as Array<any>).map(ProductTypeToJSON)),
        'productTags': ((value['productTags'] as Array<any>).map(ProductTagToJSON)),
        'total': value['total'],
    };
}

