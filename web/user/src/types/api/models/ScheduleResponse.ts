/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
} from './Coordinator';
import type { Live } from './Live';
import {
    LiveFromJSON,
    LiveFromJSONTyped,
    LiveToJSON,
} from './Live';
import type { Producer } from './Producer';
import {
    ProducerFromJSON,
    ProducerFromJSONTyped,
    ProducerToJSON,
} from './Producer';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { Schedule } from './Schedule';
import {
    ScheduleFromJSON,
    ScheduleFromJSONTyped,
    ScheduleToJSON,
} from './Schedule';

/**
 * 
 * @export
 * @interface ScheduleResponse
 */
export interface ScheduleResponse {
    /**
     * 
     * @type {Schedule}
     * @memberof ScheduleResponse
     */
    schedule: Schedule;
    /**
     * 
     * @type {Coordinator}
     * @memberof ScheduleResponse
     */
    coordinators?: Coordinator;
    /**
     * ライブ配信一覧
     * @type {Array<Live>}
     * @memberof ScheduleResponse
     */
    lives: Array<Live>;
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof ScheduleResponse
     */
    producers: Array<Producer>;
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof ScheduleResponse
     */
    products: Array<Product>;
}

/**
 * Check if a given object implements the ScheduleResponse interface.
 */
export function instanceOfScheduleResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "schedule" in value;
    isInstance = isInstance && "lives" in value;
    isInstance = isInstance && "producers" in value;
    isInstance = isInstance && "products" in value;

    return isInstance;
}

export function ScheduleResponseFromJSON(json: any): ScheduleResponse {
    return ScheduleResponseFromJSONTyped(json, false);
}

export function ScheduleResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduleResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schedule': ScheduleFromJSON(json['schedule']),
        'coordinators': !exists(json, 'coordinators') ? undefined : CoordinatorFromJSON(json['coordinators']),
        'lives': ((json['lives'] as Array<any>).map(LiveFromJSON)),
        'producers': ((json['producers'] as Array<any>).map(ProducerFromJSON)),
        'products': ((json['products'] as Array<any>).map(ProductFromJSON)),
    };
}

export function ScheduleResponseToJSON(value?: ScheduleResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schedule': ScheduleToJSON(value.schedule),
        'coordinators': CoordinatorToJSON(value.coordinators),
        'lives': ((value.lives as Array<any>).map(LiveToJSON)),
        'producers': ((value.producers as Array<any>).map(ProducerToJSON)),
        'products': ((value.products as Array<any>).map(ProductToJSON)),
    };
}

