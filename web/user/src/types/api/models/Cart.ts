/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CartItem } from './CartItem';
import {
    CartItemFromJSON,
    CartItemFromJSONTyped,
    CartItemToJSON,
} from './CartItem';
import type { ShippingSize } from './ShippingSize';
import {
    ShippingSizeFromJSON,
    ShippingSizeFromJSONTyped,
    ShippingSizeToJSON,
} from './ShippingSize';
import type { ShippingType } from './ShippingType';
import {
    ShippingTypeFromJSON,
    ShippingTypeFromJSONTyped,
    ShippingTypeToJSON,
} from './ShippingType';

/**
 * カート情報
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * 箱の通番
     * @type {number}
     * @memberof Cart
     */
    number: number;
    /**
     * 
     * @type {ShippingType}
     * @memberof Cart
     */
    type: ShippingType;
    /**
     * 
     * @type {ShippingSize}
     * @memberof Cart
     */
    size: ShippingSize;
    /**
     * 箱の占有率
     * @type {number}
     * @memberof Cart
     */
    rate: number;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof Cart
     */
    items: Array<CartItem>;
    /**
     * コーディネータID
     * @type {string}
     * @memberof Cart
     */
    coordinatorId: string;
}

/**
 * Check if a given object implements the Cart interface.
 */
export function instanceOfCart(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "rate" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "coordinatorId" in value;

    return isInstance;
}

export function CartFromJSON(json: any): Cart {
    return CartFromJSONTyped(json, false);
}

export function CartFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cart {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'number': json['number'],
        'type': ShippingTypeFromJSON(json['type']),
        'size': ShippingSizeFromJSON(json['size']),
        'rate': json['rate'],
        'items': ((json['items'] as Array<any>).map(CartItemFromJSON)),
        'coordinatorId': json['coordinatorId'],
    };
}

export function CartToJSON(value?: Cart | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'number': value.number,
        'type': ShippingTypeToJSON(value.type),
        'size': ShippingSizeToJSON(value.size),
        'rate': value.rate,
        'items': ((value.items as Array<any>).map(CartItemToJSON)),
        'coordinatorId': value.coordinatorId,
    };
}

