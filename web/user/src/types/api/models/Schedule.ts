/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ購入者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScheduleStatus } from './ScheduleStatus';
import {
    ScheduleStatusFromJSON,
    ScheduleStatusFromJSONTyped,
    ScheduleStatusToJSON,
} from './ScheduleStatus';
import type { Thumbnail } from './Thumbnail';
import {
    ThumbnailFromJSON,
    ThumbnailFromJSONTyped,
    ThumbnailToJSON,
} from './Thumbnail';

/**
 * マルシェ開催スケジュール情報
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * マルシェ開催スケジュールID
     * @type {string}
     * @memberof Schedule
     */
    id: string;
    /**
     * コーディネーターID
     * @type {string}
     * @memberof Schedule
     */
    coordinatorId: string;
    /**
     * 
     * @type {ScheduleStatus}
     * @memberof Schedule
     */
    status: ScheduleStatus;
    /**
     * タイトル
     * @type {string}
     * @memberof Schedule
     */
    title: string;
    /**
     * 説明
     * @type {string}
     * @memberof Schedule
     */
    description: string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof Schedule
     */
    thumbnailUrl: string;
    /**
     * リサイズ済みサムネイルURL一覧
     * @type {Array<Thumbnail>}
     * @memberof Schedule
     */
    thumbnails: Array<Thumbnail>;
    /**
     * 映像配信URL
     * @type {string}
     * @memberof Schedule
     */
    distributionUrl: string;
    /**
     * ライブ開始日時 (unixtime)
     * @type {number}
     * @memberof Schedule
     */
    startAt: number;
    /**
     * ライブ終了日時 (unixtime)
     * @type {number}
     * @memberof Schedule
     */
    endAt: number;
}

/**
 * Check if a given object implements the Schedule interface.
 */
export function instanceOfSchedule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "coordinatorId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "thumbnailUrl" in value;
    isInstance = isInstance && "thumbnails" in value;
    isInstance = isInstance && "distributionUrl" in value;
    isInstance = isInstance && "startAt" in value;
    isInstance = isInstance && "endAt" in value;

    return isInstance;
}

export function ScheduleFromJSON(json: any): Schedule {
    return ScheduleFromJSONTyped(json, false);
}

export function ScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schedule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'coordinatorId': json['coordinatorId'],
        'status': ScheduleStatusFromJSON(json['status']),
        'title': json['title'],
        'description': json['description'],
        'thumbnailUrl': json['thumbnailUrl'],
        'thumbnails': ((json['thumbnails'] as Array<any>).map(ThumbnailFromJSON)),
        'distributionUrl': json['distributionUrl'],
        'startAt': json['startAt'],
        'endAt': json['endAt'],
    };
}

export function ScheduleToJSON(value?: Schedule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'coordinatorId': value.coordinatorId,
        'status': ScheduleStatusToJSON(value.status),
        'title': value.title,
        'description': value.description,
        'thumbnailUrl': value.thumbnailUrl,
        'thumbnails': ((value.thumbnails as Array<any>).map(ThumbnailToJSON)),
        'distributionUrl': value.distributionUrl,
        'startAt': value.startAt,
        'endAt': value.endAt,
    };
}

