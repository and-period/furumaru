/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 管理者情報
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 管理者ID
     * @type {string}
     * @memberof Admin
     */
    'id': string;
    /**
     * 
     * @type {AdminRole}
     * @memberof Admin
     */
    'role': AdminRole;
    /**
     * 姓
     * @type {string}
     * @memberof Admin
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof Admin
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof Admin
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof Admin
     */
    'firstnameKana': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Admin
     */
    'email': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Admin
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Admin
     */
    'updatedAt': number;
}


/**
 * 管理者権限
 * @export
 * @enum {string}
 */

export const AdminRole = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 管理者
    */
    ADMINISTRATOR: 1,
    /**
    * コーディネータ
    */
    COORDINATOR: 2,
    /**
    * 生産者
    */
    PRODUCER: 3
} as const;

export type AdminRole = typeof AdminRole[keyof typeof AdminRole];


/**
 * 管理者の状態
 * @export
 * @enum {string}
 */

export const AdminStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 招待中
    */
    INVITED: 1,
    /**
    * 有効
    */
    ACTIVATED: 2,
    /**
    * 無効
    */
    DEACTIVATED: 3
} as const;

export type AdminStatus = typeof AdminStatus[keyof typeof AdminStatus];


/**
 * 管理者情報
 * @export
 * @interface Administrator
 */
export interface Administrator {
    /**
     * システム管理者ID
     * @type {string}
     * @memberof Administrator
     */
    'id': string;
    /**
     * 
     * @type {AdminStatus}
     * @memberof Administrator
     */
    'status': AdminStatus;
    /**
     * 姓
     * @type {string}
     * @memberof Administrator
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof Administrator
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof Administrator
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof Administrator
     */
    'firstnameKana': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Administrator
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof Administrator
     */
    'phoneNumber': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Administrator
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Administrator
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface AdministratorResponse
 */
export interface AdministratorResponse {
    /**
     * 
     * @type {Administrator}
     * @memberof AdministratorResponse
     */
    'administrator': Administrator;
}
/**
 * 
 * @export
 * @interface AdministratorsResponse
 */
export interface AdministratorsResponse {
    /**
     * システム管理者一覧
     * @type {Array<Administrator>}
     * @memberof AdministratorsResponse
     */
    'administrators': Array<Administrator>;
    /**
     * 合計数
     * @type {number}
     * @memberof AdministratorsResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface ApproveScheduleRequest
 */
export interface ApproveScheduleRequest {
    /**
     * 承認フラグ
     * @type {boolean}
     * @memberof ApproveScheduleRequest
     */
    'approved'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 管理者ID
     * @type {string}
     * @memberof AuthResponse
     */
    'adminId': string;
    /**
     * 
     * @type {AdminRole}
     * @memberof AuthResponse
     */
    'role': AdminRole;
    /**
     * アクセストークン
     * @type {string}
     * @memberof AuthResponse
     */
    'accessToken': string;
    /**
     * 更新トークン
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken': string;
    /**
     * 有効期限
     * @type {number}
     * @memberof AuthResponse
     */
    'expiresIn': number;
    /**
     * トークン種別
     * @type {string}
     * @memberof AuthResponse
     */
    'tokenType': string;
}


/**
 * 
 * @export
 * @interface AuthUserResponse
 */
export interface AuthUserResponse {
    /**
     * 管理者ID
     * @type {string}
     * @memberof AuthUserResponse
     */
    'id': string;
    /**
     * 
     * @type {AdminRole}
     * @memberof AuthUserResponse
     */
    'role': AdminRole;
    /**
     * 表示名
     * @type {string}
     * @memberof AuthUserResponse
     */
    'username': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AuthUserResponse
     */
    'email': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof AuthUserResponse
     */
    'thumbnailUrl': string;
    /**
     * リサイズ済みサムネイルURL一覧
     * @type {Array<CoordinatorThumbnailsInner>}
     * @memberof AuthUserResponse
     */
    'thumbnails': Array<CoordinatorThumbnailsInner>;
}


/**
 * マルシェライブ配信情報
 * @export
 * @interface Broadcast
 */
export interface Broadcast {
    /**
     * マルシェライブ配信ID
     * @type {string}
     * @memberof Broadcast
     */
    'id': string;
    /**
     * マルシェ開催スケジュールID
     * @type {string}
     * @memberof Broadcast
     */
    'scheduleId': string;
    /**
     * 
     * @type {BroadcastStatus}
     * @memberof Broadcast
     */
    'status': BroadcastStatus;
    /**
     * ライブ配信URL(入力側)
     * @type {string}
     * @memberof Broadcast
     */
    'inputUrl': string;
    /**
     * ライブ配信URL(出力側)
     * @type {string}
     * @memberof Broadcast
     */
    'outputUrl': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Broadcast
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Broadcast
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface BroadcastResponse
 */
export interface BroadcastResponse {
    /**
     * 
     * @type {Broadcast}
     * @memberof BroadcastResponse
     */
    'broadcast': Broadcast;
}
/**
 * マルシェライブ配信状況
 * @export
 * @enum {string}
 */

export const BroadcastStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 配信リソース未作成
    */
    DISABLED: 1,
    /**
    * 配信リソース作成/削除中
    */
    WAITING: 2,
    /**
    * 配信停止中
    */
    IDLE: 3,
    /**
    * 配信中
    */
    ACTIVE: 4
} as const;

export type BroadcastStatus = typeof BroadcastStatus[keyof typeof BroadcastStatus];


/**
 * 
 * @export
 * @interface CategoriesResponse
 */
export interface CategoriesResponse {
    /**
     * 商品種別一覧
     * @type {Array<Category>}
     * @memberof CategoriesResponse
     */
    'categories': Array<Category>;
    /**
     * 合計数
     * @type {number}
     * @memberof CategoriesResponse
     */
    'total': number;
}
/**
 * 商品種別情報
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 商品種別ID
     * @type {string}
     * @memberof Category
     */
    'id': string;
    /**
     * 商品種別名
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Category
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Category
     */
    'updatedAt': number;
}
/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * 
     * @type {Category}
     * @memberof CategoryResponse
     */
    'category': Category;
}
/**
 * お問い合わせ情報
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof Contact
     */
    'id': string;
    /**
     * 件名
     * @type {string}
     * @memberof Contact
     */
    'title': string;
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof Contact
     */
    'categoryId': string;
    /**
     * 内容
     * @type {string}
     * @memberof Contact
     */
    'content': string;
    /**
     * 氏名
     * @type {string}
     * @memberof Contact
     */
    'username': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Contact
     */
    'email': string;
    /**
     * 電話番号(国際番号 + 電話番号)
     * @type {string}
     * @memberof Contact
     */
    'phoneNumber': string;
    /**
     * 
     * @type {ContactStatus}
     * @memberof Contact
     */
    'status': ContactStatus;
    /**
     * 対応時メモ
     * @type {string}
     * @memberof Contact
     */
    'note': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Contact
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Contact
     */
    'updatedAt': number;
    /**
     * 会話履歴一覧
     * @type {Array<ThreadResponse>}
     * @memberof Contact
     */
    'threads': Array<ThreadResponse>;
}


/**
 * 
 * @export
 * @interface ContactCategoriesResponse
 */
export interface ContactCategoriesResponse {
    /**
     * お問い合わせ種別一覧
     * @type {Array<ContactCategory>}
     * @memberof ContactCategoriesResponse
     */
    'contactCategories': Array<ContactCategory>;
}
/**
 * お問い合わせ種別情報
 * @export
 * @interface ContactCategory
 */
export interface ContactCategory {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof ContactCategory
     */
    'id': string;
    /**
     * お問い合わせ種別名
     * @type {string}
     * @memberof ContactCategory
     */
    'title': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof ContactCategory
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof ContactCategory
     */
    'updatedAt': number;
}
/**
 * 
 * @export
 * @interface ContactCategoryResponse
 */
export interface ContactCategoryResponse {
    /**
     * 
     * @type {ContactCategory}
     * @memberof ContactCategoryResponse
     */
    'contactCategory': ContactCategory;
}
/**
 * 
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
    /**
     * 
     * @type {Contact}
     * @memberof ContactResponse
     */
    'contact': Contact;
    /**
     * 
     * @type {ContactCategory}
     * @memberof ContactResponse
     */
    'contactCategory': ContactCategory;
    /**
     * 会話履歴一覧
     * @type {Array<Thread>}
     * @memberof ContactResponse
     */
    'threads': Array<Thread>;
    /**
     * 
     * @type {User}
     * @memberof ContactResponse
     */
    'user'?: User;
    /**
     * 
     * @type {Admin}
     * @memberof ContactResponse
     */
    'responder'?: Admin;
}
/**
 * お問い合わせ対応状況
 * @export
 * @enum {string}
 */

export const ContactStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 未着手
    */
    WAITING: 1,
    /**
    * 対応中
    */
    INPROGRESS: 2,
    /**
    * 完了
    */
    DONE: 3,
    /**
    * 対応不要
    */
    DISCARD: 4
} as const;

export type ContactStatus = typeof ContactStatus[keyof typeof ContactStatus];


/**
 * 送信者タイプ
 * @export
 * @enum {string}
 */

export const ContactUserType = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 管理者
    */
    ADMIN: 1,
    /**
    * ユーザー
    */
    USER: 2,
    /**
    * ゲスト
    */
    GUEST: 3
} as const;

export type ContactUserType = typeof ContactUserType[keyof typeof ContactUserType];


/**
 * 
 * @export
 * @interface ContactsResponse
 */
export interface ContactsResponse {
    /**
     * お問い合わせ一覧
     * @type {Array<Contact>}
     * @memberof ContactsResponse
     */
    'contacts': Array<Contact>;
    /**
     * お問い合わせ種別一覧
     * @type {Array<ContactCategory>}
     * @memberof ContactsResponse
     */
    'contactCategories': Array<ContactCategory>;
    /**
     * 会話履歴一覧
     * @type {Array<Thread>}
     * @memberof ContactsResponse
     */
    'threads': Array<Thread>;
    /**
     * ユーザー一覧
     * @type {Array<User>}
     * @memberof ContactsResponse
     */
    'users'?: Array<User>;
    /**
     * 管理者一覧
     * @type {Array<Admin>}
     * @memberof ContactsResponse
     */
    'responders'?: Array<Admin>;
    /**
     * 合計数
     * @type {number}
     * @memberof ContactsResponse
     */
    'total': number;
}
/**
 * コーディネータ情報
 * @export
 * @interface Coordinator
 */
export interface Coordinator {
    /**
     * コーディネータID
     * @type {string}
     * @memberof Coordinator
     */
    'id': string;
    /**
     * 
     * @type {AdminStatus}
     * @memberof Coordinator
     */
    'status': AdminStatus;
    /**
     * 姓
     * @type {string}
     * @memberof Coordinator
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof Coordinator
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof Coordinator
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof Coordinator
     */
    'firstnameKana': string;
    /**
     * マルシェ名
     * @type {string}
     * @memberof Coordinator
     */
    'marcheName': string;
    /**
     * コーディネータ名
     * @type {string}
     * @memberof Coordinator
     */
    'username': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Coordinator
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof Coordinator
     */
    'phoneNumber': string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof Coordinator
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof Coordinator
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村
     * @type {string}
     * @memberof Coordinator
     */
    'city': string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof Coordinator
     */
    'addressLine1': string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof Coordinator
     */
    'addressLine2': string;
    /**
     * プロフィール
     * @type {string}
     * @memberof Coordinator
     */
    'profile': string;
    /**
     * 取り扱い品目ID一覧
     * @type {Array<string>}
     * @memberof Coordinator
     */
    'productTypeIds': Array<string>;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof Coordinator
     */
    'thumbnailUrl': string;
    /**
     * リサイズ済みサムネイルURL一覧
     * @type {Array<CoordinatorThumbnailsInner>}
     * @memberof Coordinator
     */
    'thumbnails': Array<CoordinatorThumbnailsInner>;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof Coordinator
     */
    'headerUrl': string;
    /**
     * リサイズ済みヘッダー画像URL一覧
     * @type {Array<CoordinatorHeadersInner>}
     * @memberof Coordinator
     */
    'headers': Array<CoordinatorHeadersInner>;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof Coordinator
     */
    'promotionVideoUrl': string;
    /**
     * 購入特典動画URL
     * @type {string}
     * @memberof Coordinator
     */
    'bonusVideoUrl': string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof Coordinator
     */
    'instagramId': string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof Coordinator
     */
    'facebookId': string;
    /**
     * 営業曜日
     * @type {Array<Weekday>}
     * @memberof Coordinator
     */
    'businessDays': Array<Weekday>;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Coordinator
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Coordinator
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface CoordinatorHeadersInner
 */
export interface CoordinatorHeadersInner {
    /**
     * リサイズ済みヘッダー画像URL
     * @type {string}
     * @memberof CoordinatorHeadersInner
     */
    'url': string;
    /**
     * 
     * @type {ImageSize}
     * @memberof CoordinatorHeadersInner
     */
    'size': ImageSize;
}


/**
 * 
 * @export
 * @interface CoordinatorResponse
 */
export interface CoordinatorResponse {
    /**
     * 
     * @type {Coordinator}
     * @memberof CoordinatorResponse
     */
    'coordinator': Coordinator;
    /**
     * 品目一覧
     * @type {Array<ProductType>}
     * @memberof CoordinatorResponse
     */
    'productTypes': Array<ProductType>;
}
/**
 * 
 * @export
 * @interface CoordinatorThumbnailsInner
 */
export interface CoordinatorThumbnailsInner {
    /**
     * リサイズ済みサムネイルURL
     * @type {string}
     * @memberof CoordinatorThumbnailsInner
     */
    'url': string;
    /**
     * 
     * @type {ImageSize}
     * @memberof CoordinatorThumbnailsInner
     */
    'size': ImageSize;
}


/**
 * 
 * @export
 * @interface CoordinatorsResponse
 */
export interface CoordinatorsResponse {
    /**
     * コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof CoordinatorsResponse
     */
    'coordinators': Array<Coordinator>;
    /**
     * 品目一覧
     * @type {Array<ProductType>}
     * @memberof CoordinatorsResponse
     */
    'productTypes': Array<ProductType>;
    /**
     * 合計数
     * @type {number}
     * @memberof CoordinatorsResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface CreateAdministratorRequest
 */
export interface CreateAdministratorRequest {
    /**
     * 姓(16文字まで)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'lastname': string;
    /**
     * 名(16文字まで)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'firstname': string;
    /**
     * 姓(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'firstnameKana': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'email': string;
    /**
     * 電話番号(国際番号 + 電話番号)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface CreateCategoryRequest
 */
export interface CreateCategoryRequest {
    /**
     * カテゴリ名(32文字まで)
     * @type {string}
     * @memberof CreateCategoryRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateContactRequest
 */
export interface CreateContactRequest {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof CreateContactRequest
     */
    'categoryId': string;
    /**
     * お問い合わせ件名(128文字まで)
     * @type {string}
     * @memberof CreateContactRequest
     */
    'title': string;
    /**
     * お問い合わせ内容(2000文字まで)
     * @type {string}
     * @memberof CreateContactRequest
     */
    'content': string;
    /**
     * 氏名(128文字まで)
     * @type {string}
     * @memberof CreateContactRequest
     */
    'userName': string;
    /**
     * 問い合わせ作成者ID
     * @type {string}
     * @memberof CreateContactRequest
     */
    'userId'?: string;
    /**
     * メールアドレス(256文字まで)
     * @type {string}
     * @memberof CreateContactRequest
     */
    'email': string;
    /**
     * 電話番号(18文字まで)
     * @type {string}
     * @memberof CreateContactRequest
     */
    'phoneNumber': string;
    /**
     * 対応者ID
     * @type {string}
     * @memberof CreateContactRequest
     */
    'responderId': string;
    /**
     * 対応メモ(2000文字まで)
     * @type {string}
     * @memberof CreateContactRequest
     */
    'note': string;
}
/**
 * 
 * @export
 * @interface CreateCoordinatorRequest
 */
export interface CreateCoordinatorRequest {
    /**
     * 姓(16文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'lastname': string;
    /**
     * 名(16文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'firstname': string;
    /**
     * 姓(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'firstnameKana': string;
    /**
     * マルシェ名(64文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'marcheName': string;
    /**
     * コーディネータ名(64文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'username': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'phoneNumber': string;
    /**
     * 郵便番号(ハイフンなし)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof CreateCoordinatorRequest
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村(32文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'city': string;
    /**
     * 町名・番地(64文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'addressLine1': string;
    /**
     * ビル名・号室など(64文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'addressLine2': string;
    /**
     * プロフィール(2000文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'profile': string;
    /**
     * 取り扱い品目ID一覧
     * @type {Array<string>}
     * @memberof CreateCoordinatorRequest
     */
    'productTypeIds': Array<string>;
    /**
     * サムネイル画像URL
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'thumbnailUrl': string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'headerUrl': string;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'promotionVideoUrl': string;
    /**
     * 購入者動画URL
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'bonusVideoUrl': string;
    /**
     * Instagramアカウント(30文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'instagramId': string;
    /**
     * Facebookアカウント(50文字まで)
     * @type {string}
     * @memberof CreateCoordinatorRequest
     */
    'facebookId': string;
    /**
     * 営業曜日
     * @type {Array<Weekday>}
     * @memberof CreateCoordinatorRequest
     */
    'businessDays': Array<Weekday>;
}


/**
 * 
 * @export
 * @interface CreateLiveRequest
 */
export interface CreateLiveRequest {
    /**
     * 生産者ID
     * @type {string}
     * @memberof CreateLiveRequest
     */
    'producerId': string;
    /**
     * 商品一覧(8つまで)
     * @type {Array<string>}
     * @memberof CreateLiveRequest
     */
    'productIds': Array<string>;
    /**
     * コメント
     * @type {string}
     * @memberof CreateLiveRequest
     */
    'comment': string;
    /**
     * ライブ開始予定日時 (unixtime)
     * @type {number}
     * @memberof CreateLiveRequest
     */
    'startAt': number;
    /**
     * ライブ終了予定日時 (unixtime)
     * @type {number}
     * @memberof CreateLiveRequest
     */
    'endAt': number;
}
/**
 * 
 * @export
 * @interface CreateNotificationRequest
 */
export interface CreateNotificationRequest {
    /**
     * 
     * @type {NotificationType}
     * @memberof CreateNotificationRequest
     */
    'type': NotificationType;
    /**
     * 通知対象一覧
     * @type {Array<NotificationTarget>}
     * @memberof CreateNotificationRequest
     */
    'targets': Array<NotificationTarget>;
    /**
     * タイトル(128字まで)
     * @type {string}
     * @memberof CreateNotificationRequest
     */
    'title': string;
    /**
     * 本文(2000字まで)
     * @type {string}
     * @memberof CreateNotificationRequest
     */
    'body': string;
    /**
     * 備考(2000字まで)
     * @type {string}
     * @memberof CreateNotificationRequest
     */
    'note': string;
    /**
     * 掲載日時 (unixtime)
     * @type {number}
     * @memberof CreateNotificationRequest
     */
    'publishedAt': number;
    /**
     * プロモーションID
     * @type {string}
     * @memberof CreateNotificationRequest
     */
    'promotionId': string;
}


/**
 * 
 * @export
 * @interface CreateProducerRequest
 */
export interface CreateProducerRequest {
    /**
     * コーディネータID
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'coordinatorId': string;
    /**
     * 姓(16文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'lastname': string;
    /**
     * 名(16文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'firstname': string;
    /**
     * 姓(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'firstnameKana': string;
    /**
     * 生産者名(64文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'username': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'phoneNumber': string;
    /**
     * 郵便番号(ハイフンなし)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof CreateProducerRequest
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村(32文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'city': string;
    /**
     * 町名・番地(64文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'addressLine1': string;
    /**
     * ビル名・号室など(64文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'addressLine2': string;
    /**
     * プロフィール(2000文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'profile': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'thumbnailUrl': string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'headerUrl': string;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'promotionVideoUrl': string;
    /**
     * 購入者動画URL
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'bonusVideoUrl': string;
    /**
     * Instagramアカウント(30文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'instagramId': string;
    /**
     * Facebookアカウント(50文字まで)
     * @type {string}
     * @memberof CreateProducerRequest
     */
    'facebookId': string;
}


/**
 * 
 * @export
 * @interface CreateProductRequest
 */
export interface CreateProductRequest {
    /**
     * 商品名(128文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'name': string;
    /**
     * 商品説明(20000文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'description': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof CreateProductRequest
     */
    'public': boolean;
    /**
     * コーディネータID
     * @type {string}
     * @memberof CreateProductRequest
     */
    'coordinatorId': string;
    /**
     * 生産者ID
     * @type {string}
     * @memberof CreateProductRequest
     */
    'producerId': string;
    /**
     * 品目ID
     * @type {string}
     * @memberof CreateProductRequest
     */
    'productTypeId': string;
    /**
     * 商品タグ一覧
     * @type {Array<string>}
     * @memberof CreateProductRequest
     */
    'productTagIds': Array<string>;
    /**
     * メディア一覧(8つまで)
     * @type {Array<CreateProductRequestMediaInner>}
     * @memberof CreateProductRequest
     */
    'media': Array<CreateProductRequestMediaInner>;
    /**
     * 販売価格(0以上)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'price': number;
    /**
     * 原価(0以上)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'cost': number;
    /**
     * 在庫数(0以上)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'inventory': number;
    /**
     * 重量(0以上,kg単位:少数第1位まで)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'weight': number;
    /**
     * 数量単位(16文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'itemUnit': string;
    /**
     * 数量単位説明(64文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'itemDescription': string;
    /**
     * 
     * @type {DeliveryType}
     * @memberof CreateProductRequest
     */
    'deliveryType': DeliveryType;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'recommendedPoint1': string;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'recommendedPoint2': string;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'recommendedPoint3': string;
    /**
     * 賞味期限(単位:日,0以上)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'expirationDate': number;
    /**
     * 
     * @type {StorageMethodType}
     * @memberof CreateProductRequest
     */
    'storageMethodType': StorageMethodType;
    /**
     * 箱の占有率(サイズ:60)(0以上,100以下)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'box60Rate': number;
    /**
     * 箱の占有率(サイズ:80)(0以上,100以下)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'box80Rate': number;
    /**
     * 箱の占有率(サイズ:100)(0以上,100以下)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'box100Rate': number;
    /**
     * 
     * @type {Prefecture}
     * @memberof CreateProductRequest
     */
    'originPrefectureCode': Prefecture;
    /**
     * 原産地(市区町村)(32文字まで)
     * @type {string}
     * @memberof CreateProductRequest
     */
    'originCity': string;
    /**
     * 販売開始日時 (unixtime)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'startAt': number;
    /**
     * 販売終了日時 (unixtime)
     * @type {number}
     * @memberof CreateProductRequest
     */
    'endAt': number;
}


/**
 * 
 * @export
 * @interface CreateProductRequestMediaInner
 */
export interface CreateProductRequestMediaInner {
    /**
     * メディアURL
     * @type {string}
     * @memberof CreateProductRequestMediaInner
     */
    'url': string;
    /**
     * サムネイルとして使用(1つまで)
     * @type {boolean}
     * @memberof CreateProductRequestMediaInner
     */
    'isThumbnail': boolean;
}
/**
 * 
 * @export
 * @interface CreateProductTagRequest
 */
export interface CreateProductTagRequest {
    /**
     * 商品タグ名(32文字まで)
     * @type {string}
     * @memberof CreateProductTagRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateProductTypeRequest
 */
export interface CreateProductTypeRequest {
    /**
     * 品目名(32文字まで)
     * @type {string}
     * @memberof CreateProductTypeRequest
     */
    'name': string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof CreateProductTypeRequest
     */
    'iconUrl': string;
}
/**
 * 
 * @export
 * @interface CreatePromotionRequest
 */
export interface CreatePromotionRequest {
    /**
     * タイトル(200文字まで)
     * @type {string}
     * @memberof CreatePromotionRequest
     */
    'title': string;
    /**
     * 説明(2000文字まで)
     * @type {string}
     * @memberof CreatePromotionRequest
     */
    'description': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof CreatePromotionRequest
     */
    'public': boolean;
    /**
     * 
     * @type {DiscountType}
     * @memberof CreatePromotionRequest
     */
    'discountType': DiscountType;
    /**
     * 割引額(単位:円/%,0以上)
     * @type {number}
     * @memberof CreatePromotionRequest
     */
    'discountRate': number;
    /**
     * クーポンコード(8文字,使用可能文字:半角英数字)
     * @type {string}
     * @memberof CreatePromotionRequest
     */
    'code': string;
    /**
     * クーポン利用可能開始日時(unixtime)
     * @type {number}
     * @memberof CreatePromotionRequest
     */
    'startAt': number;
    /**
     * クーポン利用可能終了日時(unixtime)
     * @type {number}
     * @memberof CreatePromotionRequest
     */
    'endAt': number;
}


/**
 * 
 * @export
 * @interface CreateScheduleRequest
 */
export interface CreateScheduleRequest {
    /**
     * コーディネーターID
     * @type {string}
     * @memberof CreateScheduleRequest
     */
    'coordinatorId': string;
    /**
     * タイトル(128文字まで)
     * @type {string}
     * @memberof CreateScheduleRequest
     */
    'title': string;
    /**
     * 説明(20000文字まで)
     * @type {string}
     * @memberof CreateScheduleRequest
     */
    'description': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof CreateScheduleRequest
     */
    'thumbnailUrl': string;
    /**
     * 蓋絵URL
     * @type {string}
     * @memberof CreateScheduleRequest
     */
    'imageUrl': string;
    /**
     * オープニングURL
     * @type {string}
     * @memberof CreateScheduleRequest
     */
    'openingVideoUrl': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof CreateScheduleRequest
     */
    'public': boolean;
    /**
     * マルシェ開始日時
     * @type {number}
     * @memberof CreateScheduleRequest
     */
    'startAt': number;
    /**
     * マルシェ終了日時
     * @type {number}
     * @memberof CreateScheduleRequest
     */
    'endAt': number;
}
/**
 * 
 * @export
 * @interface CreateShippingRate
 */
export interface CreateShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof CreateShippingRate
     */
    'name': string;
    /**
     * 配送料金(100万未満)
     * @type {number}
     * @memberof CreateShippingRate
     */
    'price': number;
    /**
     * 対象都道府県コード一覧
     * @type {Array<Prefecture>}
     * @memberof CreateShippingRate
     */
    'prefectureCodes': Array<Prefecture>;
}
/**
 * 
 * @export
 * @interface CreateShippingRequest
 */
export interface CreateShippingRequest {
    /**
     * 配送設定名(64文字まで)
     * @type {string}
     * @memberof CreateShippingRequest
     */
    'name': string;
    /**
     * コーディネータID(必須)
     * @type {string}
     * @memberof CreateShippingRequest
     */
    'coordinatorId': string;
    /**
     * デフォルト設定
     * @type {boolean}
     * @memberof CreateShippingRequest
     */
    'isDefault': boolean;
    /**
     * 箱サイズ60の通常配送料一覧(すべての都道府県の設定が必須)
     * @type {Array<CreateShippingRate>}
     * @memberof CreateShippingRequest
     */
    'box60Rates': Array<CreateShippingRate>;
    /**
     * 箱サイズ60の冷蔵便追加配送料(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'box60Refrigerated': number;
    /**
     * 箱サイズ60の冷凍便追加配送料(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'box60Frozen': number;
    /**
     * 箱サイズ80の通常配送料一覧(すべての都道府県の設定が必須)
     * @type {Array<CreateShippingRate>}
     * @memberof CreateShippingRequest
     */
    'box80Rates': Array<CreateShippingRate>;
    /**
     * 箱サイズ80の冷蔵便追加配送料(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'box80Refrigerated': number;
    /**
     * 箱サイズ80の冷凍便追加配送料(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'box80Frozen': number;
    /**
     * 箱サイズ100の通常配送料一覧(すべての都道府県の設定が必須)
     * @type {Array<CreateShippingRate>}
     * @memberof CreateShippingRequest
     */
    'box100Rates': Array<CreateShippingRate>;
    /**
     * 箱サイズ100の冷蔵便追加配送料(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'box100Refrigerated': number;
    /**
     * 箱サイズ100の冷凍便追加配送料(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'box100Frozen': number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof CreateShippingRequest
     */
    'hasFreeShipping': boolean;
    /**
     * 送料無料になる金額(100万未満)
     * @type {number}
     * @memberof CreateShippingRequest
     */
    'freeShippingRates': number;
}
/**
 * 
 * @export
 * @interface CreateThreadRequest
 */
export interface CreateThreadRequest {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof CreateThreadRequest
     */
    'contactId': string;
    /**
     * 送信者ID
     * @type {string}
     * @memberof CreateThreadRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {ContactUserType}
     * @memberof CreateThreadRequest
     */
    'userType': ContactUserType;
    /**
     * 会話内容
     * @type {string}
     * @memberof CreateThreadRequest
     */
    'content': string;
}


/**
 * 配送方法
 * @export
 * @enum {string}
 */

export const DeliveryType = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 通常便
    */
    NORMAL: 1,
    /**
    * 冷蔵便
    */
    REFRIGERATED: 2,
    /**
    * 冷凍便
    */
    FROZEN: 3
} as const;

export type DeliveryType = typeof DeliveryType[keyof typeof DeliveryType];


/**
 * 割引計算方法
 * @export
 * @enum {string}
 */

export const DiscountType = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 固定額(円)
    */
    AMOUNT: 1,
    /**
    * 料率計算(%)
    */
    RATE: 2,
    /**
    * 送料無料
    */
    FREE_SHIPPING: 3
} as const;

export type DiscountType = typeof DiscountType[keyof typeof DiscountType];


/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * ステータスコード
     * @type {number}
     * @memberof ErrorResponse
     */
    'status': number;
    /**
     * エラー概要
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * エラー詳細
     * @type {string}
     * @memberof ErrorResponse
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface ForgotAuthPasswordRequest
 */
export interface ForgotAuthPasswordRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof ForgotAuthPasswordRequest
     */
    'email': string;
}
/**
 * 配送状況
 * @export
 * @enum {string}
 */

export const FulfillmentStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 未発送
    */
    UNFULFILLED: 1,
    /**
    * 発送済み
    */
    FULFILLED: 2
} as const;

export type FulfillmentStatus = typeof FulfillmentStatus[keyof typeof FulfillmentStatus];


/**
 * 画像サイズ
 * @export
 * @enum {string}
 */

export const ImageSize = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 小:240px
    */
    SMALL: 1,
    /**
    * 中:675px
    */
    MEDIUM: 2,
    /**
    * 高:900px
    */
    LARGE: 3
} as const;

export type ImageSize = typeof ImageSize[keyof typeof ImageSize];


/**
 * マルシェタイムテーブル情報
 * @export
 * @interface Live
 */
export interface Live {
    /**
     * ライブID
     * @type {string}
     * @memberof Live
     */
    'id': string;
    /**
     * マルシェ開催スケジュールID
     * @type {string}
     * @memberof Live
     */
    'scheduleId': string;
    /**
     * 生産者ID
     * @type {string}
     * @memberof Live
     */
    'producerId': string;
    /**
     * 商品一覧
     * @type {Array<string>}
     * @memberof Live
     */
    'productIds': Array<string>;
    /**
     * コメント
     * @type {string}
     * @memberof Live
     */
    'comment': string;
    /**
     * ライブ開始予定日時 (unixtime)
     * @type {number}
     * @memberof Live
     */
    'startAt': number;
    /**
     * ライブ終了予定日時 (unixtime)
     * @type {number}
     * @memberof Live
     */
    'endAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Live
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Live
     */
    'updatedAt': number;
}
/**
 * 
 * @export
 * @interface LiveResponse
 */
export interface LiveResponse {
    /**
     * 
     * @type {Live}
     * @memberof LiveResponse
     */
    'live': Live;
    /**
     * 
     * @type {Producer}
     * @memberof LiveResponse
     */
    'producer': Producer;
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof LiveResponse
     */
    'products': Array<Product>;
}
/**
 * 
 * @export
 * @interface LivesResponse
 */
export interface LivesResponse {
    /**
     * マルシェタイムテーブル一覧
     * @type {Array<Live>}
     * @memberof LivesResponse
     */
    'lives': Array<Live>;
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof LivesResponse
     */
    'producers': Array<Producer>;
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof LivesResponse
     */
    'products': Array<Product>;
    /**
     * 合計数
     * @type {number}
     * @memberof LivesResponse
     */
    'total': number;
}
/**
 * メッセージ情報
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * メッセージID
     * @type {string}
     * @memberof Message
     */
    'id': string;
    /**
     * 
     * @type {MessageType}
     * @memberof Message
     */
    'type': MessageType;
    /**
     * メッセージ件名
     * @type {string}
     * @memberof Message
     */
    'title': string;
    /**
     * メッセージ内容
     * @type {string}
     * @memberof Message
     */
    'body': string;
    /**
     * 遷移先リンク
     * @type {string}
     * @memberof Message
     */
    'link': string;
    /**
     * 既読フラグ
     * @type {boolean}
     * @memberof Message
     */
    'read': boolean;
    /**
     * 受信日時 (unixtime)
     * @type {number}
     * @memberof Message
     */
    'receivedAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Message
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Message
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
    /**
     * 
     * @type {Message}
     * @memberof MessageResponse
     */
    'message': Message;
}
/**
 * メッセージ種別
 * @export
 * @enum {string}
 */

export const MessageType = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * お知らせ
    */
    NOTIFICATION: 1
} as const;

export type MessageType = typeof MessageType[keyof typeof MessageType];


/**
 * 
 * @export
 * @interface MessagesResponse
 */
export interface MessagesResponse {
    /**
     * メッセージ一覧
     * @type {Array<Message>}
     * @memberof MessagesResponse
     */
    'messages': Array<Message>;
    /**
     * 合計数
     * @type {number}
     * @memberof MessagesResponse
     */
    'total': number;
}
/**
 * お知らせ情報
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * お知らせID
     * @type {string}
     * @memberof Notification
     */
    'id': string;
    /**
     * 
     * @type {NotificationStatus}
     * @memberof Notification
     */
    'status': NotificationStatus;
    /**
     * 
     * @type {NotificationType}
     * @memberof Notification
     */
    'type': NotificationType;
    /**
     * 通知対象一覧
     * @type {Array<NotificationTarget>}
     * @memberof Notification
     */
    'targets': Array<NotificationTarget>;
    /**
     * タイトル
     * @type {string}
     * @memberof Notification
     */
    'title': string;
    /**
     * 本文
     * @type {string}
     * @memberof Notification
     */
    'body': string;
    /**
     * 備考
     * @type {string}
     * @memberof Notification
     */
    'note': string;
    /**
     * 掲載日時 (unixtime)
     * @type {number}
     * @memberof Notification
     */
    'publishedAt': number;
    /**
     * プロモーションID
     * @type {string}
     * @memberof Notification
     */
    'promotionId': string;
    /**
     * 登録者ID
     * @type {string}
     * @memberof Notification
     */
    'createdBy': string;
    /**
     * 更新者ID
     * @type {string}
     * @memberof Notification
     */
    'updatedBy': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Notification
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Notification
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface NotificationResponse
 */
export interface NotificationResponse {
    /**
     * 
     * @type {Notification}
     * @memberof NotificationResponse
     */
    'notification': Notification;
    /**
     * 
     * @type {Admin}
     * @memberof NotificationResponse
     */
    'admin': Admin;
}
/**
 * お知らせ状態
 * @export
 * @enum {string}
 */

export const NotificationStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 通知前
    */
    WAITING: 1,
    /**
    * 通知済み
    */
    NOTIFIED: 2
} as const;

export type NotificationStatus = typeof NotificationStatus[keyof typeof NotificationStatus];


/**
 * 通知対象種別
 * @export
 * @enum {string}
 */

export const NotificationTarget = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 購入者
    */
    USERS: 1,
    /**
    * 生産者
    */
    PRODUCERS: 2,
    /**
    * コーディネータ
    */
    COORDINATORS: 3,
    /**
    * 管理者
    */
    ADMINISTRATORS: 4
} as const;

export type NotificationTarget = typeof NotificationTarget[keyof typeof NotificationTarget];


/**
 * お知らせ種別
 * @export
 * @enum {string}
 */

export const NotificationType = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * その他
    */
    OTHER: 1,
    /**
    * システム関連
    */
    SYSTEM: 2,
    /**
    * ライブ関連
    */
    LIVE: 3,
    /**
    * セール関連
    */
    PROMOTION: 4
} as const;

export type NotificationType = typeof NotificationType[keyof typeof NotificationType];


/**
 * 
 * @export
 * @interface NotificationsResponse
 */
export interface NotificationsResponse {
    /**
     * お知らせ一覧
     * @type {Array<Notification>}
     * @memberof NotificationsResponse
     */
    'notifications': Array<Notification>;
    /**
     * 作成者一覧
     * @type {Array<Admin>}
     * @memberof NotificationsResponse
     */
    'admins': Array<Admin>;
    /**
     * 合計数
     * @type {number}
     * @memberof NotificationsResponse
     */
    'total': number;
}
/**
 * 注文キャンセル理由
 * @export
 * @enum {string}
 */

export const OrderRefundType = {
    /**
    * 不明
    */
    UNKNOWN: 0
} as const;

export type OrderRefundType = typeof OrderRefundType[keyof typeof OrderRefundType];


/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 注文ID
     * @type {string}
     * @memberof OrderResponse
     */
    'id': string;
    /**
     * 開催スケジュールID
     * @type {string}
     * @memberof OrderResponse
     */
    'scheduleId': string;
    /**
     * プロモーションID
     * @type {string}
     * @memberof OrderResponse
     */
    'promotionId': string;
    /**
     * ユーザーID
     * @type {string}
     * @memberof OrderResponse
     */
    'userId': string;
    /**
     * 注文者名
     * @type {string}
     * @memberof OrderResponse
     */
    'userName': string;
    /**
     * 
     * @type {OrderResponsePayment}
     * @memberof OrderResponse
     */
    'payment': OrderResponsePayment;
    /**
     * 
     * @type {OrderResponseFulfillment}
     * @memberof OrderResponse
     */
    'fulfillment': OrderResponseFulfillment;
    /**
     * 
     * @type {OrderResponseRefund}
     * @memberof OrderResponse
     */
    'refund': OrderResponseRefund;
    /**
     * 注文商品一覧
     * @type {Array<OrderResponseItemsInner>}
     * @memberof OrderResponse
     */
    'items': Array<OrderResponseItemsInner>;
    /**
     * 注文日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    'orderedAt': number;
    /**
     * 支払日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    'paidAt': number;
    /**
     * 配送日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    'deliveredAt': number;
    /**
     * 注文キャンセル日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    'canceledAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    'updatedAt': number;
}
/**
 * 配送情報
 * @export
 * @interface OrderResponseFulfillment
 */
export interface OrderResponseFulfillment {
    /**
     * 伝票番号
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'trackingNumber': string;
    /**
     * 
     * @type {FulfillmentStatus}
     * @memberof OrderResponseFulfillment
     */
    'status': FulfillmentStatus;
    /**
     * 
     * @type {ShippingCarrier}
     * @memberof OrderResponseFulfillment
     */
    'shippingCarrier': ShippingCarrier;
    /**
     * 
     * @type {DeliveryType}
     * @memberof OrderResponseFulfillment
     */
    'shippingMethod': DeliveryType;
    /**
     * 
     * @type {ShippingSize}
     * @memberof OrderResponseFulfillment
     */
    'boxSize': ShippingSize;
    /**
     * 配送先情報ID
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'addressId': string;
    /**
     * 配送先情報 姓
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'lastname': string;
    /**
     * 配送先情報 名
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'firstname': string;
    /**
     * 配送先情報 郵便番号
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof OrderResponseFulfillment
     */
    'prefectureCode': Prefecture;
    /**
     * 配送先情報 市区町村
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'city': string;
    /**
     * 配送先情報 町名・番地
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'addressLine1': string;
    /**
     * 配送先情報 ビル名・号室など
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'addressLine2': string;
    /**
     * 配送先情報 電話番号
     * @type {string}
     * @memberof OrderResponseFulfillment
     */
    'phoneNumber': string;
}


/**
 * 
 * @export
 * @interface OrderResponseItemsInner
 */
export interface OrderResponseItemsInner {
    /**
     * 商品ID
     * @type {string}
     * @memberof OrderResponseItemsInner
     */
    'productId': string;
    /**
     * 商品名
     * @type {string}
     * @memberof OrderResponseItemsInner
     */
    'name': string;
    /**
     * 購入価格
     * @type {number}
     * @memberof OrderResponseItemsInner
     */
    'price': number;
    /**
     * 購入数量
     * @type {number}
     * @memberof OrderResponseItemsInner
     */
    'quantity': number;
    /**
     * 重量(kg,少数第一位まで)
     * @type {number}
     * @memberof OrderResponseItemsInner
     */
    'weight': number;
    /**
     * 
     * @type {Array<CreateProductRequestMediaInner>}
     * @memberof OrderResponseItemsInner
     */
    'media': Array<CreateProductRequestMediaInner>;
}
/**
 * 支払い情報
 * @export
 * @interface OrderResponsePayment
 */
export interface OrderResponsePayment {
    /**
     * 取引ID
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'transactionId': string;
    /**
     * 決済手段ID
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'methodId': string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof OrderResponsePayment
     */
    'methodType': PaymentMethodType;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof OrderResponsePayment
     */
    'status': PaymentStatus;
    /**
     * 購入金額
     * @type {number}
     * @memberof OrderResponsePayment
     */
    'subtotal': number;
    /**
     * 割引金額
     * @type {number}
     * @memberof OrderResponsePayment
     */
    'discount': number;
    /**
     * 配送料金
     * @type {number}
     * @memberof OrderResponsePayment
     */
    'shippingFee': number;
    /**
     * 消費税
     * @type {number}
     * @memberof OrderResponsePayment
     */
    'tax': number;
    /**
     * 支払い合計金額
     * @type {number}
     * @memberof OrderResponsePayment
     */
    'total': number;
    /**
     * 請求先情報ID
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'addressId': string;
    /**
     * 請求先情報 姓
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'lastname': string;
    /**
     * 請求先情報 名
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'firstname': string;
    /**
     * 請求先情報 郵便番号
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof OrderResponsePayment
     */
    'prefectureCode': Prefecture;
    /**
     * 請求先情報 市区町村
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'city': string;
    /**
     * 請求先情報 町名・番地
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'addressLine1': string;
    /**
     * 請求先情報 ビル名・号室など
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'addressLine2': string;
    /**
     * 請求先情報 電話番号
     * @type {string}
     * @memberof OrderResponsePayment
     */
    'phoneNumber': string;
}


/**
 * 注文キャンセル情報
 * @export
 * @interface OrderResponseRefund
 */
export interface OrderResponseRefund {
    /**
     * 注文キャンセルフラグ
     * @type {boolean}
     * @memberof OrderResponseRefund
     */
    'canceled': boolean;
    /**
     * 
     * @type {OrderRefundType}
     * @memberof OrderResponseRefund
     */
    'type': OrderRefundType;
    /**
     * 注文キャンセル理由詳細
     * @type {string}
     * @memberof OrderResponseRefund
     */
    'reason': string;
    /**
     * 返金金額
     * @type {number}
     * @memberof OrderResponseRefund
     */
    'total': number;
}


/**
 * 
 * @export
 * @interface OrdersResponse
 */
export interface OrdersResponse {
    /**
     * 注文一覧
     * @type {Array<object>}
     * @memberof OrdersResponse
     */
    'orders': Array<object>;
    /**
     * 合計数
     * @type {number}
     * @memberof OrdersResponse
     */
    'total': number;
}
/**
 * 決済手段
 * @export
 * @enum {string}
 */

export const PaymentMethodType = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 代引き支払い
    */
    CASH: 1,
    /**
    * クレジットカード払い
    */
    CARD: 2
} as const;

export type PaymentMethodType = typeof PaymentMethodType[keyof typeof PaymentMethodType];


/**
 * 支払い状況
 * @export
 * @enum {string}
 */

export const PaymentStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 未払い
    */
    UNPAID: 1,
    /**
    * 保留中
    */
    PENDING: 2,
    /**
    * オーソリ済み
    */
    AUTHORIZED: 3,
    /**
    * 支払い済み
    */
    PAID: 4,
    /**
    * 返金済み
    */
    REFUNDED: 5,
    /**
    * 期限切れ
    */
    EXPIRED: 6
} as const;

export type PaymentStatus = typeof PaymentStatus[keyof typeof PaymentStatus];


/**
 * 
 * @export
 * @interface PostalCodeResponse
 */
export interface PostalCodeResponse {
    /**
     * 郵便番号
     * @type {string}
     * @memberof PostalCodeResponse
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof PostalCodeResponse
     */
    'prefectureCode': Prefecture;
    /**
     * 都道府県名
     * @type {string}
     * @memberof PostalCodeResponse
     */
    'prefecture': string;
    /**
     * 市区町村名
     * @type {string}
     * @memberof PostalCodeResponse
     */
    'city': string;
    /**
     * 町域名
     * @type {string}
     * @memberof PostalCodeResponse
     */
    'town': string;
}


/**
 * 都道府県コード
 * @export
 * @enum {string}
 */

export const Prefecture = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 北海道
    */
    HOKKAIDO: 1,
    /**
    * 青森県
    */
    AOMORI: 2,
    /**
    * 岩手県
    */
    IWATE: 3,
    /**
    * 宮城県
    */
    MIYAGI: 4,
    /**
    * 秋田県
    */
    AKITA: 5,
    /**
    * 山形県
    */
    YAMAGATA: 6,
    /**
    * 福島県
    */
    FUKUSHIMA: 7,
    /**
    * 茨城県
    */
    IBARAKI: 8,
    /**
    * 栃木県
    */
    TOCHIGI: 9,
    /**
    * 群馬県
    */
    GUNMA: 10,
    /**
    * 埼玉県
    */
    SAITAMA: 11,
    /**
    * 千葉県
    */
    CHIBA: 12,
    /**
    * 東京都
    */
    TOKYO: 13,
    /**
    * 神奈川県
    */
    KANAGAWA: 14,
    /**
    * 新潟県
    */
    NIIGATA: 15,
    /**
    * 富山県
    */
    TOYAMA: 16,
    /**
    * 石川県
    */
    ISHIKAWA: 17,
    /**
    * 福井県
    */
    FUKUI: 18,
    /**
    * 山梨県
    */
    YAMANASHI: 19,
    /**
    * 長野県
    */
    NAGANO: 20,
    /**
    * 岐阜県
    */
    GIFU: 21,
    /**
    * 静岡県
    */
    SHIZUOKA: 22,
    /**
    * 愛知県
    */
    AICHI: 23,
    /**
    * 三重県
    */
    MIE: 24,
    /**
    * 滋賀県
    */
    SHIGA: 25,
    /**
    * 京都府
    */
    KYOTO: 26,
    /**
    * 大坂府
    */
    OSAKA: 27,
    /**
    * 兵庫県
    */
    HYOGO: 28,
    /**
    * 奈良県
    */
    NARA: 29,
    /**
    * 和歌山県
    */
    WAKAYAMA: 30,
    /**
    * 鳥取県
    */
    TOTTORI: 31,
    /**
    * 島根県
    */
    SHIMANE: 32,
    /**
    * 岡山県
    */
    OKAYAMA: 33,
    /**
    * 広島県
    */
    HIROSHIMA: 34,
    /**
    * 山口県
    */
    YAMAGUCHI: 35,
    /**
    * 徳島県
    */
    TOKUSHIMA: 36,
    /**
    * 香川県
    */
    KAGAWA: 37,
    /**
    * 愛媛県
    */
    EHIME: 38,
    /**
    * 高知県
    */
    KOCHI: 39,
    /**
    * 福岡県
    */
    FUKUOKA: 40,
    /**
    * 佐賀県
    */
    SAGA: 41,
    /**
    * 長崎県
    */
    NAGASAKI: 42,
    /**
    * 熊本県
    */
    KUMAMOTO: 43,
    /**
    * 大分県
    */
    OITA: 44,
    /**
    * 宮崎県
    */
    MIYAZAKI: 45,
    /**
    * 鹿児島県
    */
    KAGOSHIMA: 46,
    /**
    * 沖縄県
    */
    OKINAWA: 47
} as const;

export type Prefecture = typeof Prefecture[keyof typeof Prefecture];


/**
 * 生産者情報
 * @export
 * @interface Producer
 */
export interface Producer {
    /**
     * 生産者ID
     * @type {string}
     * @memberof Producer
     */
    'id': string;
    /**
     * 
     * @type {AdminStatus}
     * @memberof Producer
     */
    'status': AdminStatus;
    /**
     * 担当コーディネータID
     * @type {string}
     * @memberof Producer
     */
    'coordinatorId': string;
    /**
     * 姓
     * @type {string}
     * @memberof Producer
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof Producer
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof Producer
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof Producer
     */
    'firstnameKana': string;
    /**
     * 生産者名
     * @type {string}
     * @memberof Producer
     */
    'username': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Producer
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof Producer
     */
    'phoneNumber': string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof Producer
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof Producer
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村
     * @type {string}
     * @memberof Producer
     */
    'city': string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof Producer
     */
    'addressLine1': string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof Producer
     */
    'addressLine2': string;
    /**
     * プロフィール
     * @type {string}
     * @memberof Producer
     */
    'profile': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof Producer
     */
    'thumbnailUrl': string;
    /**
     * リサイズ済みサムネイルURL一覧
     * @type {Array<CoordinatorThumbnailsInner>}
     * @memberof Producer
     */
    'thumbnails': Array<CoordinatorThumbnailsInner>;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof Producer
     */
    'headerUrl': string;
    /**
     * リサイズ済みヘッダー画像URL一覧
     * @type {Array<CoordinatorHeadersInner>}
     * @memberof Producer
     */
    'headers': Array<CoordinatorHeadersInner>;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof Producer
     */
    'promotionVideoUrl': string;
    /**
     * 購入特典動画URL
     * @type {string}
     * @memberof Producer
     */
    'bonusVideoUrl': string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof Producer
     */
    'instagramId': string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof Producer
     */
    'facebookId': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Producer
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Producer
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface ProducerResponse
 */
export interface ProducerResponse {
    /**
     * 
     * @type {Producer}
     * @memberof ProducerResponse
     */
    'producer': Producer;
    /**
     * 
     * @type {Coordinator}
     * @memberof ProducerResponse
     */
    'coordinator': Coordinator;
}
/**
 * 
 * @export
 * @interface ProducersResponse
 */
export interface ProducersResponse {
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof ProducersResponse
     */
    'producers': Array<Producer>;
    /**
     * 担当コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof ProducersResponse
     */
    'coordinators': Array<Coordinator>;
    /**
     * 合計数
     * @type {number}
     * @memberof ProducersResponse
     */
    'total': number;
}
/**
 * 商品情報
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 商品ID
     * @type {string}
     * @memberof Product
     */
    'id': string;
    /**
     * 商品名
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * 商品説明
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof Product
     */
    'public': boolean;
    /**
     * 
     * @type {ProductStatus}
     * @memberof Product
     */
    'status': ProductStatus;
    /**
     * コーディネータID
     * @type {string}
     * @memberof Product
     */
    'coordinatorId': string;
    /**
     * 生産者ID
     * @type {string}
     * @memberof Product
     */
    'producerId': string;
    /**
     * 商品種別ID
     * @type {string}
     * @memberof Product
     */
    'categoryId': string;
    /**
     * 品目ID
     * @type {string}
     * @memberof Product
     */
    'productTypeId': string;
    /**
     * 商品タグ一覧
     * @type {Array<string>}
     * @memberof Product
     */
    'productTagIds': Array<string>;
    /**
     * 
     * @type {Array<ProductMediaInner>}
     * @memberof Product
     */
    'media': Array<ProductMediaInner>;
    /**
     * 販売価格
     * @type {number}
     * @memberof Product
     */
    'price': number;
    /**
     * 原価
     * @type {number}
     * @memberof Product
     */
    'cost': number;
    /**
     * 在庫数
     * @type {number}
     * @memberof Product
     */
    'inventory': number;
    /**
     * 重量(kg:少数第1位まで)
     * @type {number}
     * @memberof Product
     */
    'weight': number;
    /**
     * 数量単位
     * @type {string}
     * @memberof Product
     */
    'itemUnit': string;
    /**
     * 数量単位説明
     * @type {string}
     * @memberof Product
     */
    'itemDescription': string;
    /**
     * 
     * @type {DeliveryType}
     * @memberof Product
     */
    'deliveryType': DeliveryType;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof Product
     */
    'recommendedPoint1': string;
    /**
     * おすすめポイント2(128文字まで)
     * @type {string}
     * @memberof Product
     */
    'recommendedPoint2': string;
    /**
     * おすすめポイント3(128文字まで)
     * @type {string}
     * @memberof Product
     */
    'recommendedPoint3': string;
    /**
     * 賞味期限(単位:日)
     * @type {number}
     * @memberof Product
     */
    'expirationDate': number;
    /**
     * 
     * @type {StorageMethodType}
     * @memberof Product
     */
    'storageMethodType': StorageMethodType;
    /**
     * 箱の占有率(サイズ:60)
     * @type {number}
     * @memberof Product
     */
    'box60Rate': number;
    /**
     * 箱の占有率(サイズ:80)
     * @type {number}
     * @memberof Product
     */
    'box80Rate': number;
    /**
     * 箱の占有率(サイズ:100)
     * @type {number}
     * @memberof Product
     */
    'box100Rate': number;
    /**
     * 
     * @type {Prefecture}
     * @memberof Product
     */
    'originPrefectureCode': Prefecture;
    /**
     * 原産地(市区町村)
     * @type {string}
     * @memberof Product
     */
    'originCity': string;
    /**
     * 販売開始日時 (unixtime)
     * @type {number}
     * @memberof Product
     */
    'startAt': number;
    /**
     * 販売終了日時 (unixtime)
     * @type {number}
     * @memberof Product
     */
    'endAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Product
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Product
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface ProductMediaInner
 */
export interface ProductMediaInner {
    /**
     * メディアURL
     * @type {string}
     * @memberof ProductMediaInner
     */
    'url': string;
    /**
     * サムネイルとして使用(1つまで)
     * @type {boolean}
     * @memberof ProductMediaInner
     */
    'isThumbnail': boolean;
    /**
     * リサイズ済み画像URL一覧
     * @type {Array<ProductMediaInnerImagesInner>}
     * @memberof ProductMediaInner
     */
    'images': Array<ProductMediaInnerImagesInner>;
}
/**
 * 
 * @export
 * @interface ProductMediaInnerImagesInner
 */
export interface ProductMediaInnerImagesInner {
    /**
     * リサイズ済み画像URL
     * @type {string}
     * @memberof ProductMediaInnerImagesInner
     */
    'url': string;
    /**
     * 
     * @type {ImageSize}
     * @memberof ProductMediaInnerImagesInner
     */
    'size': ImageSize;
}


/**
 * 
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * 
     * @type {Product}
     * @memberof ProductResponse
     */
    'product': Product;
    /**
     * 
     * @type {Coordinator}
     * @memberof ProductResponse
     */
    'coordinator': Coordinator;
    /**
     * 
     * @type {Producer}
     * @memberof ProductResponse
     */
    'producer': Producer;
    /**
     * 
     * @type {Category}
     * @memberof ProductResponse
     */
    'category': Category;
    /**
     * 
     * @type {ProductType}
     * @memberof ProductResponse
     */
    'productType': ProductType;
    /**
     * 商品タグ一覧
     * @type {Array<ProductTag>}
     * @memberof ProductResponse
     */
    'productTags': Array<ProductTag>;
}
/**
 * 商品販売ステータス
 * @export
 * @enum {string}
 */

export const ProductStatus = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 非公開
    */
    PRIVATE: 1,
    /**
    * 予約受付中
    */
    PRESALE: 2,
    /**
    * 販売中
    */
    FOR_SALE: 3,
    /**
    * 販売期間外
    */
    OUT_OF_SALES: 4
} as const;

export type ProductStatus = typeof ProductStatus[keyof typeof ProductStatus];


/**
 * 商品タグ情報
 * @export
 * @interface ProductTag
 */
export interface ProductTag {
    /**
     * 商品タグID
     * @type {string}
     * @memberof ProductTag
     */
    'id': string;
    /**
     * 商品タグ名(32文字まで)
     * @type {string}
     * @memberof ProductTag
     */
    'name': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof ProductTag
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof ProductTag
     */
    'updatedAt': number;
}
/**
 * 
 * @export
 * @interface ProductTagResponse
 */
export interface ProductTagResponse {
    /**
     * 
     * @type {ProductTag}
     * @memberof ProductTagResponse
     */
    'productTag': ProductTag;
}
/**
 * 
 * @export
 * @interface ProductTagsResponse
 */
export interface ProductTagsResponse {
    /**
     * 品目一覧
     * @type {Array<ProductTag>}
     * @memberof ProductTagsResponse
     */
    'productTags': Array<ProductTag>;
    /**
     * 合計数
     * @type {number}
     * @memberof ProductTagsResponse
     */
    'total': number;
}
/**
 * 品目情報
 * @export
 * @interface ProductType
 */
export interface ProductType {
    /**
     * 品目ID
     * @type {string}
     * @memberof ProductType
     */
    'id': string;
    /**
     * 品目名
     * @type {string}
     * @memberof ProductType
     */
    'name': string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof ProductType
     */
    'iconUrl': string;
    /**
     * リサイズ済みアイコンURL一覧
     * @type {Array<ProductTypeIconsInner>}
     * @memberof ProductType
     */
    'icons': Array<ProductTypeIconsInner>;
    /**
     * 商品種別ID
     * @type {string}
     * @memberof ProductType
     */
    'categoryId': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof ProductType
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof ProductType
     */
    'updatedAt': number;
}
/**
 * 
 * @export
 * @interface ProductTypeIconsInner
 */
export interface ProductTypeIconsInner {
    /**
     * リサイズ済みアイコンURL
     * @type {string}
     * @memberof ProductTypeIconsInner
     */
    'url': string;
    /**
     * 
     * @type {ImageSize}
     * @memberof ProductTypeIconsInner
     */
    'size': ImageSize;
}


/**
 * 
 * @export
 * @interface ProductTypeResponse
 */
export interface ProductTypeResponse {
    /**
     * 
     * @type {ProductType}
     * @memberof ProductTypeResponse
     */
    'productType': ProductType;
    /**
     * 
     * @type {Category}
     * @memberof ProductTypeResponse
     */
    'category': Category;
}
/**
 * 
 * @export
 * @interface ProductTypesResponse
 */
export interface ProductTypesResponse {
    /**
     * 品目一覧
     * @type {Array<ProductType>}
     * @memberof ProductTypesResponse
     */
    'productTypes': Array<ProductType>;
    /**
     * 商品種別一覧
     * @type {Array<Category>}
     * @memberof ProductTypesResponse
     */
    'categories': Array<Category>;
    /**
     * 合計数
     * @type {number}
     * @memberof ProductTypesResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface ProductsResponse
 */
export interface ProductsResponse {
    /**
     * 商品一覧
     * @type {Array<Product>}
     * @memberof ProductsResponse
     */
    'products': Array<Product>;
    /**
     * コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof ProductsResponse
     */
    'coordinators': Array<Coordinator>;
    /**
     * 生産者一覧
     * @type {Array<Producer>}
     * @memberof ProductsResponse
     */
    'producers': Array<Producer>;
    /**
     * 商品種別一覧
     * @type {Array<Category>}
     * @memberof ProductsResponse
     */
    'categories': Array<Category>;
    /**
     * 品目一覧
     * @type {Array<ProductType>}
     * @memberof ProductsResponse
     */
    'productTypes': Array<ProductType>;
    /**
     * 商品タグ一覧
     * @type {Array<ProductTag>}
     * @memberof ProductsResponse
     */
    'productTags': Array<ProductTag>;
    /**
     * 合計数
     * @type {number}
     * @memberof ProductsResponse
     */
    'total': number;
}
/**
 * プロモーション情報
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * プロモーションID
     * @type {string}
     * @memberof Promotion
     */
    'id': string;
    /**
     * タイトル
     * @type {string}
     * @memberof Promotion
     */
    'title': string;
    /**
     * 詳細説明
     * @type {string}
     * @memberof Promotion
     */
    'description': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof Promotion
     */
    'public': boolean;
    /**
     * 
     * @type {DiscountType}
     * @memberof Promotion
     */
    'discountType': DiscountType;
    /**
     * 割引額(単位:円/%)
     * @type {number}
     * @memberof Promotion
     */
    'discountRate': number;
    /**
     * クーポンコード
     * @type {string}
     * @memberof Promotion
     */
    'code': string;
    /**
     * クーポン利用可能開始日時(unixtime)
     * @type {number}
     * @memberof Promotion
     */
    'startAt': number;
    /**
     * クーポン利用可能終了日時(unixtime)
     * @type {number}
     * @memberof Promotion
     */
    'endAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Promotion
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Promotion
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface PromotionResponse
 */
export interface PromotionResponse {
    /**
     * 
     * @type {Promotion}
     * @memberof PromotionResponse
     */
    'promotion': Promotion;
}
/**
 * 
 * @export
 * @interface PromotionsResponse
 */
export interface PromotionsResponse {
    /**
     * プロモーション一覧
     * @type {Array<Promotion>}
     * @memberof PromotionsResponse
     */
    'promotions': Array<Promotion>;
    /**
     * 合計数
     * @type {number}
     * @memberof PromotionsResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
    /**
     * 更新トークン
     * @type {string}
     * @memberof RefreshAuthTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface RegisterAuthDeviceRequest
 */
export interface RegisterAuthDeviceRequest {
    /**
     * デバイストークン(プッシュ通知用:FCMトークン)
     * @type {string}
     * @memberof RegisterAuthDeviceRequest
     */
    'device': string;
}
/**
 * 
 * @export
 * @interface RelateProducersRequest
 */
export interface RelateProducersRequest {
    /**
     * 関連つける生産者ID一覧 (20件まで)
     * @type {Array<string>}
     * @memberof RelateProducersRequest
     */
    'producerIds': Array<string>;
}
/**
 * 
 * @export
 * @interface ResetAuthPasswordRequest
 */
export interface ResetAuthPasswordRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResetAuthPasswordRequest
     */
    'email': string;
    /**
     * 検証コード
     * @type {string}
     * @memberof ResetAuthPasswordRequest
     */
    'verifyCode': string;
    /**
     * パスワード(8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
     * @type {string}
     * @memberof ResetAuthPasswordRequest
     */
    'password': string;
    /**
     * パスワード(確認用)
     * @type {string}
     * @memberof ResetAuthPasswordRequest
     */
    'passwordConfirmation': string;
}
/**
 * マルシェ開催スケジュール情報
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * マルシェ開催スケジュールID
     * @type {string}
     * @memberof Schedule
     */
    'id': string;
    /**
     * コーディネーターID
     * @type {string}
     * @memberof Schedule
     */
    'coordinatorId': string;
    /**
     * 
     * @type {ScheduleStatus}
     * @memberof Schedule
     */
    'status': ScheduleStatus;
    /**
     * タイトル
     * @type {string}
     * @memberof Schedule
     */
    'title': string;
    /**
     * 説明
     * @type {string}
     * @memberof Schedule
     */
    'description': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof Schedule
     */
    'thumbnailUrl': string;
    /**
     * リサイズ済みサムネイルURL一覧
     * @type {Array<CoordinatorThumbnailsInner>}
     * @memberof Schedule
     */
    'thumbnails': Array<CoordinatorThumbnailsInner>;
    /**
     * ふた絵URL
     * @type {string}
     * @memberof Schedule
     */
    'imageUrl': string;
    /**
     * オープニング動画URL
     * @type {string}
     * @memberof Schedule
     */
    'openingVideoUrl': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof Schedule
     */
    'public': boolean;
    /**
     * 承認フラグ
     * @type {boolean}
     * @memberof Schedule
     */
    'approved': boolean;
    /**
     * ライブ開始日時 (unixtime)
     * @type {number}
     * @memberof Schedule
     */
    'startAt': number;
    /**
     * ライブ終了日時 (unixtime)
     * @type {number}
     * @memberof Schedule
     */
    'endAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Schedule
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Schedule
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface ScheduleResponse
 */
export interface ScheduleResponse {
    /**
     * 
     * @type {Schedule}
     * @memberof ScheduleResponse
     */
    'schedule': Schedule;
    /**
     * 
     * @type {Coordinator}
     * @memberof ScheduleResponse
     */
    'coordinator': Coordinator;
}
/**
 * マルシェ開催状況
 * @export
 * @enum {string}
 */

export const ScheduleStatus = {
    UNKNOWN: 0,
    PRIVATE: 1,
    IN_PROGRESS: 2,
    WAITING: 3,
    LIVE: 4,
    CLOSED: 5
} as const;

export type ScheduleStatus = typeof ScheduleStatus[keyof typeof ScheduleStatus];


/**
 * 
 * @export
 * @interface SchedulesResponse
 */
export interface SchedulesResponse {
    /**
     * マルシェ開催スケジュール一覧
     * @type {Array<Schedule>}
     * @memberof SchedulesResponse
     */
    'schedules': Array<Schedule>;
    /**
     * コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof SchedulesResponse
     */
    'coordinators': Array<Coordinator>;
    /**
     * 合計数
     * @type {number}
     * @memberof SchedulesResponse
     */
    'total': number;
}
/**
 * 配送設定情報
 * @export
 * @interface Shipping
 */
export interface Shipping {
    /**
     * 配送設定ID
     * @type {string}
     * @memberof Shipping
     */
    'id': string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof Shipping
     */
    'coordinatorId': string;
    /**
     * 配送設定名
     * @type {string}
     * @memberof Shipping
     */
    'name': string;
    /**
     * デフォルト設定
     * @type {boolean}
     * @memberof Shipping
     */
    'isDefault': boolean;
    /**
     * 箱サイズ60の通常配送料一覧
     * @type {Array<ShippingRate>}
     * @memberof Shipping
     */
    'box60Rates': Array<ShippingRate>;
    /**
     * 箱サイズ60の冷蔵便追加配送料
     * @type {number}
     * @memberof Shipping
     */
    'box60Refrigerated': number;
    /**
     * 箱サイズ60の冷凍便追加配送料
     * @type {number}
     * @memberof Shipping
     */
    'box60Frozen': number;
    /**
     * 箱サイズ80の通常配送料一覧
     * @type {Array<ShippingRate>}
     * @memberof Shipping
     */
    'box80Rates': Array<ShippingRate>;
    /**
     * 箱サイズ80の冷蔵便追加配送料
     * @type {number}
     * @memberof Shipping
     */
    'box80Refrigerated': number;
    /**
     * 箱サイズ80の冷凍便追加配送料
     * @type {number}
     * @memberof Shipping
     */
    'box80Frozen': number;
    /**
     * 箱サイズ100の通常配送料一覧
     * @type {Array<ShippingRate>}
     * @memberof Shipping
     */
    'box100Rates': Array<ShippingRate>;
    /**
     * 箱サイズ100の冷蔵便追加配送料
     * @type {number}
     * @memberof Shipping
     */
    'box100Refrigerated': number;
    /**
     * 箱サイズ100の冷凍便追加配送料
     * @type {number}
     * @memberof Shipping
     */
    'box100Frozen': number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof Shipping
     */
    'hasFreeShipping': boolean;
    /**
     * 送料無料になる金額
     * @type {number}
     * @memberof Shipping
     */
    'freeShippingRates': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Shipping
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Shipping
     */
    'updatedAt': number;
}
/**
 * 配送会社
 * @export
 * @enum {string}
 */

export const ShippingCarrier = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * ヤマト運輸
    */
    YAMATO: 1,
    /**
    * 佐川急便
    */
    SAGAWA: 2
} as const;

export type ShippingCarrier = typeof ShippingCarrier[keyof typeof ShippingCarrier];


/**
 * 配送料情報
 * @export
 * @interface ShippingRate
 */
export interface ShippingRate {
    /**
     * No.
     * @type {number}
     * @memberof ShippingRate
     */
    'number': number;
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof ShippingRate
     */
    'name': string;
    /**
     * 配送料金
     * @type {number}
     * @memberof ShippingRate
     */
    'price': number;
    /**
     * 対象都道府県コード一覧
     * @type {Array<Prefecture>}
     * @memberof ShippingRate
     */
    'prefectureCodes': Array<Prefecture>;
}
/**
 * 
 * @export
 * @interface ShippingResponse
 */
export interface ShippingResponse {
    /**
     * 
     * @type {Shipping}
     * @memberof ShippingResponse
     */
    'shipping': Shipping;
    /**
     * 
     * @type {Coordinator}
     * @memberof ShippingResponse
     */
    'coordinator': Coordinator;
}
/**
 * 配送時の箱の大きさ
 * @export
 * @enum {string}
 */

export const ShippingSize = {
    /**
    * 不明
    */
    UNKNOWN: 0,
    /**
    * 箱のサイズ:60
    */
    SIZE60: 1,
    /**
    * 箱のサイズ:80
    */
    SIZE80: 2,
    /**
    * 箱のサイズ:100
    */
    SIZE100: 3
} as const;

export type ShippingSize = typeof ShippingSize[keyof typeof ShippingSize];


/**
 * 
 * @export
 * @interface ShippingsResponse
 */
export interface ShippingsResponse {
    /**
     * 配送設定一覧
     * @type {Array<Shipping>}
     * @memberof ShippingsResponse
     */
    'shippings': Array<Shipping>;
    /**
     * コーディネータ一覧
     * @type {Array<Coordinator>}
     * @memberof ShippingsResponse
     */
    'coordinators': Array<Coordinator>;
    /**
     * 合計数
     * @type {number}
     * @memberof ShippingsResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * ユーザー名(メールアドレス)
     * @type {string}
     * @memberof SignInRequest
     */
    'username': string;
    /**
     * パスワード
     * @type {string}
     * @memberof SignInRequest
     */
    'password': string;
}
/**
 * 保管方法
 * @export
 * @enum {string}
 */

export const StorageMethodType = {
    UNKNOWN: 0,
    NORMAL: 1,
    COOL_DARK_PLACE: 2,
    REFRIGERATED: 3,
    FROZEN: 4
} as const;

export type StorageMethodType = typeof StorageMethodType[keyof typeof StorageMethodType];


/**
 * お問い合わせ会話履歴情報
 * @export
 * @interface Thread
 */
export interface Thread {
    /**
     * お問い合わせ会話履歴ID
     * @type {string}
     * @memberof Thread
     */
    'id': string;
    /**
     * お問い合わせID
     * @type {string}
     * @memberof Thread
     */
    'contactId': string;
    /**
     * 送信者ID
     * @type {string}
     * @memberof Thread
     */
    'userId'?: string;
    /**
     * 
     * @type {ContactUserType}
     * @memberof Thread
     */
    'userType': ContactUserType;
    /**
     * 会話内容
     * @type {string}
     * @memberof Thread
     */
    'content': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof Thread
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof Thread
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface ThreadResponse
 */
export interface ThreadResponse {
    /**
     * 
     * @type {Thread}
     * @memberof ThreadResponse
     */
    'thread': Thread;
    /**
     * 
     * @type {User}
     * @memberof ThreadResponse
     */
    'user'?: User;
    /**
     * 
     * @type {Admin}
     * @memberof ThreadResponse
     */
    'admin'?: Admin;
}
/**
 * 
 * @export
 * @interface ThreadsResponse
 */
export interface ThreadsResponse {
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<Thread>}
     * @memberof ThreadsResponse
     */
    'threads': Array<Thread>;
    /**
     * お問い合わせ会話ユーザー一覧
     * @type {Array<User>}
     * @memberof ThreadsResponse
     */
    'users'?: Array<User>;
    /**
     * お問い合わせ会話管理者一覧
     * @type {Array<Admin>}
     * @memberof ThreadsResponse
     */
    'admins'?: Array<Admin>;
    /**
     * お問い合わせ会話履歴総数
     * @type {number}
     * @memberof ThreadsResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface UpdateAdministratorEmailRequest
 */
export interface UpdateAdministratorEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateAdministratorEmailRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateAdministratorRequest
 */
export interface UpdateAdministratorRequest {
    /**
     * 姓(16文字まで)
     * @type {string}
     * @memberof UpdateAdministratorRequest
     */
    'lastname': string;
    /**
     * 名(16文字まで)
     * @type {string}
     * @memberof UpdateAdministratorRequest
     */
    'firstname': string;
    /**
     * 姓(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof UpdateAdministratorRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof UpdateAdministratorRequest
     */
    'firstnameKana': string;
    /**
     * 電話番号(国際番号 + 電話番号)
     * @type {string}
     * @memberof UpdateAdministratorRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface UpdateAuthEmailRequest
 */
export interface UpdateAuthEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateAuthEmailRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateAuthPasswordRequest
 */
export interface UpdateAuthPasswordRequest {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof UpdateAuthPasswordRequest
     */
    'oldPassword': string;
    /**
     * 新しいパスワード(8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
     * @type {string}
     * @memberof UpdateAuthPasswordRequest
     */
    'newPassword': string;
    /**
     * パスワード(確認用)
     * @type {string}
     * @memberof UpdateAuthPasswordRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface UpdateCategoryRequest
 */
export interface UpdateCategoryRequest {
    /**
     * カテゴリ名(32文字まで)
     * @type {string}
     * @memberof UpdateCategoryRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateContactRequest
 */
export interface UpdateContactRequest {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'categoryId': string;
    /**
     * お問い合わせ件名(128文字まで)
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'title': string;
    /**
     * お問い合わせ内容(2000文字まで)
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'content': string;
    /**
     * 氏名(128文字まで)
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'userName': string;
    /**
     * 問い合わせ作成者ID
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'userId'?: string;
    /**
     * メールアドレス(256文字まで)
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'email': string;
    /**
     * 電話番号(18文字まで)
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'phoneNumber': string;
    /**
     * 
     * @type {ContactStatus}
     * @memberof UpdateContactRequest
     */
    'status': ContactStatus;
    /**
     * 対応者ID
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'responderId': string;
    /**
     * 対応メモ(2000文字まで)
     * @type {string}
     * @memberof UpdateContactRequest
     */
    'note': string;
}


/**
 * 
 * @export
 * @interface UpdateCoordinatorEmailRequest
 */
export interface UpdateCoordinatorEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateCoordinatorEmailRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateCoordinatorRequest
 */
export interface UpdateCoordinatorRequest {
    /**
     * 姓(16文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'lastname': string;
    /**
     * 名(16文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'firstname': string;
    /**
     * 姓(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'firstnameKana': string;
    /**
     * マルシェ名(64文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'marcheName': string;
    /**
     * コーディネータ(64文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'username': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'phoneNumber': string;
    /**
     * 郵便番号(ハイフンなし)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof UpdateCoordinatorRequest
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村(32文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'city': string;
    /**
     * 町名・番地(64文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'addressLine1': string;
    /**
     * ビル名・号室など(64文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'addressLine2': string;
    /**
     * プロフィール(2000文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'profile': string;
    /**
     * 取り扱い品目ID一覧
     * @type {Array<string>}
     * @memberof UpdateCoordinatorRequest
     */
    'productTypeIds': Array<string>;
    /**
     * サムネイル画像URL
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'thumbnailUrl': string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'headerUrl': string;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'promotionVideoUrl': string;
    /**
     * 購入者動画URL
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'bonusVideoUrl': string;
    /**
     * Instagramアカウント(30文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'instagramId': string;
    /**
     * Facebookアカウント(50文字まで)
     * @type {string}
     * @memberof UpdateCoordinatorRequest
     */
    'facebookId': string;
    /**
     * 営業曜日
     * @type {Array<Weekday>}
     * @memberof UpdateCoordinatorRequest
     */
    'businessDays': Array<Weekday>;
}


/**
 * 
 * @export
 * @interface UpdateLiveRequest
 */
export interface UpdateLiveRequest {
    /**
     * 商品一覧(8つまで)
     * @type {Array<string>}
     * @memberof UpdateLiveRequest
     */
    'productIds': Array<string>;
    /**
     * コメント
     * @type {string}
     * @memberof UpdateLiveRequest
     */
    'comment': string;
    /**
     * ライブ開始予定日時 (unixtime)
     * @type {number}
     * @memberof UpdateLiveRequest
     */
    'startAt': number;
    /**
     * ライブ終了予定日時 (unixtime)
     * @type {number}
     * @memberof UpdateLiveRequest
     */
    'endAt': number;
}
/**
 * 
 * @export
 * @interface UpdateNotificationRequest
 */
export interface UpdateNotificationRequest {
    /**
     * 通知対象一覧
     * @type {Array<NotificationTarget>}
     * @memberof UpdateNotificationRequest
     */
    'targets': Array<NotificationTarget>;
    /**
     * タイトル(128字まで)
     * @type {string}
     * @memberof UpdateNotificationRequest
     */
    'title': string;
    /**
     * 本文(2000字まで)
     * @type {string}
     * @memberof UpdateNotificationRequest
     */
    'body': string;
    /**
     * 備考(2000字まで)
     * @type {string}
     * @memberof UpdateNotificationRequest
     */
    'note': string;
    /**
     * 掲載日時 (unixtime)
     * @type {number}
     * @memberof UpdateNotificationRequest
     */
    'publishedAt': number;
}
/**
 * 
 * @export
 * @interface UpdateProducerEmailRequest
 */
export interface UpdateProducerEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateProducerEmailRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateProducerRequest
 */
export interface UpdateProducerRequest {
    /**
     * 姓(16文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'lastname': string;
    /**
     * 名(16文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'firstname': string;
    /**
     * 姓(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)(ひらがな,32文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'firstnameKana': string;
    /**
     * 生産者名(64文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'username': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'phoneNumber': string;
    /**
     * 郵便番号(ハイフンなし)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof UpdateProducerRequest
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村(32文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'city': string;
    /**
     * 町名・番地(64文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'addressLine1': string;
    /**
     * ビル名・号室など(64文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'addressLine2': string;
    /**
     * プロフィール(2000文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'profile': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'thumbnailUrl': string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'headerUrl': string;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'promotionVideoUrl': string;
    /**
     * 購入者動画URL
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'bonusVideoUrl': string;
    /**
     * Instagramアカウント(30文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'instagramId': string;
    /**
     * Facebookアカウント(50文字まで)
     * @type {string}
     * @memberof UpdateProducerRequest
     */
    'facebookId': string;
}


/**
 * 
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
    /**
     * 商品名(128文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'name': string;
    /**
     * 商品説明(20000文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'description': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof UpdateProductRequest
     */
    'public': boolean;
    /**
     * 品目ID
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'productTypeId': string;
    /**
     * 商品タグ一覧
     * @type {Array<string>}
     * @memberof UpdateProductRequest
     */
    'productTagIds': Array<string>;
    /**
     * メディア一覧(8つまで)
     * @type {Array<CreateProductRequestMediaInner>}
     * @memberof UpdateProductRequest
     */
    'media': Array<CreateProductRequestMediaInner>;
    /**
     * 販売価格(0以上)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'price': number;
    /**
     * 原価(0以上)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'cost': number;
    /**
     * 在庫数(0以上)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'inventory': number;
    /**
     * 重量(0以上,kg単位:少数第1位まで)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'weight': number;
    /**
     * 数量単位(16文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'itemUnit': string;
    /**
     * 数量単位説明(64文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'itemDescription': string;
    /**
     * 
     * @type {DeliveryType}
     * @memberof UpdateProductRequest
     */
    'deliveryType': DeliveryType;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'recommendedPoint1': string;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'recommendedPoint2': string;
    /**
     * おすすめポイント1(128文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'recommendedPoint3': string;
    /**
     * 賞味期限(単位:日,0以上)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'expirationDate': number;
    /**
     * 
     * @type {StorageMethodType}
     * @memberof UpdateProductRequest
     */
    'storageMethodType': StorageMethodType;
    /**
     * 箱の占有率(サイズ:60)(0以上,100以下)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'box60Rate': number;
    /**
     * 箱の占有率(サイズ:80)(0以上,100以下)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'box80Rate': number;
    /**
     * 箱の占有率(サイズ:100)(0以上,100以下)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'box100Rate': number;
    /**
     * 
     * @type {Prefecture}
     * @memberof UpdateProductRequest
     */
    'originPrefectureCode': Prefecture;
    /**
     * 原産地(市区町村)(32文字まで)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'originCity': string;
    /**
     * 販売開始日時 (unixtime)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'startAt': number;
    /**
     * 販売終了日時 (unixtime)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'endAt': number;
}


/**
 * 
 * @export
 * @interface UpdateProductTagRequest
 */
export interface UpdateProductTagRequest {
    /**
     * 商品タグ名(32文字まで)
     * @type {string}
     * @memberof UpdateProductTagRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateProductTypeRequest
 */
export interface UpdateProductTypeRequest {
    /**
     * 品目名(32文字まで)
     * @type {string}
     * @memberof UpdateProductTypeRequest
     */
    'name': string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof UpdateProductTypeRequest
     */
    'iconUrl': string;
}
/**
 * 
 * @export
 * @interface UpdatePromotionRequest
 */
export interface UpdatePromotionRequest {
    /**
     * タイトル(64文字まで)
     * @type {string}
     * @memberof UpdatePromotionRequest
     */
    'title': string;
    /**
     * 説明(2000文字まで)
     * @type {string}
     * @memberof UpdatePromotionRequest
     */
    'description': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof UpdatePromotionRequest
     */
    'public': boolean;
    /**
     * 
     * @type {DiscountType}
     * @memberof UpdatePromotionRequest
     */
    'discountType': DiscountType;
    /**
     * 割引額(単位:円/%,0以上)
     * @type {number}
     * @memberof UpdatePromotionRequest
     */
    'discountRate': number;
    /**
     * クーポンコード(8文字,使用可能文字:半角英数字,公開日時より前の場合のみ変更可能)
     * @type {string}
     * @memberof UpdatePromotionRequest
     */
    'code': string;
    /**
     * クーポン利用可能開始日時(unixtime)
     * @type {number}
     * @memberof UpdatePromotionRequest
     */
    'startAt': number;
    /**
     * クーポン利用可能終了日時(unixtime)
     * @type {number}
     * @memberof UpdatePromotionRequest
     */
    'endAt': number;
}


/**
 * 
 * @export
 * @interface UpdateScheduleRequest
 */
export interface UpdateScheduleRequest {
    /**
     * タイトル(128文字まで)
     * @type {string}
     * @memberof UpdateScheduleRequest
     */
    'title': string;
    /**
     * 説明(20000文字まで)
     * @type {string}
     * @memberof UpdateScheduleRequest
     */
    'description': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof UpdateScheduleRequest
     */
    'thumbnailUrl': string;
    /**
     * 蓋絵URL
     * @type {string}
     * @memberof UpdateScheduleRequest
     */
    'imageUrl': string;
    /**
     * オープニングURL
     * @type {string}
     * @memberof UpdateScheduleRequest
     */
    'openingVideoUrl': string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof UpdateScheduleRequest
     */
    'public': boolean;
    /**
     * マルシェ開始日時
     * @type {number}
     * @memberof UpdateScheduleRequest
     */
    'startAt': number;
    /**
     * マルシェ終了日時
     * @type {number}
     * @memberof UpdateScheduleRequest
     */
    'endAt': number;
}
/**
 * 
 * @export
 * @interface UpdateShippingRate
 */
export interface UpdateShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof UpdateShippingRate
     */
    'name': string;
    /**
     * 配送料金(100万未満)
     * @type {number}
     * @memberof UpdateShippingRate
     */
    'price': number;
    /**
     * 対象都道府県コード一覧
     * @type {Array<Prefecture>}
     * @memberof UpdateShippingRate
     */
    'prefectureCodes': Array<Prefecture>;
}
/**
 * 
 * @export
 * @interface UpdateShippingRequest
 */
export interface UpdateShippingRequest {
    /**
     * 配送設定名(64文字まで)
     * @type {string}
     * @memberof UpdateShippingRequest
     */
    'name': string;
    /**
     * デフォルト設定
     * @type {boolean}
     * @memberof UpdateShippingRequest
     */
    'isDefault': boolean;
    /**
     * 箱サイズ60の通常配送料一覧(すべての都道府県の設定が必須)
     * @type {Array<UpdateShippingRate>}
     * @memberof UpdateShippingRequest
     */
    'box60Rates': Array<UpdateShippingRate>;
    /**
     * 箱サイズ60の冷蔵便追加配送料(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'box60Refrigerated': number;
    /**
     * 箱サイズ60の冷凍便追加配送料(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'box60Frozen': number;
    /**
     * 箱サイズ80の通常配送料一覧(すべての都道府県の設定が必須)
     * @type {Array<UpdateShippingRate>}
     * @memberof UpdateShippingRequest
     */
    'box80Rates': Array<UpdateShippingRate>;
    /**
     * 箱サイズ80の冷蔵便追加配送料(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'box80Refrigerated': number;
    /**
     * 箱サイズ80の冷凍便追加配送料(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'box80Frozen': number;
    /**
     * 箱サイズ100の通常配送料一覧(すべての都道府県の設定が必須)
     * @type {Array<UpdateShippingRate>}
     * @memberof UpdateShippingRequest
     */
    'box100Rates': Array<UpdateShippingRate>;
    /**
     * 箱サイズ100の冷蔵便追加配送料(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'box100Refrigerated': number;
    /**
     * 箱サイズ100の冷凍便追加配送料(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'box100Frozen': number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof UpdateShippingRequest
     */
    'hasFreeShipping': boolean;
    /**
     * 送料無料になる金額(100万未満)
     * @type {number}
     * @memberof UpdateShippingRequest
     */
    'freeShippingRates': number;
}
/**
 * 
 * @export
 * @interface UpdateThreadRequest
 */
export interface UpdateThreadRequest {
    /**
     * 送信者ID
     * @type {string}
     * @memberof UpdateThreadRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {ContactUserType}
     * @memberof UpdateThreadRequest
     */
    'userType': ContactUserType;
    /**
     * 会話内容
     * @type {string}
     * @memberof UpdateThreadRequest
     */
    'content': string;
}


/**
 * 
 * @export
 * @interface UploadImageResponse
 */
export interface UploadImageResponse {
    /**
     * 画像アップロード先URL
     * @type {string}
     * @memberof UploadImageResponse
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface UploadVideoResponse
 */
export interface UploadVideoResponse {
    /**
     * 動画アップロード先URL
     * @type {string}
     * @memberof UploadVideoResponse
     */
    'url': string;
}
/**
 * 購入者情報
 * @export
 * @interface User
 */
export interface User {
    /**
     * 購入者ID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 姓
     * @type {string}
     * @memberof User
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof User
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof User
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof User
     */
    'firstnameKana': string;
    /**
     * 会員登録フラグ
     * @type {boolean}
     * @memberof User
     */
    'registered': boolean;
    /**
     * メールアドレス
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof User
     */
    'phoneNumber': string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof User
     */
    'postalCode': string;
    /**
     * 
     * @type {Prefecture}
     * @memberof User
     */
    'prefectureCode': Prefecture;
    /**
     * 市区町村
     * @type {string}
     * @memberof User
     */
    'city': string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof User
     */
    'addressLine1': string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof User
     */
    'addressLine2': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof User
     */
    'createdAt': number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof User
     */
    'updatedAt': number;
}


/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {User}
     * @memberof UserResponse
     */
    'user': User;
}
/**
 * 
 * @export
 * @interface UsersResponse
 */
export interface UsersResponse {
    /**
     * 購入者一覧
     * @type {Array<User>}
     * @memberof UsersResponse
     */
    'users': Array<User>;
    /**
     * 合計数
     * @type {number}
     * @memberof UsersResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface VerifyAuthEmailRequest
 */
export interface VerifyAuthEmailRequest {
    /**
     * 認証コード
     * @type {string}
     * @memberof VerifyAuthEmailRequest
     */
    'verifyCode': string;
}
/**
 * 曜日
 * @export
 * @enum {string}
 */

export const Weekday = {
    /**
    * 日曜日
    */
    SUNDAY: 0,
    /**
    * 月曜日
    */
    MONDAY: 1,
    /**
    * 火曜日
    */
    TUESDAY: 2,
    /**
    * 水曜日
    */
    WEDNESDAY: 3,
    /**
    * 木曜日
    */
    THURSDAY: 4,
    /**
    * 金曜日
    */
    FRIDAY: 5,
    /**
    * 土曜日
    */
    SATURDAY: 6
} as const;

export type Weekday = typeof Weekday[keyof typeof Weekday];



/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 郵便番号情報検索
         * @param {string} postalCode 郵便番号(ハイフンなし)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchPostalCode: async (postalCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postalCode' is not null or undefined
            assertParamExists('v1SearchPostalCode', 'postalCode', postalCode)
            const localVarPath = `/v1/postal-codes/{postalCode}`
                .replace(`{${"postalCode"}}`, encodeURIComponent(String(postalCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 郵便番号情報検索
         * @param {string} postalCode 郵便番号(ハイフンなし)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SearchPostalCode(postalCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostalCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SearchPostalCode(postalCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @summary 郵便番号情報検索
         * @param {string} postalCode 郵便番号(ハイフンなし)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchPostalCode(postalCode: string, options?: any): AxiosPromise<PostalCodeResponse> {
            return localVarFp.v1SearchPostalCode(postalCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * 
     * @summary 郵便番号情報検索
     * @param {string} postalCode 郵便番号(ハイフンなし)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public v1SearchPostalCode(postalCode: string, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).v1SearchPostalCode(postalCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdministratorApi - axios parameter creator
 * @export
 */
export const AdministratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary システム管理者登録
         * @param {CreateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateAdministrator: async (body: CreateAdministratorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateAdministrator', 'body', body)
            const localVarPath = `/v1/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者退会
         * @param {string} adminId システム管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteAdministrator: async (adminId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1DeleteAdministrator', 'adminId', adminId)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAdministrator: async (adminId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1GetAdministrator', 'adminId', adminId)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListAdministrators: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者更新
         * @param {string} adminId システム管理者ID
         * @param {UpdateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAdministrator: async (adminId: string, body: UpdateAdministratorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1UpdateAdministrator', 'adminId', adminId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAdministrator', 'body', body)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者メールアドレス更新
         * @param {string} adminId システム管理者ID
         * @param {UpdateAdministratorEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAdministratorEmail: async (adminId: string, body: UpdateAdministratorEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1UpdateAdministratorEmail', 'adminId', adminId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAdministratorEmail', 'body', body)
            const localVarPath = `/v1/administrators/{adminId}/email`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者パスワード更新(ランダム生成)
         * @param {string} adminId システム管理者ID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAdministratorPassword: async (adminId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1UpdateAdministratorPassword', 'adminId', adminId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAdministratorPassword', 'body', body)
            const localVarPath = `/v1/administrators/{adminId}/password`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdministratorApi - functional programming interface
 * @export
 */
export const AdministratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdministratorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary システム管理者登録
         * @param {CreateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateAdministrator(body: CreateAdministratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateAdministrator(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者退会
         * @param {string} adminId システム管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteAdministrator(adminId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteAdministrator(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAdministrator(adminId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAdministrator(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListAdministrators(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListAdministrators(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者更新
         * @param {string} adminId システム管理者ID
         * @param {UpdateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAdministrator(adminId: string, body: UpdateAdministratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAdministrator(adminId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者メールアドレス更新
         * @param {string} adminId システム管理者ID
         * @param {UpdateAdministratorEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAdministratorEmail(adminId: string, body: UpdateAdministratorEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAdministratorEmail(adminId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者パスワード更新(ランダム生成)
         * @param {string} adminId システム管理者ID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAdministratorPassword(adminId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAdministratorPassword(adminId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdministratorApi - factory interface
 * @export
 */
export const AdministratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdministratorApiFp(configuration)
    return {
        /**
         * 
         * @summary システム管理者登録
         * @param {CreateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateAdministrator(body: CreateAdministratorRequest, options?: any): AxiosPromise<AdministratorResponse> {
            return localVarFp.v1CreateAdministrator(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者退会
         * @param {string} adminId システム管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteAdministrator(adminId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteAdministrator(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAdministrator(adminId: string, options?: any): AxiosPromise<AdministratorResponse> {
            return localVarFp.v1GetAdministrator(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListAdministrators(limit?: number, offset?: number, options?: any): AxiosPromise<AdministratorsResponse> {
            return localVarFp.v1ListAdministrators(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者更新
         * @param {string} adminId システム管理者ID
         * @param {UpdateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAdministrator(adminId: string, body: UpdateAdministratorRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAdministrator(adminId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者メールアドレス更新
         * @param {string} adminId システム管理者ID
         * @param {UpdateAdministratorEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAdministratorEmail(adminId: string, body: UpdateAdministratorEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAdministratorEmail(adminId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者パスワード更新(ランダム生成)
         * @param {string} adminId システム管理者ID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAdministratorPassword(adminId: string, body: object, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAdministratorPassword(adminId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdministratorApi - object-oriented interface
 * @export
 * @class AdministratorApi
 * @extends {BaseAPI}
 */
export class AdministratorApi extends BaseAPI {
    /**
     * 
     * @summary システム管理者登録
     * @param {CreateAdministratorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1CreateAdministrator(body: CreateAdministratorRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1CreateAdministrator(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者退会
     * @param {string} adminId システム管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1DeleteAdministrator(adminId: string, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1DeleteAdministrator(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1GetAdministrator(adminId: string, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1GetAdministrator(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1ListAdministrators(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1ListAdministrators(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者更新
     * @param {string} adminId システム管理者ID
     * @param {UpdateAdministratorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1UpdateAdministrator(adminId: string, body: UpdateAdministratorRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1UpdateAdministrator(adminId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者メールアドレス更新
     * @param {string} adminId システム管理者ID
     * @param {UpdateAdministratorEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1UpdateAdministratorEmail(adminId: string, body: UpdateAdministratorEmailRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1UpdateAdministratorEmail(adminId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者パスワード更新(ランダム生成)
     * @param {string} adminId システム管理者ID
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1UpdateAdministratorPassword(adminId: string, body: object, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1UpdateAdministratorPassword(adminId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary パスワードリセット
         * @param {ForgotAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ForgotAuthPassword: async (body: ForgotAuthPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ForgotAuthPassword', 'body', body)
            const localVarPath = `/v1/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuthUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RefreshAuthToken: async (body: RefreshAuthTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1RefreshAuthToken', 'body', body)
            const localVarPath = `/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary デバイストークン登録
         * @param {RegisterAuthDeviceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RegisterAuthDevice: async (body: RegisterAuthDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1RegisterAuthDevice', 'body', body)
            const localVarPath = `/v1/auth/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードリセット - コード検証
         * @param {ResetAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetAuthPassword: async (body: ResetAuthPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ResetAuthPassword', 'body', body)
            const localVarPath = `/v1/auth/forgot-password/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignIn: async (body: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1SignIn', 'body', body)
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignOut: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthEmail: async (body: UpdateAuthEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAuthEmail', 'body', body)
            const localVarPath = `/v1/auth/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthPassword: async (body: UpdateAuthPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAuthPassword', 'body', body)
            const localVarPath = `/v1/auth/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyAuthEmail: async (body: VerifyAuthEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1VerifyAuthEmail', 'body', body)
            const localVarPath = `/v1/auth/email/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary パスワードリセット
         * @param {ForgotAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ForgotAuthPassword(body: ForgotAuthPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ForgotAuthPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 管理者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAuthUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuthUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RefreshAuthToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary デバイストークン登録
         * @param {RegisterAuthDeviceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RegisterAuthDevice(body: RegisterAuthDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RegisterAuthDevice(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードリセット - コード検証
         * @param {ResetAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResetAuthPassword(body: ResetAuthPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResetAuthPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignIn(body: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignOut(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAuthEmail(body: UpdateAuthEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAuthEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAuthPassword(body: UpdateAuthPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAuthPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VerifyAuthEmail(body: VerifyAuthEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerifyAuthEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary パスワードリセット
         * @param {ForgotAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ForgotAuthPassword(body: ForgotAuthPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1ForgotAuthPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1GetAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuthUser(options?: any): AxiosPromise<AuthUserResponse> {
            return localVarFp.v1GetAuthUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1RefreshAuthToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary デバイストークン登録
         * @param {RegisterAuthDeviceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RegisterAuthDevice(body: RegisterAuthDeviceRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1RegisterAuthDevice(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードリセット - コード検証
         * @param {ResetAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetAuthPassword(body: ResetAuthPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1ResetAuthPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1SignIn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignOut(options?: any): AxiosPromise<object> {
            return localVarFp.v1SignOut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthEmail(body: UpdateAuthEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAuthEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthPassword(body: UpdateAuthPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAuthPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyAuthEmail(body: VerifyAuthEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1VerifyAuthEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary パスワードリセット
     * @param {ForgotAuthPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1ForgotAuthPassword(body: ForgotAuthPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1ForgotAuthPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1GetAuth(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1GetAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1GetAuthUser(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1GetAuthUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1RefreshAuthToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary デバイストークン登録
     * @param {RegisterAuthDeviceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1RegisterAuthDevice(body: RegisterAuthDeviceRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1RegisterAuthDevice(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードリセット - コード検証
     * @param {ResetAuthPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1ResetAuthPassword(body: ResetAuthPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1ResetAuthPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary サインイン
     * @param {SignInRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1SignIn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1SignOut(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1SignOut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1UpdateAuthEmail(body: UpdateAuthEmailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1UpdateAuthEmail(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1UpdateAuthPassword(body: UpdateAuthPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1UpdateAuthPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1VerifyAuthEmail(body: VerifyAuthEmailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1VerifyAuthEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BroadcastApi - axios parameter creator
 * @export
 */
export const BroadcastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary マルシェライブ配信取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetBroadcast: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1GetBroadcast', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcastApi - functional programming interface
 * @export
 */
export const BroadcastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BroadcastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary マルシェライブ配信取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetBroadcast(scheduleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetBroadcast(scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BroadcastApi - factory interface
 * @export
 */
export const BroadcastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BroadcastApiFp(configuration)
    return {
        /**
         * 
         * @summary マルシェライブ配信取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetBroadcast(scheduleId: string, options?: any): AxiosPromise<BroadcastResponse> {
            return localVarFp.v1GetBroadcast(scheduleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
export class BroadcastApi extends BaseAPI {
    /**
     * 
     * @summary マルシェライブ配信取得
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1GetBroadcast(scheduleId: string, options?: AxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1GetBroadcast(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商品種別登録
         * @param {CreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateCategory: async (body: CreateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateCategory', 'body', body)
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品種別削除
         * @param {string} categoryId 商品種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteCategory: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1DeleteCategory', 'categoryId', categoryId)
            const localVarPath = `/v1/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListCategories: async (limit?: number, offset?: number, name?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品種別更新
         * @param {string} categoryId 商品種別ID
         * @param {UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCategory: async (categoryId: string, body: UpdateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1UpdateCategory', 'categoryId', categoryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateCategory', 'body', body)
            const localVarPath = `/v1/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 商品種別登録
         * @param {CreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateCategory(body: CreateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateCategory(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品種別削除
         * @param {string} categoryId 商品種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteCategory(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteCategory(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListCategories(limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListCategories(limit, offset, name, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品種別更新
         * @param {string} categoryId 商品種別ID
         * @param {UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateCategory(categoryId: string, body: UpdateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateCategory(categoryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary 商品種別登録
         * @param {CreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateCategory(body: CreateCategoryRequest, options?: any): AxiosPromise<CategoryResponse> {
            return localVarFp.v1CreateCategory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品種別削除
         * @param {string} categoryId 商品種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteCategory(categoryId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListCategories(limit?: number, offset?: number, name?: string, orders?: string, options?: any): AxiosPromise<CategoriesResponse> {
            return localVarFp.v1ListCategories(limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品種別更新
         * @param {string} categoryId 商品種別ID
         * @param {UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCategory(categoryId: string, body: UpdateCategoryRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateCategory(categoryId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary 商品種別登録
     * @param {CreateCategoryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1CreateCategory(body: CreateCategoryRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1CreateCategory(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品種別削除
     * @param {string} categoryId 商品種別ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1DeleteCategory(categoryId: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1DeleteCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品種別一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1ListCategories(limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1ListCategories(limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品種別更新
     * @param {string} categoryId 商品種別ID
     * @param {UpdateCategoryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1UpdateCategory(categoryId: string, body: UpdateCategoryRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1UpdateCategory(categoryId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary お問い合わせ登録
         * @param {CreateContactRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateContact: async (body: CreateContactRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateContact', 'body', body)
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ削除
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteContact: async (contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1DeleteContact', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ取得
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetContact: async (contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1GetContact', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListContacts: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ更新
         * @param {string} contactId お問い合わせID
         * @param {UpdateContactRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateContact: async (contactId: string, body: UpdateContactRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1UpdateContact', 'contactId', contactId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateContact', 'body', body)
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary お問い合わせ登録
         * @param {CreateContactRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateContact(body: CreateContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateContact(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ削除
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteContact(contactId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteContact(contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ取得
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetContact(contactId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetContact(contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListContacts(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListContacts(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ更新
         * @param {string} contactId お問い合わせID
         * @param {UpdateContactRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateContact(contactId: string, body: UpdateContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateContact(contactId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * 
         * @summary お問い合わせ登録
         * @param {CreateContactRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateContact(body: CreateContactRequest, options?: any): AxiosPromise<ContactResponse> {
            return localVarFp.v1CreateContact(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ削除
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteContact(contactId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteContact(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ取得
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetContact(contactId: string, options?: any): AxiosPromise<ContactResponse> {
            return localVarFp.v1GetContact(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListContacts(limit?: number, offset?: number, options?: any): AxiosPromise<ContactsResponse> {
            return localVarFp.v1ListContacts(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ更新
         * @param {string} contactId お問い合わせID
         * @param {UpdateContactRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateContact(contactId: string, body: UpdateContactRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateContact(contactId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * 
     * @summary お問い合わせ登録
     * @param {CreateContactRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1CreateContact(body: CreateContactRequest, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1CreateContact(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ削除
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1DeleteContact(contactId: string, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1DeleteContact(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ取得
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1GetContact(contactId: string, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1GetContact(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1ListContacts(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1ListContacts(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ更新
     * @param {string} contactId お問い合わせID
     * @param {UpdateContactRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1UpdateContact(contactId: string, body: UpdateContactRequest, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1UpdateContact(contactId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactCategoryApi - axios parameter creator
 * @export
 */
export const ContactCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary お問い合わせ種別取得
         * @param {string} contactCategoryId お問い合わせ種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetContactCategory: async (contactCategoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactCategoryId' is not null or undefined
            assertParamExists('v1GetContactCategory', 'contactCategoryId', contactCategoryId)
            const localVarPath = `/v1/contact-categories/{contactCategoryId}`
                .replace(`{${"contactCategoryId"}}`, encodeURIComponent(String(contactCategoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListContactCategories: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contact-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactCategoryApi - functional programming interface
 * @export
 */
export const ContactCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary お問い合わせ種別取得
         * @param {string} contactCategoryId お問い合わせ種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetContactCategory(contactCategoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetContactCategory(contactCategoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListContactCategories(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListContactCategories(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactCategoryApi - factory interface
 * @export
 */
export const ContactCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactCategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary お問い合わせ種別取得
         * @param {string} contactCategoryId お問い合わせ種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetContactCategory(contactCategoryId: string, options?: any): AxiosPromise<ContactCategoryResponse> {
            return localVarFp.v1GetContactCategory(contactCategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListContactCategories(limit?: number, offset?: number, options?: any): AxiosPromise<ContactCategoriesResponse> {
            return localVarFp.v1ListContactCategories(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactCategoryApi - object-oriented interface
 * @export
 * @class ContactCategoryApi
 * @extends {BaseAPI}
 */
export class ContactCategoryApi extends BaseAPI {
    /**
     * 
     * @summary お問い合わせ種別取得
     * @param {string} contactCategoryId お問い合わせ種別ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactCategoryApi
     */
    public v1GetContactCategory(contactCategoryId: string, options?: AxiosRequestConfig) {
        return ContactCategoryApiFp(this.configuration).v1GetContactCategory(contactCategoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ種別一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactCategoryApi
     */
    public v1ListContactCategories(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ContactCategoryApiFp(this.configuration).v1ListContactCategories(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoordinatorApi - axios parameter creator
 * @export
 */
export const CoordinatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary コーディネータ登録
         * @param {CreateCoordinatorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateCoordinator: async (body: CreateCoordinatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateCoordinator', 'body', body)
            const localVarPath = `/v1/coordinators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータ退会
         * @param {string} coordinatorId コーディネータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteCoordinator: async (coordinatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1DeleteCoordinator', 'coordinatorId', coordinatorId)
            const localVarPath = `/v1/coordinators/{coordinatorId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータ取得
         * @param {string} coordinatorId コーディネータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetCoordinator: async (coordinatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1GetCoordinator', 'coordinatorId', coordinatorId)
            const localVarPath = `/v1/coordinators/{coordinatorId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListCoordinators: async (limit?: number, offset?: number, username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/coordinators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 関連付けられた生産者一覧
         * @param {string} coordinatorId コーディネータID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListRelatedProducers: async (coordinatorId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1ListRelatedProducers', 'coordinatorId', coordinatorId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/producers`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者を関連付け
         * @param {string} coordinatorId コーディネータID
         * @param {RelateProducersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RelateProducers: async (coordinatorId: string, body: RelateProducersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1RelateProducers', 'coordinatorId', coordinatorId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1RelateProducers', 'body', body)
            const localVarPath = `/v1/coordinators/{coordinatorId}/producers`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者の関連付けを解除
         * @param {string} coordinatorId コーディネータID
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UnrelateProducer: async (coordinatorId: string, producerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1UnrelateProducer', 'coordinatorId', coordinatorId)
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1UnrelateProducer', 'producerId', producerId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/producers/{producerId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)))
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータ更新
         * @param {string} coordinatorId コーディネータID
         * @param {UpdateCoordinatorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCoordinator: async (coordinatorId: string, body: UpdateCoordinatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1UpdateCoordinator', 'coordinatorId', coordinatorId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateCoordinator', 'body', body)
            const localVarPath = `/v1/coordinators/{coordinatorId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータメールアドレス更新
         * @param {string} coordinatorId コーディネータID
         * @param {UpdateCoordinatorEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCoordinatorEmail: async (coordinatorId: string, body: UpdateCoordinatorEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1UpdateCoordinatorEmail', 'coordinatorId', coordinatorId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateCoordinatorEmail', 'body', body)
            const localVarPath = `/v1/coordinators/{coordinatorId}/email`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータパスワード更新(ランダム生成)
         * @param {string} coordinatorId コーディネータID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCoordinatorPassword: async (coordinatorId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1UpdateCoordinatorPassword', 'coordinatorId', coordinatorId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateCoordinatorPassword', 'body', body)
            const localVarPath = `/v1/coordinators/{coordinatorId}/password`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータ購入特典動画アップロード
         * @param {File} [video] コーディネータ購入特典映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorBonusVideo: async (video?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/coordinators/bonus-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータヘッダー画像アップロード
         * @param {File} [image] コーディネータヘッダー画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorHeader: async (image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/coordinators/header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータ紹介動画アップロード
         * @param {File} [video] コーディネータ紹介映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorPromotionVideo: async (video?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/coordinators/promotion-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コーディネータサムネイルアップロード
         * @param {File} [thumbnail] コーディネータサムネイル(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorThumbnail: async (thumbnail?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/coordinators/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', thumbnail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoordinatorApi - functional programming interface
 * @export
 */
export const CoordinatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoordinatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary コーディネータ登録
         * @param {CreateCoordinatorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateCoordinator(body: CreateCoordinatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoordinatorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateCoordinator(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータ退会
         * @param {string} coordinatorId コーディネータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteCoordinator(coordinatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteCoordinator(coordinatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータ取得
         * @param {string} coordinatorId コーディネータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetCoordinator(coordinatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoordinatorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetCoordinator(coordinatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListCoordinators(limit?: number, offset?: number, username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoordinatorsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListCoordinators(limit, offset, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 関連付けられた生産者一覧
         * @param {string} coordinatorId コーディネータID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListRelatedProducers(coordinatorId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProducersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListRelatedProducers(coordinatorId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者を関連付け
         * @param {string} coordinatorId コーディネータID
         * @param {RelateProducersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RelateProducers(coordinatorId: string, body: RelateProducersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RelateProducers(coordinatorId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者の関連付けを解除
         * @param {string} coordinatorId コーディネータID
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UnrelateProducer(coordinatorId: string, producerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UnrelateProducer(coordinatorId, producerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータ更新
         * @param {string} coordinatorId コーディネータID
         * @param {UpdateCoordinatorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateCoordinator(coordinatorId: string, body: UpdateCoordinatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateCoordinator(coordinatorId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータメールアドレス更新
         * @param {string} coordinatorId コーディネータID
         * @param {UpdateCoordinatorEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateCoordinatorEmail(coordinatorId: string, body: UpdateCoordinatorEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateCoordinatorEmail(coordinatorId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータパスワード更新(ランダム生成)
         * @param {string} coordinatorId コーディネータID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateCoordinatorPassword(coordinatorId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateCoordinatorPassword(coordinatorId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータ購入特典動画アップロード
         * @param {File} [video] コーディネータ購入特典映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorBonusVideo(video?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorBonusVideo(video, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータヘッダー画像アップロード
         * @param {File} [image] コーディネータヘッダー画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorHeader(image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorHeader(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータ紹介動画アップロード
         * @param {File} [video] コーディネータ紹介映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorPromotionVideo(video?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorPromotionVideo(video, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コーディネータサムネイルアップロード
         * @param {File} [thumbnail] コーディネータサムネイル(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorThumbnail(thumbnail?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorThumbnail(thumbnail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoordinatorApi - factory interface
 * @export
 */
export const CoordinatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoordinatorApiFp(configuration)
    return {
        /**
         * 
         * @summary コーディネータ登録
         * @param {CreateCoordinatorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateCoordinator(body: CreateCoordinatorRequest, options?: any): AxiosPromise<CoordinatorResponse> {
            return localVarFp.v1CreateCoordinator(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータ退会
         * @param {string} coordinatorId コーディネータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteCoordinator(coordinatorId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteCoordinator(coordinatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータ取得
         * @param {string} coordinatorId コーディネータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetCoordinator(coordinatorId: string, options?: any): AxiosPromise<CoordinatorResponse> {
            return localVarFp.v1GetCoordinator(coordinatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListCoordinators(limit?: number, offset?: number, username?: string, options?: any): AxiosPromise<CoordinatorsResponse> {
            return localVarFp.v1ListCoordinators(limit, offset, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 関連付けられた生産者一覧
         * @param {string} coordinatorId コーディネータID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListRelatedProducers(coordinatorId: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProducersResponse> {
            return localVarFp.v1ListRelatedProducers(coordinatorId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者を関連付け
         * @param {string} coordinatorId コーディネータID
         * @param {RelateProducersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RelateProducers(coordinatorId: string, body: RelateProducersRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1RelateProducers(coordinatorId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者の関連付けを解除
         * @param {string} coordinatorId コーディネータID
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UnrelateProducer(coordinatorId: string, producerId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1UnrelateProducer(coordinatorId, producerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータ更新
         * @param {string} coordinatorId コーディネータID
         * @param {UpdateCoordinatorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCoordinator(coordinatorId: string, body: UpdateCoordinatorRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateCoordinator(coordinatorId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータメールアドレス更新
         * @param {string} coordinatorId コーディネータID
         * @param {UpdateCoordinatorEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCoordinatorEmail(coordinatorId: string, body: UpdateCoordinatorEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateCoordinatorEmail(coordinatorId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータパスワード更新(ランダム生成)
         * @param {string} coordinatorId コーディネータID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateCoordinatorPassword(coordinatorId: string, body: object, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateCoordinatorPassword(coordinatorId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータ購入特典動画アップロード
         * @param {File} [video] コーディネータ購入特典映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorBonusVideo(video?: File, options?: any): AxiosPromise<UploadVideoResponse> {
            return localVarFp.v1UploadCoordinatorBonusVideo(video, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータヘッダー画像アップロード
         * @param {File} [image] コーディネータヘッダー画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorHeader(image?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadCoordinatorHeader(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータ紹介動画アップロード
         * @param {File} [video] コーディネータ紹介映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorPromotionVideo(video?: File, options?: any): AxiosPromise<UploadVideoResponse> {
            return localVarFp.v1UploadCoordinatorPromotionVideo(video, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コーディネータサムネイルアップロード
         * @param {File} [thumbnail] コーディネータサムネイル(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorThumbnail(thumbnail?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadCoordinatorThumbnail(thumbnail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoordinatorApi - object-oriented interface
 * @export
 * @class CoordinatorApi
 * @extends {BaseAPI}
 */
export class CoordinatorApi extends BaseAPI {
    /**
     * 
     * @summary コーディネータ登録
     * @param {CreateCoordinatorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1CreateCoordinator(body: CreateCoordinatorRequest, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1CreateCoordinator(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータ退会
     * @param {string} coordinatorId コーディネータID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1DeleteCoordinator(coordinatorId: string, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1DeleteCoordinator(coordinatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータ取得
     * @param {string} coordinatorId コーディネータID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1GetCoordinator(coordinatorId: string, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1GetCoordinator(coordinatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1ListCoordinators(limit?: number, offset?: number, username?: string, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1ListCoordinators(limit, offset, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 関連付けられた生産者一覧
     * @param {string} coordinatorId コーディネータID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1ListRelatedProducers(coordinatorId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1ListRelatedProducers(coordinatorId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者を関連付け
     * @param {string} coordinatorId コーディネータID
     * @param {RelateProducersRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1RelateProducers(coordinatorId: string, body: RelateProducersRequest, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1RelateProducers(coordinatorId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者の関連付けを解除
     * @param {string} coordinatorId コーディネータID
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UnrelateProducer(coordinatorId: string, producerId: string, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UnrelateProducer(coordinatorId, producerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータ更新
     * @param {string} coordinatorId コーディネータID
     * @param {UpdateCoordinatorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UpdateCoordinator(coordinatorId: string, body: UpdateCoordinatorRequest, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UpdateCoordinator(coordinatorId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータメールアドレス更新
     * @param {string} coordinatorId コーディネータID
     * @param {UpdateCoordinatorEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UpdateCoordinatorEmail(coordinatorId: string, body: UpdateCoordinatorEmailRequest, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UpdateCoordinatorEmail(coordinatorId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータパスワード更新(ランダム生成)
     * @param {string} coordinatorId コーディネータID
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UpdateCoordinatorPassword(coordinatorId: string, body: object, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UpdateCoordinatorPassword(coordinatorId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータ購入特典動画アップロード
     * @param {File} [video] コーディネータ購入特典映像(mp4形式,200MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UploadCoordinatorBonusVideo(video?: File, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UploadCoordinatorBonusVideo(video, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータヘッダー画像アップロード
     * @param {File} [image] コーディネータヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UploadCoordinatorHeader(image?: File, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UploadCoordinatorHeader(image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータ紹介動画アップロード
     * @param {File} [video] コーディネータ紹介映像(mp4形式,200MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UploadCoordinatorPromotionVideo(video?: File, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UploadCoordinatorPromotionVideo(video, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コーディネータサムネイルアップロード
     * @param {File} [thumbnail] コーディネータサムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UploadCoordinatorThumbnail(thumbnail?: File, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UploadCoordinatorThumbnail(thumbnail, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LiveApi - axios parameter creator
 * @export
 */
export const LiveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary マルシェタイムテーブル登録
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {CreateLiveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateLive: async (scheduleId: string, body: CreateLiveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1CreateLive', 'scheduleId', scheduleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateLive', 'body', body)
            const localVarPath = `/v1/schedules/{scheduleId}/lives`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェタイムテーブル削除
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {string} liveId マルシェタイムテーブルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteLive: async (scheduleId: string, liveId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1DeleteLive', 'scheduleId', scheduleId)
            // verify required parameter 'liveId' is not null or undefined
            assertParamExists('v1DeleteLive', 'liveId', liveId)
            const localVarPath = `/v1/schedules/{scheduleId}/lives/{liveId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)))
                .replace(`{${"liveId"}}`, encodeURIComponent(String(liveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェタイムテーブル一覧取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListLives: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1ListLives', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/lives`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェタイムテーブル更新
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {string} liveId マルシェタイムテーブルID
         * @param {UpdateLiveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateLive: async (scheduleId: string, liveId: string, body: UpdateLiveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1UpdateLive', 'scheduleId', scheduleId)
            // verify required parameter 'liveId' is not null or undefined
            assertParamExists('v1UpdateLive', 'liveId', liveId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateLive', 'body', body)
            const localVarPath = `/v1/schedules/{scheduleId}/lives/{liveId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)))
                .replace(`{${"liveId"}}`, encodeURIComponent(String(liveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveApi - functional programming interface
 * @export
 */
export const LiveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary マルシェタイムテーブル登録
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {CreateLiveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateLive(scheduleId: string, body: CreateLiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateLive(scheduleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェタイムテーブル削除
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {string} liveId マルシェタイムテーブルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteLive(scheduleId: string, liveId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteLive(scheduleId, liveId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェタイムテーブル一覧取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListLives(scheduleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LivesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListLives(scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェタイムテーブル更新
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {string} liveId マルシェタイムテーブルID
         * @param {UpdateLiveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateLive(scheduleId: string, liveId: string, body: UpdateLiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateLive(scheduleId, liveId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveApi - factory interface
 * @export
 */
export const LiveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveApiFp(configuration)
    return {
        /**
         * 
         * @summary マルシェタイムテーブル登録
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {CreateLiveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateLive(scheduleId: string, body: CreateLiveRequest, options?: any): AxiosPromise<LiveResponse> {
            return localVarFp.v1CreateLive(scheduleId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェタイムテーブル削除
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {string} liveId マルシェタイムテーブルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteLive(scheduleId: string, liveId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteLive(scheduleId, liveId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェタイムテーブル一覧取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListLives(scheduleId: string, options?: any): AxiosPromise<LivesResponse> {
            return localVarFp.v1ListLives(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェタイムテーブル更新
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {string} liveId マルシェタイムテーブルID
         * @param {UpdateLiveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateLive(scheduleId: string, liveId: string, body: UpdateLiveRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateLive(scheduleId, liveId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiveApi - object-oriented interface
 * @export
 * @class LiveApi
 * @extends {BaseAPI}
 */
export class LiveApi extends BaseAPI {
    /**
     * 
     * @summary マルシェタイムテーブル登録
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {CreateLiveRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1CreateLive(scheduleId: string, body: CreateLiveRequest, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1CreateLive(scheduleId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェタイムテーブル削除
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {string} liveId マルシェタイムテーブルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1DeleteLive(scheduleId: string, liveId: string, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1DeleteLive(scheduleId, liveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェタイムテーブル一覧取得
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1ListLives(scheduleId: string, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1ListLives(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェタイムテーブル更新
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {string} liveId マルシェタイムテーブルID
     * @param {UpdateLiveRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1UpdateLive(scheduleId: string, liveId: string, body: UpdateLiveRequest, options?: AxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1UpdateLive(scheduleId, liveId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary メッセージ取得
         * @param {string} messageId メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetMessage: async (messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('v1GetMessage', 'messageId', messageId)
            const localVarPath = `/v1/messages/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:type,read,receivedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListMessages: async (limit?: number, offset?: number, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary メッセージ取得
         * @param {string} messageId メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetMessage(messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetMessage(messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メッセージ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:type,read,receivedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListMessages(limit?: number, offset?: number, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListMessages(limit, offset, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         * 
         * @summary メッセージ取得
         * @param {string} messageId メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetMessage(messageId: string, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.v1GetMessage(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メッセージ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:type,read,receivedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListMessages(limit?: number, offset?: number, orders?: string, options?: any): AxiosPromise<MessagesResponse> {
            return localVarFp.v1ListMessages(limit, offset, orders, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 
     * @summary メッセージ取得
     * @param {string} messageId メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public v1GetMessage(messageId: string, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).v1GetMessage(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メッセージ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:type,read,receivedAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public v1ListMessages(limit?: number, offset?: number, orders?: string, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).v1ListMessages(limit, offset, orders, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary お知らせ登録
         * @param {CreateNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateNotification: async (body: CreateNotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateNotification', 'body', body)
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お知らせ削除
         * @param {string} notificationId お知らせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteNotification: async (notificationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('v1DeleteNotification', 'notificationId', notificationId)
            const localVarPath = `/v1/notifications/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お知らせ取得
         * @param {string} notificationId お知らせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetNotification: async (notificationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('v1GetNotification', 'notificationId', notificationId)
            const localVarPath = `/v1/notifications/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お知らせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {number} [since] 取得開始日時(unixtime)
         * @param {number} [until] 取得終了日時(unixtime)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド: title,public,publishedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListNotifications: async (limit?: number, offset?: number, since?: number, until?: number, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お知らせ更新
         * @param {string} notificationId お知らせID
         * @param {UpdateNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateNotification: async (notificationId: string, body: UpdateNotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('v1UpdateNotification', 'notificationId', notificationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateNotification', 'body', body)
            const localVarPath = `/v1/notifications/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary お知らせ登録
         * @param {CreateNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateNotification(body: CreateNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateNotification(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お知らせ削除
         * @param {string} notificationId お知らせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteNotification(notificationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteNotification(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お知らせ取得
         * @param {string} notificationId お知らせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetNotification(notificationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetNotification(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お知らせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {number} [since] 取得開始日時(unixtime)
         * @param {number} [until] 取得終了日時(unixtime)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド: title,public,publishedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListNotifications(limit?: number, offset?: number, since?: number, until?: number, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListNotifications(limit, offset, since, until, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お知らせ更新
         * @param {string} notificationId お知らせID
         * @param {UpdateNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateNotification(notificationId: string, body: UpdateNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateNotification(notificationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary お知らせ登録
         * @param {CreateNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateNotification(body: CreateNotificationRequest, options?: any): AxiosPromise<NotificationResponse> {
            return localVarFp.v1CreateNotification(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お知らせ削除
         * @param {string} notificationId お知らせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteNotification(notificationId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteNotification(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お知らせ取得
         * @param {string} notificationId お知らせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetNotification(notificationId: string, options?: any): AxiosPromise<NotificationResponse> {
            return localVarFp.v1GetNotification(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お知らせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {number} [since] 取得開始日時(unixtime)
         * @param {number} [until] 取得終了日時(unixtime)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド: title,public,publishedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListNotifications(limit?: number, offset?: number, since?: number, until?: number, orders?: string, options?: any): AxiosPromise<NotificationsResponse> {
            return localVarFp.v1ListNotifications(limit, offset, since, until, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お知らせ更新
         * @param {string} notificationId お知らせID
         * @param {UpdateNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateNotification(notificationId: string, body: UpdateNotificationRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateNotification(notificationId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @summary お知らせ登録
     * @param {CreateNotificationRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1CreateNotification(body: CreateNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1CreateNotification(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お知らせ削除
     * @param {string} notificationId お知らせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1DeleteNotification(notificationId: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1DeleteNotification(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お知らせ取得
     * @param {string} notificationId お知らせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1GetNotification(notificationId: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1GetNotification(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お知らせ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {number} [since] 取得開始日時(unixtime)
     * @param {number} [until] 取得終了日時(unixtime)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド: title,public,publishedAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1ListNotifications(limit?: number, offset?: number, since?: number, until?: number, orders?: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1ListNotifications(limit, offset, since, until, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お知らせ更新
     * @param {string} notificationId お知らせID
     * @param {UpdateNotificationRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1UpdateNotification(notificationId: string, body: UpdateNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1UpdateNotification(notificationId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 注文取得
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1GetOrder', 'orderId', orderId)
            const localVarPath = `/v1/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注文一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:paymentStatus,fulfillmentStatus,orderedAt,paidAt,deliveredAt,canceledAt,createdAt,updatedAt, 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListOrders: async (limit?: number, offset?: number, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 注文取得
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 注文一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:paymentStatus,fulfillmentStatus,orderedAt,paidAt,deliveredAt,canceledAt,createdAt,updatedAt, 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListOrders(limit?: number, offset?: number, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListOrders(limit, offset, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @summary 注文取得
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetOrder(orderId: string, options?: any): AxiosPromise<OrderResponse> {
            return localVarFp.v1GetOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 注文一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:paymentStatus,fulfillmentStatus,orderedAt,paidAt,deliveredAt,canceledAt,createdAt,updatedAt, 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListOrders(limit?: number, offset?: number, orders?: string, options?: any): AxiosPromise<OrdersResponse> {
            return localVarFp.v1ListOrders(limit, offset, orders, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary 注文取得
     * @param {string} orderId 注文ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1GetOrder(orderId: string, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1GetOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 注文一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:paymentStatus,fulfillmentStatus,orderedAt,paidAt,deliveredAt,canceledAt,createdAt,updatedAt, 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1ListOrders(limit?: number, offset?: number, orders?: string, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1ListOrders(limit, offset, orders, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OtherApi - axios parameter creator
 * @export
 */
export const OtherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 郵便番号情報検索
         * @param {string} postalCode 郵便番号(ハイフンなし)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchPostalCode: async (postalCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postalCode' is not null or undefined
            assertParamExists('v1SearchPostalCode', 'postalCode', postalCode)
            const localVarPath = `/v1/postal-codes/{postalCode}`
                .replace(`{${"postalCode"}}`, encodeURIComponent(String(postalCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtherApi - functional programming interface
 * @export
 */
export const OtherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 郵便番号情報検索
         * @param {string} postalCode 郵便番号(ハイフンなし)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SearchPostalCode(postalCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostalCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SearchPostalCode(postalCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OtherApi - factory interface
 * @export
 */
export const OtherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtherApiFp(configuration)
    return {
        /**
         * 
         * @summary 郵便番号情報検索
         * @param {string} postalCode 郵便番号(ハイフンなし)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchPostalCode(postalCode: string, options?: any): AxiosPromise<PostalCodeResponse> {
            return localVarFp.v1SearchPostalCode(postalCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OtherApi - object-oriented interface
 * @export
 * @class OtherApi
 * @extends {BaseAPI}
 */
export class OtherApi extends BaseAPI {
    /**
     * 
     * @summary 郵便番号情報検索
     * @param {string} postalCode 郵便番号(ハイフンなし)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public v1SearchPostalCode(postalCode: string, options?: AxiosRequestConfig) {
        return OtherApiFp(this.configuration).v1SearchPostalCode(postalCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProducerApi - axios parameter creator
 * @export
 */
export const ProducerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 生産者登録
         * @param {CreateProducerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProducer: async (body: CreateProducerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateProducer', 'body', body)
            const localVarPath = `/v1/producers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者退会
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProducer: async (producerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1DeleteProducer', 'producerId', producerId)
            const localVarPath = `/v1/producers/{producerId}`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者取得
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetProducer: async (producerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1GetProducer', 'producerId', producerId)
            const localVarPath = `/v1/producers/{producerId}`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] 農家名(あいまい検索)(64文字以内)
         * @param {string} [filters] フィルタ ・複数指定時は&#x60;,&#x60;区切り ・指定可能フィールド:unrelated 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProducers: async (limit?: number, offset?: number, username?: string, filters?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/producers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者更新
         * @param {string} producerId 生産者ID
         * @param {UpdateProducerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProducer: async (producerId: string, body: UpdateProducerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1UpdateProducer', 'producerId', producerId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateProducer', 'body', body)
            const localVarPath = `/v1/producers/{producerId}`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者メールアドレス更新
         * @param {string} producerId 生産者ID
         * @param {UpdateProducerEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProducerEmail: async (producerId: string, body: UpdateProducerEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1UpdateProducerEmail', 'producerId', producerId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateProducerEmail', 'body', body)
            const localVarPath = `/v1/producers/{producerId}/email`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者パスワード更新(ランダム生成)
         * @param {string} producerId 生産者ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProducerPassword: async (producerId: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1UpdateProducerPassword', 'producerId', producerId)
            const localVarPath = `/v1/producers/{producerId}/password`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者購入特典動画アップロード
         * @param {File} [video] 生産者購入特典映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerBonusVideo: async (video?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/producers/bonus-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者ヘッダー画像アップロード
         * @param {File} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerHeader: async (image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/producers/header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者紹介動画アップロード
         * @param {File} [video] 生産者紹介映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerPromotionVideo: async (video?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/producers/promotion-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生産者サムネイルアップロード
         * @param {File} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerThumbnail: async (thumbnail?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/producers/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', thumbnail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProducerApi - functional programming interface
 * @export
 */
export const ProducerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProducerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 生産者登録
         * @param {CreateProducerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateProducer(body: CreateProducerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProducerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateProducer(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者退会
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteProducer(producerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteProducer(producerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者取得
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetProducer(producerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProducerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetProducer(producerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] 農家名(あいまい検索)(64文字以内)
         * @param {string} [filters] フィルタ ・複数指定時は&#x60;,&#x60;区切り ・指定可能フィールド:unrelated 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListProducers(limit?: number, offset?: number, username?: string, filters?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProducersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListProducers(limit, offset, username, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者更新
         * @param {string} producerId 生産者ID
         * @param {UpdateProducerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateProducer(producerId: string, body: UpdateProducerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProducer(producerId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者メールアドレス更新
         * @param {string} producerId 生産者ID
         * @param {UpdateProducerEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateProducerEmail(producerId: string, body: UpdateProducerEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProducerEmail(producerId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者パスワード更新(ランダム生成)
         * @param {string} producerId 生産者ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateProducerPassword(producerId: string, body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProducerPassword(producerId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者購入特典動画アップロード
         * @param {File} [video] 生産者購入特典映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducerBonusVideo(video?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducerBonusVideo(video, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者ヘッダー画像アップロード
         * @param {File} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducerHeader(image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducerHeader(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者紹介動画アップロード
         * @param {File} [video] 生産者紹介映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducerPromotionVideo(video?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducerPromotionVideo(video, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生産者サムネイルアップロード
         * @param {File} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducerThumbnail(thumbnail?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducerThumbnail(thumbnail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProducerApi - factory interface
 * @export
 */
export const ProducerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProducerApiFp(configuration)
    return {
        /**
         * 
         * @summary 生産者登録
         * @param {CreateProducerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProducer(body: CreateProducerRequest, options?: any): AxiosPromise<ProducerResponse> {
            return localVarFp.v1CreateProducer(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者退会
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProducer(producerId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteProducer(producerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者取得
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetProducer(producerId: string, options?: any): AxiosPromise<ProducerResponse> {
            return localVarFp.v1GetProducer(producerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] 農家名(あいまい検索)(64文字以内)
         * @param {string} [filters] フィルタ ・複数指定時は&#x60;,&#x60;区切り ・指定可能フィールド:unrelated 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProducers(limit?: number, offset?: number, username?: string, filters?: string, options?: any): AxiosPromise<ProducersResponse> {
            return localVarFp.v1ListProducers(limit, offset, username, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者更新
         * @param {string} producerId 生産者ID
         * @param {UpdateProducerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProducer(producerId: string, body: UpdateProducerRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateProducer(producerId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者メールアドレス更新
         * @param {string} producerId 生産者ID
         * @param {UpdateProducerEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProducerEmail(producerId: string, body: UpdateProducerEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateProducerEmail(producerId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者パスワード更新(ランダム生成)
         * @param {string} producerId 生産者ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProducerPassword(producerId: string, body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateProducerPassword(producerId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者購入特典動画アップロード
         * @param {File} [video] 生産者購入特典映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerBonusVideo(video?: File, options?: any): AxiosPromise<UploadVideoResponse> {
            return localVarFp.v1UploadProducerBonusVideo(video, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者ヘッダー画像アップロード
         * @param {File} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerHeader(image?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadProducerHeader(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者紹介動画アップロード
         * @param {File} [video] 生産者紹介映像(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerPromotionVideo(video?: File, options?: any): AxiosPromise<UploadVideoResponse> {
            return localVarFp.v1UploadProducerPromotionVideo(video, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生産者サムネイルアップロード
         * @param {File} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerThumbnail(thumbnail?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadProducerThumbnail(thumbnail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProducerApi - object-oriented interface
 * @export
 * @class ProducerApi
 * @extends {BaseAPI}
 */
export class ProducerApi extends BaseAPI {
    /**
     * 
     * @summary 生産者登録
     * @param {CreateProducerRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1CreateProducer(body: CreateProducerRequest, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1CreateProducer(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者退会
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1DeleteProducer(producerId: string, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1DeleteProducer(producerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者取得
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1GetProducer(producerId: string, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1GetProducer(producerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [username] 農家名(あいまい検索)(64文字以内)
     * @param {string} [filters] フィルタ ・複数指定時は&#x60;,&#x60;区切り ・指定可能フィールド:unrelated 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1ListProducers(limit?: number, offset?: number, username?: string, filters?: string, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1ListProducers(limit, offset, username, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者更新
     * @param {string} producerId 生産者ID
     * @param {UpdateProducerRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UpdateProducer(producerId: string, body: UpdateProducerRequest, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UpdateProducer(producerId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者メールアドレス更新
     * @param {string} producerId 生産者ID
     * @param {UpdateProducerEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UpdateProducerEmail(producerId: string, body: UpdateProducerEmailRequest, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UpdateProducerEmail(producerId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者パスワード更新(ランダム生成)
     * @param {string} producerId 生産者ID
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UpdateProducerPassword(producerId: string, body?: object, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UpdateProducerPassword(producerId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者購入特典動画アップロード
     * @param {File} [video] 生産者購入特典映像(mp4形式,200MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UploadProducerBonusVideo(video?: File, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UploadProducerBonusVideo(video, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者ヘッダー画像アップロード
     * @param {File} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UploadProducerHeader(image?: File, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UploadProducerHeader(image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者紹介動画アップロード
     * @param {File} [video] 生産者紹介映像(mp4形式,200MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UploadProducerPromotionVideo(video?: File, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UploadProducerPromotionVideo(video, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生産者サムネイルアップロード
     * @param {File} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UploadProducerThumbnail(thumbnail?: File, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UploadProducerThumbnail(thumbnail, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商品登録
         * @param {CreateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProduct: async (body: CreateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateProduct', 'body', body)
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品削除
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProduct: async (productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('v1DeleteProduct', 'productId', productId)
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品取得
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetProduct: async (productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('v1GetProduct', 'productId', productId)
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [producerId] 生産者ID
         * @param {string} [name] 商品名(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,public,inventory,originPrefecture,originCity,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProducts: async (limit?: number, offset?: number, producerId?: string, name?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (producerId !== undefined) {
                localVarQueryParameter['producerId'] = producerId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品更新
         * @param {string} productId 商品ID
         * @param {UpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProduct: async (productId: string, body: UpdateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('v1UpdateProduct', 'productId', productId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateProduct', 'body', body)
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品画像アップロード
         * @param {File} [image] 商品画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductImage: async (image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/products/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品動画アップロード
         * @param {File} [video] 商品動画(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductVideo: async (video?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/products/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 商品登録
         * @param {CreateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateProduct(body: CreateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateProduct(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品削除
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteProduct(productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteProduct(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品取得
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetProduct(productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetProduct(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [producerId] 生産者ID
         * @param {string} [name] 商品名(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,public,inventory,originPrefecture,originCity,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListProducts(limit?: number, offset?: number, producerId?: string, name?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListProducts(limit, offset, producerId, name, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品更新
         * @param {string} productId 商品ID
         * @param {UpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateProduct(productId: string, body: UpdateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProduct(productId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品画像アップロード
         * @param {File} [image] 商品画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProductImage(image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProductImage(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品動画アップロード
         * @param {File} [video] 商品動画(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProductVideo(video?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProductVideo(video, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary 商品登録
         * @param {CreateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProduct(body: CreateProductRequest, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.v1CreateProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品削除
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProduct(productId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品取得
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetProduct(productId: string, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.v1GetProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [producerId] 生産者ID
         * @param {string} [name] 商品名(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,public,inventory,originPrefecture,originCity,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProducts(limit?: number, offset?: number, producerId?: string, name?: string, orders?: string, options?: any): AxiosPromise<ProductsResponse> {
            return localVarFp.v1ListProducts(limit, offset, producerId, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品更新
         * @param {string} productId 商品ID
         * @param {UpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProduct(productId: string, body: UpdateProductRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateProduct(productId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品画像アップロード
         * @param {File} [image] 商品画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductImage(image?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadProductImage(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品動画アップロード
         * @param {File} [video] 商品動画(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductVideo(video?: File, options?: any): AxiosPromise<UploadVideoResponse> {
            return localVarFp.v1UploadProductVideo(video, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary 商品登録
     * @param {CreateProductRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1CreateProduct(body: CreateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1CreateProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品削除
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1DeleteProduct(productId: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1DeleteProduct(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品取得
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1GetProduct(productId: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1GetProduct(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [producerId] 生産者ID
     * @param {string} [name] 商品名(あいまい検索)(64文字以内)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,public,inventory,originPrefecture,originCity,createdAt,updatedAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1ListProducts(limit?: number, offset?: number, producerId?: string, name?: string, orders?: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1ListProducts(limit, offset, producerId, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品更新
     * @param {string} productId 商品ID
     * @param {UpdateProductRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1UpdateProduct(productId: string, body: UpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1UpdateProduct(productId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品画像アップロード
     * @param {File} [image] 商品画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1UploadProductImage(image?: File, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1UploadProductImage(image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品動画アップロード
     * @param {File} [video] 商品動画(mp4形式,200MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1UploadProductVideo(video?: File, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1UploadProductVideo(video, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductTagApi - axios parameter creator
 * @export
 */
export const ProductTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商品タグ登録
         * @param {CreateProductTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProductTag: async (body: CreateProductTagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateProductTag', 'body', body)
            const localVarPath = `/v1/product-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品タグ削除
         * @param {string} productTagId 商品タグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProductTag: async (productTagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTagId' is not null or undefined
            assertParamExists('v1DeleteProductTag', 'productTagId', productTagId)
            const localVarPath = `/v1/product-tags/{productTagId}`
                .replace(`{${"ProductTagId"}}`, encodeURIComponent(String(productTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品タグ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品タグ名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProductTags: async (limit?: number, offset?: number, name?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/product-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品タグ更新
         * @param {string} productTagId 商品タグID
         * @param {UpdateProductTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProductTag: async (productTagId: string, body: UpdateProductTagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTagId' is not null or undefined
            assertParamExists('v1UpdateProductTag', 'productTagId', productTagId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateProductTag', 'body', body)
            const localVarPath = `/v1/product-tags/{productTagId}`
                .replace(`{${"productTagId"}}`, encodeURIComponent(String(productTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTagApi - functional programming interface
 * @export
 */
export const ProductTagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 商品タグ登録
         * @param {CreateProductTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateProductTag(body: CreateProductTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateProductTag(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品タグ削除
         * @param {string} productTagId 商品タグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteProductTag(productTagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteProductTag(productTagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品タグ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品タグ名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListProductTags(limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTagsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListProductTags(limit, offset, name, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 商品タグ更新
         * @param {string} productTagId 商品タグID
         * @param {UpdateProductTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateProductTag(productTagId: string, body: UpdateProductTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProductTag(productTagId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductTagApi - factory interface
 * @export
 */
export const ProductTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTagApiFp(configuration)
    return {
        /**
         * 
         * @summary 商品タグ登録
         * @param {CreateProductTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProductTag(body: CreateProductTagRequest, options?: any): AxiosPromise<ProductTagResponse> {
            return localVarFp.v1CreateProductTag(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品タグ削除
         * @param {string} productTagId 商品タグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProductTag(productTagId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteProductTag(productTagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品タグ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品タグ名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProductTags(limit?: number, offset?: number, name?: string, orders?: string, options?: any): AxiosPromise<ProductTagsResponse> {
            return localVarFp.v1ListProductTags(limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品タグ更新
         * @param {string} productTagId 商品タグID
         * @param {UpdateProductTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProductTag(productTagId: string, body: UpdateProductTagRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateProductTag(productTagId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductTagApi - object-oriented interface
 * @export
 * @class ProductTagApi
 * @extends {BaseAPI}
 */
export class ProductTagApi extends BaseAPI {
    /**
     * 
     * @summary 商品タグ登録
     * @param {CreateProductTagRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1CreateProductTag(body: CreateProductTagRequest, options?: AxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1CreateProductTag(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品タグ削除
     * @param {string} productTagId 商品タグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1DeleteProductTag(productTagId: string, options?: AxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1DeleteProductTag(productTagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品タグ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 商品タグ名(あいまい検索)(32文字以内)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1ListProductTags(limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1ListProductTags(limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品タグ更新
     * @param {string} productTagId 商品タグID
     * @param {UpdateProductTagRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1UpdateProductTag(productTagId: string, body: UpdateProductTagRequest, options?: AxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1UpdateProductTag(productTagId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductTypeApi - axios parameter creator
 * @export
 */
export const ProductTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 品目登録
         * @param {string} categoryId 商品種別ID
         * @param {CreateProductTypeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProductType: async (categoryId: string, body: CreateProductTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CreateProductType', 'categoryId', categoryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateProductType', 'body', body)
            const localVarPath = `/v1/categories/{categoryId}/product-types`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 品目削除
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProductType: async (categoryId: string, productTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1DeleteProductType', 'categoryId', categoryId)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('v1DeleteProductType', 'productTypeId', productTypeId)
            const localVarPath = `/v1/categories/{categoryId}/product-types/{productTypeId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)))
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 品目一覧取得(商品種別指定なし)
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListAllProductTypes: async (limit?: number, offset?: number, name?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/categories/-/product-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 品目一覧取得
         * @param {string} categoryId 商品種別ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProductTypes: async (categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1ListProductTypes', 'categoryId', categoryId)
            const localVarPath = `/v1/categories/{categoryId}/product-types`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 品目更新
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {UpdateProductTypeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProductType: async (categoryId: string, productTypeId: string, body: UpdateProductTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1UpdateProductType', 'categoryId', categoryId)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('v1UpdateProductType', 'productTypeId', productTypeId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateProductType', 'body', body)
            const localVarPath = `/v1/categories/{categoryId}/product-types/{productTypeId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)))
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 品目アイコンアップロード
         * @param {File} [icon] 商品アイコン(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductTypeIcon: async (icon?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/product-types/icon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (icon !== undefined) { 
                localVarFormParams.append('icon', icon as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTypeApi - functional programming interface
 * @export
 */
export const ProductTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 品目登録
         * @param {string} categoryId 商品種別ID
         * @param {CreateProductTypeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateProductType(categoryId: string, body: CreateProductTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateProductType(categoryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 品目削除
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteProductType(categoryId: string, productTypeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteProductType(categoryId, productTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 品目一覧取得(商品種別指定なし)
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListAllProductTypes(limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListAllProductTypes(limit, offset, name, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 品目一覧取得
         * @param {string} categoryId 商品種別ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListProductTypes(categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListProductTypes(categoryId, limit, offset, name, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 品目更新
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {UpdateProductTypeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateProductType(categoryId: string, productTypeId: string, body: UpdateProductTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProductType(categoryId, productTypeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 品目アイコンアップロード
         * @param {File} [icon] 商品アイコン(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProductTypeIcon(icon?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProductTypeIcon(icon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductTypeApi - factory interface
 * @export
 */
export const ProductTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary 品目登録
         * @param {string} categoryId 商品種別ID
         * @param {CreateProductTypeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateProductType(categoryId: string, body: CreateProductTypeRequest, options?: any): AxiosPromise<ProductTypeResponse> {
            return localVarFp.v1CreateProductType(categoryId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 品目削除
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteProductType(categoryId: string, productTypeId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteProductType(categoryId, productTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 品目一覧取得(商品種別指定なし)
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListAllProductTypes(limit?: number, offset?: number, name?: string, orders?: string, options?: any): AxiosPromise<ProductTypesResponse> {
            return localVarFp.v1ListAllProductTypes(limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 品目一覧取得
         * @param {string} categoryId 商品種別ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListProductTypes(categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options?: any): AxiosPromise<ProductTypesResponse> {
            return localVarFp.v1ListProductTypes(categoryId, limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 品目更新
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {UpdateProductTypeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateProductType(categoryId: string, productTypeId: string, body: UpdateProductTypeRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateProductType(categoryId, productTypeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 品目アイコンアップロード
         * @param {File} [icon] 商品アイコン(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductTypeIcon(icon?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadProductTypeIcon(icon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductTypeApi - object-oriented interface
 * @export
 * @class ProductTypeApi
 * @extends {BaseAPI}
 */
export class ProductTypeApi extends BaseAPI {
    /**
     * 
     * @summary 品目登録
     * @param {string} categoryId 商品種別ID
     * @param {CreateProductTypeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1CreateProductType(categoryId: string, body: CreateProductTypeRequest, options?: AxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1CreateProductType(categoryId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 品目削除
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1DeleteProductType(categoryId: string, productTypeId: string, options?: AxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1DeleteProductType(categoryId, productTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 品目一覧取得(商品種別指定なし)
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 品目名(あいまい検索)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1ListAllProductTypes(limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1ListAllProductTypes(limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 品目一覧取得
     * @param {string} categoryId 商品種別ID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 品目名(あいまい検索)(32文字以内)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1ListProductTypes(categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options?: AxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1ListProductTypes(categoryId, limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 品目更新
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {UpdateProductTypeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1UpdateProductType(categoryId: string, productTypeId: string, body: UpdateProductTypeRequest, options?: AxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1UpdateProductType(categoryId, productTypeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 品目アイコンアップロード
     * @param {File} [icon] 商品アイコン(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1UploadProductTypeIcon(icon?: File, options?: AxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1UploadProductTypeIcon(icon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary プロモーション登録
         * @param {CreatePromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreatePromotion: async (body: CreatePromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreatePromotion', 'body', body)
            const localVarPath = `/v1/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロモーション削除
         * @param {string} promotionId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeletePromotion: async (promotionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('v1DeletePromotion', 'promotionId', promotionId)
            const localVarPath = `/v1/promotions/{promotionId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロモーション取得
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetPromotion: async (promotionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('v1GetPromotion', 'promotionId', promotionId)
            const localVarPath = `/v1/promotions/{promotionId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロモーション一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [title] タイトル(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:title,public,publishedAt,startAt,endAt,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListPromotions: async (limit?: number, offset?: number, title?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロモーション更新
         * @param {string} promotionId 商品ID
         * @param {UpdatePromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdatePromotion: async (promotionId: string, body: UpdatePromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('v1UpdatePromotion', 'promotionId', promotionId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdatePromotion', 'body', body)
            const localVarPath = `/v1/promotions/{promotionId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary プロモーション登録
         * @param {CreatePromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreatePromotion(body: CreatePromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreatePromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロモーション削除
         * @param {string} promotionId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeletePromotion(promotionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeletePromotion(promotionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロモーション取得
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetPromotion(promotionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetPromotion(promotionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロモーション一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [title] タイトル(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:title,public,publishedAt,startAt,endAt,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListPromotions(limit?: number, offset?: number, title?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListPromotions(limit, offset, title, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロモーション更新
         * @param {string} promotionId 商品ID
         * @param {UpdatePromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdatePromotion(promotionId: string, body: UpdatePromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdatePromotion(promotionId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * 
         * @summary プロモーション登録
         * @param {CreatePromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreatePromotion(body: CreatePromotionRequest, options?: any): AxiosPromise<PromotionResponse> {
            return localVarFp.v1CreatePromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロモーション削除
         * @param {string} promotionId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeletePromotion(promotionId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeletePromotion(promotionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロモーション取得
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetPromotion(promotionId: string, options?: any): AxiosPromise<PromotionResponse> {
            return localVarFp.v1GetPromotion(promotionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロモーション一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [title] タイトル(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:title,public,publishedAt,startAt,endAt,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListPromotions(limit?: number, offset?: number, title?: string, orders?: string, options?: any): AxiosPromise<PromotionsResponse> {
            return localVarFp.v1ListPromotions(limit, offset, title, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロモーション更新
         * @param {string} promotionId 商品ID
         * @param {UpdatePromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdatePromotion(promotionId: string, body: UpdatePromotionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdatePromotion(promotionId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     * 
     * @summary プロモーション登録
     * @param {CreatePromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1CreatePromotion(body: CreatePromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1CreatePromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロモーション削除
     * @param {string} promotionId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1DeletePromotion(promotionId: string, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1DeletePromotion(promotionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロモーション取得
     * @param {string} promotionId プロモーションID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1GetPromotion(promotionId: string, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1GetPromotion(promotionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロモーション一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [title] タイトル(あいまい検索)(64文字以内)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:title,public,publishedAt,startAt,endAt,createdAt,updatedAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1ListPromotions(limit?: number, offset?: number, title?: string, orders?: string, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1ListPromotions(limit, offset, title, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロモーション更新
     * @param {string} promotionId 商品ID
     * @param {UpdatePromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1UpdatePromotion(promotionId: string, body: UpdatePromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1UpdatePromotion(promotionId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary マルシェ開催スケジュール承認
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {ApproveScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApproveSchedule: async (scheduleId: string, body: ApproveScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1ApproveSchedule', 'scheduleId', scheduleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ApproveSchedule', 'body', body)
            const localVarPath = `/v1/schedules/{scheduleId}/approval`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェ開催スケジュール登録
         * @param {CreateScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateSchedule: async (body: CreateScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateSchedule', 'body', body)
            const localVarPath = `/v1/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェ開催スケジュール取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetSchedule: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1GetSchedule', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェ開催スケジュール一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListSchedules: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マルシェ開催スケジュール更新
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {UpdateScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateSchedule: async (scheduleId: string, body: UpdateScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1UpdateSchedule', 'scheduleId', scheduleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateSchedule', 'body', body)
            const localVarPath = `/v1/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 開催スケジュール蓋絵アップロード
         * @param {File} [image] 開催スケジュール蓋絵画像(png形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadScheduleImage: async (image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/schedules/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 開催スケジュールオープニング動画アップロード
         * @param {File} [video] 開催スケジュールオープニング動画(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadScheduleOpeningVideo: async (video?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/schedules/opening-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 開催スケジュールサムネイルアップロード
         * @param {File} [image] 開催スケジュールサムネイル画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadScheduleThumbnail: async (image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/schedules/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary マルシェ開催スケジュール承認
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {ApproveScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApproveSchedule(scheduleId: string, body: ApproveScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApproveSchedule(scheduleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェ開催スケジュール登録
         * @param {CreateScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateSchedule(body: CreateScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateSchedule(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェ開催スケジュール取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetSchedule(scheduleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetSchedule(scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェ開催スケジュール一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListSchedules(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListSchedules(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マルシェ開催スケジュール更新
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {UpdateScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateSchedule(scheduleId: string, body: UpdateScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateSchedule(scheduleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 開催スケジュール蓋絵アップロード
         * @param {File} [image] 開催スケジュール蓋絵画像(png形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadScheduleImage(image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadScheduleImage(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 開催スケジュールオープニング動画アップロード
         * @param {File} [video] 開催スケジュールオープニング動画(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadScheduleOpeningVideo(video?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadScheduleOpeningVideo(video, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 開催スケジュールサムネイルアップロード
         * @param {File} [image] 開催スケジュールサムネイル画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadScheduleThumbnail(image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadScheduleThumbnail(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * 
         * @summary マルシェ開催スケジュール承認
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {ApproveScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApproveSchedule(scheduleId: string, body: ApproveScheduleRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1ApproveSchedule(scheduleId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェ開催スケジュール登録
         * @param {CreateScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateSchedule(body: CreateScheduleRequest, options?: any): AxiosPromise<ScheduleResponse> {
            return localVarFp.v1CreateSchedule(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェ開催スケジュール取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetSchedule(scheduleId: string, options?: any): AxiosPromise<ScheduleResponse> {
            return localVarFp.v1GetSchedule(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェ開催スケジュール一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListSchedules(limit?: number, offset?: number, options?: any): AxiosPromise<SchedulesResponse> {
            return localVarFp.v1ListSchedules(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マルシェ開催スケジュール更新
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {UpdateScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateSchedule(scheduleId: string, body: UpdateScheduleRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateSchedule(scheduleId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 開催スケジュール蓋絵アップロード
         * @param {File} [image] 開催スケジュール蓋絵画像(png形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadScheduleImage(image?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadScheduleImage(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 開催スケジュールオープニング動画アップロード
         * @param {File} [video] 開催スケジュールオープニング動画(mp4形式,200MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadScheduleOpeningVideo(video?: File, options?: any): AxiosPromise<UploadVideoResponse> {
            return localVarFp.v1UploadScheduleOpeningVideo(video, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 開催スケジュールサムネイルアップロード
         * @param {File} [image] 開催スケジュールサムネイル画像(png,jpeg形式,10MBまで)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadScheduleThumbnail(image?: File, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadScheduleThumbnail(image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @summary マルシェ開催スケジュール承認
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {ApproveScheduleRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1ApproveSchedule(scheduleId: string, body: ApproveScheduleRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1ApproveSchedule(scheduleId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェ開催スケジュール登録
     * @param {CreateScheduleRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1CreateSchedule(body: CreateScheduleRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1CreateSchedule(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェ開催スケジュール取得
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1GetSchedule(scheduleId: string, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1GetSchedule(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェ開催スケジュール一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1ListSchedules(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1ListSchedules(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マルシェ開催スケジュール更新
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {UpdateScheduleRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1UpdateSchedule(scheduleId: string, body: UpdateScheduleRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1UpdateSchedule(scheduleId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 開催スケジュール蓋絵アップロード
     * @param {File} [image] 開催スケジュール蓋絵画像(png形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1UploadScheduleImage(image?: File, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1UploadScheduleImage(image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 開催スケジュールオープニング動画アップロード
     * @param {File} [video] 開催スケジュールオープニング動画(mp4形式,200MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1UploadScheduleOpeningVideo(video?: File, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1UploadScheduleOpeningVideo(video, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 開催スケジュールサムネイルアップロード
     * @param {File} [image] 開催スケジュールサムネイル画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1UploadScheduleThumbnail(image?: File, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1UploadScheduleThumbnail(image, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 配送設定登録
         * @param {CreateShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateShipping: async (body: CreateShippingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateShipping', 'body', body)
            const localVarPath = `/v1/shippings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 配送設定削除
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteShipping: async (shippingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1DeleteShipping', 'shippingId', shippingId)
            const localVarPath = `/v1/shippings/{shippingId}`
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 配送設定取得
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetShipping: async (shippingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1GetShipping', 'shippingId', shippingId)
            const localVarPath = `/v1/shippings/{shippingId}`
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 配送設定一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [title] 配送設定名(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,hasFreeShipping,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListShippings: async (limit?: number, offset?: number, title?: string, orders?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/shippings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 配送設定更新
         * @param {string} shippingId 配送設定ID
         * @param {UpdateShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateShipping: async (shippingId: string, body: UpdateShippingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1UpdateShipping', 'shippingId', shippingId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateShipping', 'body', body)
            const localVarPath = `/v1/shippings/{shippingId}`
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 配送設定登録
         * @param {CreateShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateShipping(body: CreateShippingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateShipping(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 配送設定削除
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteShipping(shippingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteShipping(shippingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 配送設定取得
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetShipping(shippingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetShipping(shippingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 配送設定一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [title] 配送設定名(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,hasFreeShipping,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListShippings(limit?: number, offset?: number, title?: string, orders?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListShippings(limit, offset, title, orders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 配送設定更新
         * @param {string} shippingId 配送設定ID
         * @param {UpdateShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateShipping(shippingId: string, body: UpdateShippingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateShipping(shippingId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingApiFp(configuration)
    return {
        /**
         * 
         * @summary 配送設定登録
         * @param {CreateShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateShipping(body: CreateShippingRequest, options?: any): AxiosPromise<ShippingResponse> {
            return localVarFp.v1CreateShipping(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 配送設定削除
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteShipping(shippingId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteShipping(shippingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 配送設定取得
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetShipping(shippingId: string, options?: any): AxiosPromise<ShippingResponse> {
            return localVarFp.v1GetShipping(shippingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 配送設定一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [title] 配送設定名(あいまい検索)(64文字以内)
         * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,hasFreeShipping,createdAt,updatedAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListShippings(limit?: number, offset?: number, title?: string, orders?: string, options?: any): AxiosPromise<ShippingsResponse> {
            return localVarFp.v1ListShippings(limit, offset, title, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 配送設定更新
         * @param {string} shippingId 配送設定ID
         * @param {UpdateShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateShipping(shippingId: string, body: UpdateShippingRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateShipping(shippingId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * 
     * @summary 配送設定登録
     * @param {CreateShippingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CreateShipping(body: CreateShippingRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CreateShipping(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 配送設定削除
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1DeleteShipping(shippingId: string, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1DeleteShipping(shippingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 配送設定取得
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1GetShipping(shippingId: string, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1GetShipping(shippingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 配送設定一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [title] 配送設定名(あいまい検索)(64文字以内)
     * @param {string} [orders] ソート ・複数指定時は&#x60;,&#x60;区切り ・降順の場合はprefixに&#x60;-&#x60;をつける ・指定可能フィールド:name,hasFreeShipping,createdAt,updatedAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1ListShippings(limit?: number, offset?: number, title?: string, orders?: string, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1ListShippings(limit, offset, title, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 配送設定更新
     * @param {string} shippingId 配送設定ID
     * @param {UpdateShippingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1UpdateShipping(shippingId: string, body: UpdateShippingRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1UpdateShipping(shippingId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThreadApi - axios parameter creator
 * @export
 */
export const ThreadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary お問い合わせ会話登録
         * @param {CreateThreadRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateThread: async (body: CreateThreadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateThread', 'body', body)
            const localVarPath = `/v1/contacts/{contactId}/threads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ会話履歴削除
         * @param {string} threadId お問い合わせ会話ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteThread: async (threadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('v1DeleteThread', 'threadId', threadId)
            const localVarPath = `/v1/contacts/{contactId}/threads/{threadId}`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ会話履歴取得
         * @param {string} threadId お問い合わせ会話ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetThread: async (threadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('v1GetThread', 'threadId', threadId)
            const localVarPath = `/v1/contacts/{contactId}/threads/{threadId}`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ会話履歴一覧取得
         * @param {string} contactId お問い合わせID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListThreadsByContactId: async (contactId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ListThreadsByContactId', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contactId}/threads`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お問い合わせ会話履歴更新
         * @param {string} threadId お問い合わせ会話ID
         * @param {UpdateThreadRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateThread: async (threadId: string, body: UpdateThreadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('v1UpdateThread', 'threadId', threadId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateThread', 'body', body)
            const localVarPath = `/v1/contacts/{contactId}/threads/{threadId}`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreadApi - functional programming interface
 * @export
 */
export const ThreadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThreadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary お問い合わせ会話登録
         * @param {CreateThreadRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateThread(body: CreateThreadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThreadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateThread(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ会話履歴削除
         * @param {string} threadId お問い合わせ会話ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DeleteThread(threadId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeleteThread(threadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ会話履歴取得
         * @param {string} threadId お問い合わせ会話ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetThread(threadId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThreadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetThread(threadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ会話履歴一覧取得
         * @param {string} contactId お問い合わせID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListThreadsByContactId(contactId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThreadsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListThreadsByContactId(contactId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary お問い合わせ会話履歴更新
         * @param {string} threadId お問い合わせ会話ID
         * @param {UpdateThreadRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateThread(threadId: string, body: UpdateThreadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateThread(threadId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThreadApi - factory interface
 * @export
 */
export const ThreadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThreadApiFp(configuration)
    return {
        /**
         * 
         * @summary お問い合わせ会話登録
         * @param {CreateThreadRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateThread(body: CreateThreadRequest, options?: any): AxiosPromise<ThreadResponse> {
            return localVarFp.v1CreateThread(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ会話履歴削除
         * @param {string} threadId お問い合わせ会話ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DeleteThread(threadId: string, options?: any): AxiosPromise<object> {
            return localVarFp.v1DeleteThread(threadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ会話履歴取得
         * @param {string} threadId お問い合わせ会話ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetThread(threadId: string, options?: any): AxiosPromise<ThreadResponse> {
            return localVarFp.v1GetThread(threadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ会話履歴一覧取得
         * @param {string} contactId お問い合わせID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListThreadsByContactId(contactId: string, limit?: number, offset?: number, options?: any): AxiosPromise<ThreadsResponse> {
            return localVarFp.v1ListThreadsByContactId(contactId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お問い合わせ会話履歴更新
         * @param {string} threadId お問い合わせ会話ID
         * @param {UpdateThreadRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateThread(threadId: string, body: UpdateThreadRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateThread(threadId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThreadApi - object-oriented interface
 * @export
 * @class ThreadApi
 * @extends {BaseAPI}
 */
export class ThreadApi extends BaseAPI {
    /**
     * 
     * @summary お問い合わせ会話登録
     * @param {CreateThreadRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1CreateThread(body: CreateThreadRequest, options?: AxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1CreateThread(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ会話履歴削除
     * @param {string} threadId お問い合わせ会話ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1DeleteThread(threadId: string, options?: AxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1DeleteThread(threadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ会話履歴取得
     * @param {string} threadId お問い合わせ会話ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1GetThread(threadId: string, options?: AxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1GetThread(threadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ会話履歴一覧取得
     * @param {string} contactId お問い合わせID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1ListThreadsByContactId(contactId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1ListThreadsByContactId(contactId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お問い合わせ会話履歴更新
     * @param {string} threadId お問い合わせ会話ID
     * @param {UpdateThreadRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1UpdateThread(threadId: string, body: UpdateThreadRequest, options?: AxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1UpdateThread(threadId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 購入者一覧
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1GetUser', 'userId', userId)
            const localVarPath = `/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 購入者一覧
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListUsers: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 購入者一覧
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 購入者一覧
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListUsers(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListUsers(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary 購入者一覧
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetUser(userId: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.v1GetUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 購入者一覧
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListUsers(limit?: number, offset?: number, options?: any): AxiosPromise<UsersResponse> {
            return localVarFp.v1ListUsers(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 購入者一覧
     * @param {string} userId 購入者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1GetUser(userId: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1GetUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 購入者一覧
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1ListUsers(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).v1ListUsers(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



