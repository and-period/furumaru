/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AdminMeResponse
 */
export interface AdminMeResponse {
  /**
   * 管理者ID
   * @type {string}
   * @memberof AdminMeResponse
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof AdminMeResponse
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof AdminMeResponse
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof AdminMeResponse
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof AdminMeResponse
   */
  firstnameKana: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof AdminMeResponse
   */
  email: string
  /**
   * 権限 (1:管理者, 2:生産者)
   * @type {number}
   * @memberof AdminMeResponse
   */
  role: number
  /**
   * サムネイルURL
   * @type {string}
   * @memberof AdminMeResponse
   */
  thumbnailUrl: string
}
/**
 *
 * @export
 * @interface AdminResponse
 */
export interface AdminResponse {
  /**
   * 管理者ID
   * @type {string}
   * @memberof AdminResponse
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof AdminResponse
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof AdminResponse
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof AdminResponse
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof AdminResponse
   */
  firstnameKana: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof AdminResponse
   */
  email: string
  /**
   * 権限 (1:管理者, 2:生産者)
   * @type {number}
   * @memberof AdminResponse
   */
  role: number
  /**
   * サムネイルURL
   * @type {string}
   * @memberof AdminResponse
   */
  thumbnailUrl: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdminResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdminResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface AdminsResponse
 */
export interface AdminsResponse {
  /**
   * 管理者一覧
   * @type {Array<AdminsResponseAdmins>}
   * @memberof AdminsResponse
   */
  admins: Array<AdminsResponseAdmins>
}
/**
 *
 * @export
 * @interface AdminsResponseAdmins
 */
export interface AdminsResponseAdmins {
  /**
   * 管理者ID
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  id?: string
  /**
   * 姓
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  lastname?: string
  /**
   * 名
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  firstname?: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  lastnameKana?: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  firstnameKana?: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  email?: string
  /**
   * 権限 (1:管理者, 2:生産者)
   * @type {number}
   * @memberof AdminsResponseAdmins
   */
  role?: number
  /**
   * サムネイルURL
   * @type {string}
   * @memberof AdminsResponseAdmins
   */
  thumbnailUrl?: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdminsResponseAdmins
   */
  createdAt?: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdminsResponseAdmins
   */
  updatedAt?: number
}
/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   * 管理者ID
   * @type {string}
   * @memberof AuthResponse
   */
  adminId: string
  /**
   * アクセストークン
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken: string
  /**
   * 更新トークン
   * @type {string}
   * @memberof AuthResponse
   */
  refreshToken: string
  /**
   * 有効期限
   * @type {number}
   * @memberof AuthResponse
   */
  expiresIn: number
  /**
   * トークン種別
   * @type {string}
   * @memberof AuthResponse
   */
  tokenType: string
}
/**
 *
 * @export
 * @interface CreateAdminRequest
 */
export interface CreateAdminRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof CreateAdminRequest
   */
  email: string
  /**
   * 権限 (1:管理者, 2:生産者)
   * @type {number}
   * @memberof CreateAdminRequest
   */
  role: number
  /**
   * 姓
   * @type {string}
   * @memberof CreateAdminRequest
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof CreateAdminRequest
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof CreateAdminRequest
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof CreateAdminRequest
   */
  firstnameKana: string
}
/**
 *
 * @export
 * @interface CreateStoreRequest
 */
export interface CreateStoreRequest {
  /**
   * 店舗名
   * @type {string}
   * @memberof CreateStoreRequest
   */
  name: string
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * ステータスコード
   * @type {number}
   * @memberof ErrorResponse
   */
  status: number
  /**
   * エラー概要
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string
  /**
   * エラー詳細
   * @type {string}
   * @memberof ErrorResponse
   */
  details: string
}
/**
 *
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
  /**
   * 更新トークン
   * @type {string}
   * @memberof RefreshAuthTokenRequest
   */
  refreshToken: string
}
/**
 *
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
  /**
   * ユーザー名 (メールアドレス)
   * @type {string}
   * @memberof SignInRequest
   */
  username: string
  /**
   * パスワード
   * @type {string}
   * @memberof SignInRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface StoreResponse
 */
export interface StoreResponse {
  /**
   * 店舗ID
   * @type {number}
   * @memberof StoreResponse
   */
  id: number
  /**
   * 店舗名
   * @type {string}
   * @memberof StoreResponse
   */
  name: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof StoreResponse
   */
  thumbnailUrl: string
  /**
   * 店舗スタッフ一覧
   * @type {Array<StoreResponseStaffs>}
   * @memberof StoreResponse
   */
  staffs: Array<StoreResponseStaffs>
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof StoreResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof StoreResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface StoreResponseStaffs
 */
export interface StoreResponseStaffs {
  /**
   * 販売者ID
   * @type {string}
   * @memberof StoreResponseStaffs
   */
  id?: string
  /**
   * 販売者名
   * @type {string}
   * @memberof StoreResponseStaffs
   */
  name?: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof StoreResponseStaffs
   */
  email?: string
  /**
   * 権限 (1:管理者, 2:編集者, 3:閲覧者)
   * @type {number}
   * @memberof StoreResponseStaffs
   */
  role?: number
}
/**
 *
 * @export
 * @interface StoresResponse
 */
export interface StoresResponse {
  /**
   * 店舗一覧
   * @type {Array<StoresResponseStores>}
   * @memberof StoresResponse
   */
  stores: Array<StoresResponseStores>
}
/**
 *
 * @export
 * @interface StoresResponseStores
 */
export interface StoresResponseStores {
  /**
   * 店舗ID
   * @type {number}
   * @memberof StoresResponseStores
   */
  id?: number
  /**
   * 店舗名
   * @type {string}
   * @memberof StoresResponseStores
   */
  name?: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof StoresResponseStores
   */
  thumbnailUrl?: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof StoresResponseStores
   */
  createdAt?: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof StoresResponseStores
   */
  updatedAt?: number
}
/**
 *
 * @export
 * @interface UpdateAdminEmailRequest
 */
export interface UpdateAdminEmailRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof UpdateAdminEmailRequest
   */
  email: string
}
/**
 *
 * @export
 * @interface UpdateAdminPasswordRequest
 */
export interface UpdateAdminPasswordRequest {
  /**
   * 現在のパスワード
   * @type {string}
   * @memberof UpdateAdminPasswordRequest
   */
  oldPassword: string
  /**
   * 新しいパスワード (8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
   * @type {string}
   * @memberof UpdateAdminPasswordRequest
   */
  newPassword: string
  /**
   * パスワード (確認用)
   * @type {string}
   * @memberof UpdateAdminPasswordRequest
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface UpdateStoreRequest
 */
export interface UpdateStoreRequest {
  /**
   * 店舗名
   * @type {string}
   * @memberof UpdateStoreRequest
   */
  name: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof UpdateStoreRequest
   */
  thumbnailUrl: string
}
/**
 *
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
  /**
   *
   * @type {string}
   * @memberof UploadResponse
   */
  url?: string
}
/**
 *
 * @export
 * @interface VerifyAdminEmailRequest
 */
export interface VerifyAdminEmailRequest {
  /**
   * 認証コード
   * @type {string}
   * @memberof VerifyAdminEmailRequest
   */
  verifyCode: string
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 管理者登録
     * @param {CreateAdminRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAdmin: async (
      body: CreateAdminRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateAdmin', 'body', body)
      const localVarPath = `/v1/admins`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 管理者詳細取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAdmin: async (
      adminId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminId' is not null or undefined
      assertParamExists('v1GetAdmin', 'adminId', adminId)
      const localVarPath = `/v1/admins/{adminId}`.replace(
        `{${'adminId'}}`,
        encodeURIComponent(String(adminId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 管理者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAdminMe: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/admins/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 管理者一覧取得
     * @param {Array<number>} roles 取得対象権限
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListAdmins: async (
      roles: Array<number>,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roles' is not null or undefined
      assertParamExists('v1ListAdmins', 'roles', roles)
      const localVarPath = `/v1/admins`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (roles) {
        localVarQueryParameter['roles'] = roles.join(COLLECTION_FORMATS.csv)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAdminEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAdminEmail: async (
      body: UpdateAdminEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateAdminEmail', 'body', body)
      const localVarPath = `/v1/admins/me/email`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAdminPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAdminPassword: async (
      body: UpdateAdminPasswordRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateAdminPassword', 'body', body)
      const localVarPath = `/v1/admins/me/password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAdminEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAdminEmail: async (
      body: VerifyAdminEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1VerifyAdminEmail', 'body', body)
      const localVarPath = `/v1/admins/me/email/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 管理者登録
     * @param {CreateAdminRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateAdmin(
      body: CreateAdminRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateAdmin(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 管理者詳細取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAdmin(
      adminId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAdmin(
        adminId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 管理者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAdminMe(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminMeResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAdminMe(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 管理者一覧取得
     * @param {Array<number>} roles 取得対象権限
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListAdmins(
      roles: Array<number>,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListAdmins(
        roles,
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAdminEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateAdminEmail(
      body: UpdateAdminEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateAdminEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAdminPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateAdminPassword(
      body: UpdateAdminPasswordRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateAdminPassword(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAdminEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1VerifyAdminEmail(
      body: VerifyAdminEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1VerifyAdminEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminApiFp(configuration)
  return {
    /**
     *
     * @summary 管理者登録
     * @param {CreateAdminRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAdmin(
      body: CreateAdminRequest,
      options?: any
    ): AxiosPromise<AdminResponse> {
      return localVarFp
        .v1CreateAdmin(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 管理者詳細取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAdmin(adminId: string, options?: any): AxiosPromise<AdminResponse> {
      return localVarFp
        .v1GetAdmin(adminId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 管理者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAdminMe(options?: any): AxiosPromise<AdminMeResponse> {
      return localVarFp
        .v1GetAdminMe(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 管理者一覧取得
     * @param {Array<number>} roles 取得対象権限
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListAdmins(
      roles: Array<number>,
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<AdminsResponse> {
      return localVarFp
        .v1ListAdmins(roles, limit, offset, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAdminEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAdminEmail(
      body: UpdateAdminEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateAdminEmail(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAdminPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAdminPassword(
      body: UpdateAdminPasswordRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateAdminPassword(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAdminEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAdminEmail(
      body: VerifyAdminEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1VerifyAdminEmail(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   *
   * @summary 管理者登録
   * @param {CreateAdminRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1CreateAdmin(body: CreateAdminRequest, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .v1CreateAdmin(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 管理者詳細取得
   * @param {string} adminId 管理者ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1GetAdmin(adminId: string, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .v1GetAdmin(adminId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 管理者情報取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1GetAdminMe(options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .v1GetAdminMe(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 管理者一覧取得
   * @param {Array<number>} roles 取得対象権限
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1ListAdmins(
    roles: Array<number>,
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return AdminApiFp(this.configuration)
      .v1ListAdmins(roles, limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新
   * @param {UpdateAdminEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1UpdateAdminEmail(
    body: UpdateAdminEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AdminApiFp(this.configuration)
      .v1UpdateAdminEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary パスワード更新
   * @param {UpdateAdminPasswordRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1UpdateAdminPassword(
    body: UpdateAdminPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return AdminApiFp(this.configuration)
      .v1UpdateAdminPassword(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新 - コード検証
   * @param {VerifyAdminEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public v1VerifyAdminEmail(
    body: VerifyAdminEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AdminApiFp(this.configuration)
      .v1VerifyAdminEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken: async (
      body: RefreshAuthTokenRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1RefreshAuthToken', 'body', body)
      const localVarPath = `/v1/auth/refresh-token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn: async (
      body: SignInRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1SignIn', 'body', body)
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAuth(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1RefreshAuthToken(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignIn(
      body: SignInRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignOut(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1GetAuth(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: any
    ): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1RefreshAuthToken(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1SignIn(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut(options?: any): AxiosPromise<object> {
      return localVarFp
        .v1SignOut(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary トークン検証
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1GetAuth(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1GetAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary トークン更新
   * @param {RefreshAuthTokenRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1RefreshAuthToken(
    body: RefreshAuthTokenRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1RefreshAuthToken(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインイン
   * @param {SignInRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignIn(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignOut(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignOut(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * StoreApi - axios parameter creator
 * @export
 */
export const StoreApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 店舗登録
     * @param {CreateStoreRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateStore: async (
      body: CreateStoreRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateStore', 'body', body)
      const localVarPath = `/v1/stores`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 店舗詳細取得
     * @param {number} storeId 店舗ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetStore: async (
      storeId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'storeId' is not null or undefined
      assertParamExists('v1GetStore', 'storeId', storeId)
      const localVarPath = `/v1/stores/{storeId}`.replace(
        `{${'storeId'}}`,
        encodeURIComponent(String(storeId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 店舗一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListStores: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/stores`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 店舗更新
     * @param {UpdateStoreRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateStore: async (
      body: UpdateStoreRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateStore', 'body', body)
      const localVarPath = `/v1/stores/{storeId}`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 店舗サムネイルアップロード
     * @param {any} [thumbnail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadStoreThumbnail: async (
      thumbnail?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/upload/stores/thumbnail`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (thumbnail !== undefined) {
        localVarFormParams.append('thumbnail', thumbnail as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * StoreApi - functional programming interface
 * @export
 */
export const StoreApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StoreApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 店舗登録
     * @param {CreateStoreRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateStore(
      body: CreateStoreRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateStore(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 店舗詳細取得
     * @param {number} storeId 店舗ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetStore(
      storeId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetStore(
        storeId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 店舗一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListStores(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoresResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListStores(
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 店舗更新
     * @param {UpdateStoreRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateStore(
      body: UpdateStoreRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateStore(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 店舗サムネイルアップロード
     * @param {any} [thumbnail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UploadStoreThumbnail(
      thumbnail?: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UploadStoreThumbnail(
          thumbnail,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * StoreApi - factory interface
 * @export
 */
export const StoreApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = StoreApiFp(configuration)
  return {
    /**
     *
     * @summary 店舗登録
     * @param {CreateStoreRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateStore(
      body: CreateStoreRequest,
      options?: any
    ): AxiosPromise<StoreResponse> {
      return localVarFp
        .v1CreateStore(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 店舗詳細取得
     * @param {number} storeId 店舗ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetStore(storeId: number, options?: any): AxiosPromise<StoreResponse> {
      return localVarFp
        .v1GetStore(storeId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 店舗一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListStores(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<StoresResponse> {
      return localVarFp
        .v1ListStores(limit, offset, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 店舗更新
     * @param {UpdateStoreRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateStore(
      body: UpdateStoreRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateStore(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 店舗サムネイルアップロード
     * @param {any} [thumbnail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadStoreThumbnail(
      thumbnail?: any,
      options?: any
    ): AxiosPromise<UploadResponse> {
      return localVarFp
        .v1UploadStoreThumbnail(thumbnail, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * StoreApi - object-oriented interface
 * @export
 * @class StoreApi
 * @extends {BaseAPI}
 */
export class StoreApi extends BaseAPI {
  /**
   *
   * @summary 店舗登録
   * @param {CreateStoreRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StoreApi
   */
  public v1CreateStore(body: CreateStoreRequest, options?: AxiosRequestConfig) {
    return StoreApiFp(this.configuration)
      .v1CreateStore(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 店舗詳細取得
   * @param {number} storeId 店舗ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StoreApi
   */
  public v1GetStore(storeId: number, options?: AxiosRequestConfig) {
    return StoreApiFp(this.configuration)
      .v1GetStore(storeId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 店舗一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StoreApi
   */
  public v1ListStores(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return StoreApiFp(this.configuration)
      .v1ListStores(limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 店舗更新
   * @param {UpdateStoreRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StoreApi
   */
  public v1UpdateStore(body: UpdateStoreRequest, options?: AxiosRequestConfig) {
    return StoreApiFp(this.configuration)
      .v1UpdateStore(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 店舗サムネイルアップロード
   * @param {any} [thumbnail]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StoreApi
   */
  public v1UploadStoreThumbnail(thumbnail?: any, options?: AxiosRequestConfig) {
    return StoreApiFp(this.configuration)
      .v1UploadStoreThumbnail(thumbnail, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
