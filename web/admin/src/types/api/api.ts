/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdministratorResponse
 */
export interface AdministratorResponse {
    /**
     * システム管理者ID
     * @type {string}
     * @memberof AdministratorResponse
     */
    'id': string;
    /**
     * 姓
     * @type {string}
     * @memberof AdministratorResponse
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof AdministratorResponse
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof AdministratorResponse
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof AdministratorResponse
     */
    'firstnameKana': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AdministratorResponse
     */
    'email': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof AdministratorResponse
     */
    'phoneNumber': string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof AdministratorResponse
     */
    'createdAt': number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof AdministratorResponse
     */
    'updatedAt': number;
}
/**
 * 
 * @export
 * @interface AdministratorsResponse
 */
export interface AdministratorsResponse {
    /**
     * システム管理者一覧
     * @type {Array<AdministratorsResponseAdministrators>}
     * @memberof AdministratorsResponse
     */
    'administrators': Array<AdministratorsResponseAdministrators>;
}
/**
 * 
 * @export
 * @interface AdministratorsResponseAdministrators
 */
export interface AdministratorsResponseAdministrators {
    /**
     * システム管理者ID
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'lastname'?: string;
    /**
     * 名
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'firstname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'lastnameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'firstnameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'email'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof AdministratorsResponseAdministrators
     */
    'phoneNumber'?: string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof AdministratorsResponseAdministrators
     */
    'createdAt'?: number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof AdministratorsResponseAdministrators
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 管理者ID
     * @type {string}
     * @memberof AuthResponse
     */
    'adminId': string;
    /**
     * アクセストークン
     * @type {string}
     * @memberof AuthResponse
     */
    'accessToken': string;
    /**
     * 更新トークン
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken': string;
    /**
     * 有効期限
     * @type {number}
     * @memberof AuthResponse
     */
    'expiresIn': number;
    /**
     * トークン種別
     * @type {string}
     * @memberof AuthResponse
     */
    'tokenType': string;
}
/**
 * 
 * @export
 * @interface AuthUserResponse
 */
export interface AuthUserResponse {
    /**
     * 管理者ID
     * @type {string}
     * @memberof AuthUserResponse
     */
    'id': string;
    /**
     * 姓
     * @type {string}
     * @memberof AuthUserResponse
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof AuthUserResponse
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof AuthUserResponse
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof AuthUserResponse
     */
    'firstnameKana': string;
    /**
     * 店舗名
     * @type {string}
     * @memberof AuthUserResponse
     */
    'storeName': string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof AuthUserResponse
     */
    'thumbnailUrl': string;
    /**
     * 権限 (1:管理者, 2:仲介者, 3:生産者)
     * @type {number}
     * @memberof AuthUserResponse
     */
    'role': number;
}
/**
 * 
 * @export
 * @interface CreateAdministratorRequest
 */
export interface CreateAdministratorRequest {
    /**
     * 姓
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'lastname': string;
    /**
     * 名
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'firstname': string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'lastnameKana': string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'firstnameKana': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'email': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof CreateAdministratorRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * ステータスコード
     * @type {number}
     * @memberof ErrorResponse
     */
    'status': number;
    /**
     * エラー概要
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * エラー詳細
     * @type {string}
     * @memberof ErrorResponse
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
    /**
     * 更新トークン
     * @type {string}
     * @memberof RefreshAuthTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * ユーザー名 (メールアドレス)
     * @type {string}
     * @memberof SignInRequest
     */
    'username': string;
    /**
     * パスワード
     * @type {string}
     * @memberof SignInRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UpdateAuthEmailRequest
 */
export interface UpdateAuthEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateAuthEmailRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateAuthPasswordRequest
 */
export interface UpdateAuthPasswordRequest {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof UpdateAuthPasswordRequest
     */
    'oldPassword': string;
    /**
     * 新しいパスワード (8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
     * @type {string}
     * @memberof UpdateAuthPasswordRequest
     */
    'newPassword': string;
    /**
     * パスワード (確認用)
     * @type {string}
     * @memberof UpdateAuthPasswordRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface UploadImageResponse
 */
export interface UploadImageResponse {
    /**
     * 画像アップロード先URL
     * @type {string}
     * @memberof UploadImageResponse
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface VerifyAuthEmailRequest
 */
export interface VerifyAuthEmailRequest {
    /**
     * 認証コード
     * @type {string}
     * @memberof VerifyAuthEmailRequest
     */
    'verifyCode': string;
}

/**
 * AdministratorApi - axios parameter creator
 * @export
 */
export const AdministratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary システム管理者登録
         * @param {CreateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateAdministrator: async (body: CreateAdministratorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1CreateAdministrator', 'body', body)
            const localVarPath = `/v1/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAdministrator: async (adminId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1GetAdministrator', 'adminId', adminId)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数
         * @param {number} [offset] 取得開始位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListAdministrators: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdministratorApi - functional programming interface
 * @export
 */
export const AdministratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdministratorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary システム管理者登録
         * @param {CreateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CreateAdministrator(body: CreateAdministratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateAdministrator(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAdministrator(adminId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAdministrator(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数
         * @param {number} [offset] 取得開始位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListAdministrators(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListAdministrators(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdministratorApi - factory interface
 * @export
 */
export const AdministratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdministratorApiFp(configuration)
    return {
        /**
         * 
         * @summary システム管理者登録
         * @param {CreateAdministratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CreateAdministrator(body: CreateAdministratorRequest, options?: any): AxiosPromise<AdministratorResponse> {
            return localVarFp.v1CreateAdministrator(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAdministrator(adminId: string, options?: any): AxiosPromise<AdministratorResponse> {
            return localVarFp.v1GetAdministrator(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数
         * @param {number} [offset] 取得開始位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListAdministrators(limit?: number, offset?: number, options?: any): AxiosPromise<AdministratorsResponse> {
            return localVarFp.v1ListAdministrators(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdministratorApi - object-oriented interface
 * @export
 * @class AdministratorApi
 * @extends {BaseAPI}
 */
export class AdministratorApi extends BaseAPI {
    /**
     * 
     * @summary システム管理者登録
     * @param {CreateAdministratorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1CreateAdministrator(body: CreateAdministratorRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1CreateAdministrator(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1GetAdministrator(adminId: string, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1GetAdministrator(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary システム管理者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1ListAdministrators(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1ListAdministrators(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 認証済みユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuthUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RefreshAuthToken: async (body: RefreshAuthTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1RefreshAuthToken', 'body', body)
            const localVarPath = `/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignIn: async (body: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1SignIn', 'body', body)
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignOut: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthEmail: async (body: UpdateAuthEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAuthEmail', 'body', body)
            const localVarPath = `/v1/auth/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthPassword: async (body: UpdateAuthPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1UpdateAuthPassword', 'body', body)
            const localVarPath = `/v1/auth/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyAuthEmail: async (body: VerifyAuthEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1VerifyAuthEmail', 'body', body)
            const localVarPath = `/v1/auth/email/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 認証済みユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GetAuthUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuthUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RefreshAuthToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignIn(body: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignOut(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAuthEmail(body: UpdateAuthEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAuthEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UpdateAuthPassword(body: UpdateAuthPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateAuthPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VerifyAuthEmail(body: VerifyAuthEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerifyAuthEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1GetAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 認証済みユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GetAuthUser(options?: any): AxiosPromise<AuthUserResponse> {
            return localVarFp.v1GetAuthUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary トークン更新
         * @param {RefreshAuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1RefreshAuthToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary サインイン
         * @param {SignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1SignIn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignOut(options?: any): AxiosPromise<object> {
            return localVarFp.v1SignOut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレス更新
         * @param {UpdateAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthEmail(body: UpdateAuthEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAuthEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワード更新
         * @param {UpdateAuthPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UpdateAuthPassword(body: UpdateAuthPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1UpdateAuthPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレス更新 - コード検証
         * @param {VerifyAuthEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerifyAuthEmail(body: VerifyAuthEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.v1VerifyAuthEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1GetAuth(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1GetAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 認証済みユーザー情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1GetAuthUser(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1GetAuthUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1RefreshAuthToken(body: RefreshAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1RefreshAuthToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary サインイン
     * @param {SignInRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1SignIn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1SignOut(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1SignOut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1UpdateAuthEmail(body: UpdateAuthEmailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1UpdateAuthEmail(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1UpdateAuthPassword(body: UpdateAuthPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1UpdateAuthPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1VerifyAuthEmail(body: VerifyAuthEmailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1VerifyAuthEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoordinatorApi - axios parameter creator
 * @export
 */
export const CoordinatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 仲介者サムネイルアップロード
         * @param {any} [thumbnail] 仲介者サムネイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorThumbnail: async (thumbnail?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/coordinators/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', thumbnail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoordinatorApi - functional programming interface
 * @export
 */
export const CoordinatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoordinatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 仲介者サムネイルアップロード
         * @param {any} [thumbnail] 仲介者サムネイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorThumbnail(thumbnail?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorThumbnail(thumbnail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoordinatorApi - factory interface
 * @export
 */
export const CoordinatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoordinatorApiFp(configuration)
    return {
        /**
         * 
         * @summary 仲介者サムネイルアップロード
         * @param {any} [thumbnail] 仲介者サムネイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorThumbnail(thumbnail?: any, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadCoordinatorThumbnail(thumbnail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoordinatorApi - object-oriented interface
 * @export
 * @class CoordinatorApi
 * @extends {BaseAPI}
 */
export class CoordinatorApi extends BaseAPI {
    /**
     * 
     * @summary 仲介者サムネイルアップロード
     * @param {any} [thumbnail] 仲介者サムネイル
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1UploadCoordinatorThumbnail(thumbnail?: any, options?: AxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1UploadCoordinatorThumbnail(thumbnail, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProducerApi - axios parameter creator
 * @export
 */
export const ProducerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 生産者サムネイルアップロード
         * @param {any} [thumbnail] 生産者サムネイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerThumbnail: async (thumbnail?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/upload/producers/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', thumbnail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProducerApi - functional programming interface
 * @export
 */
export const ProducerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProducerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 生産者サムネイルアップロード
         * @param {any} [thumbnail] 生産者サムネイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducerThumbnail(thumbnail?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducerThumbnail(thumbnail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProducerApi - factory interface
 * @export
 */
export const ProducerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProducerApiFp(configuration)
    return {
        /**
         * 
         * @summary 生産者サムネイルアップロード
         * @param {any} [thumbnail] 生産者サムネイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducerThumbnail(thumbnail?: any, options?: any): AxiosPromise<UploadImageResponse> {
            return localVarFp.v1UploadProducerThumbnail(thumbnail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProducerApi - object-oriented interface
 * @export
 * @class ProducerApi
 * @extends {BaseAPI}
 */
export class ProducerApi extends BaseAPI {
    /**
     * 
     * @summary 生産者サムネイルアップロード
     * @param {any} [thumbnail] 生産者サムネイル
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1UploadProducerThumbnail(thumbnail?: any, options?: AxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1UploadProducerThumbnail(thumbnail, options).then((request) => request(this.axios, this.basePath));
    }
}


