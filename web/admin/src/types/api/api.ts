/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AdministratorResponse
 */
export interface AdministratorResponse {
  /**
   * システム管理者ID
   * @type {string}
   * @memberof AdministratorResponse
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof AdministratorResponse
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof AdministratorResponse
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof AdministratorResponse
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof AdministratorResponse
   */
  firstnameKana: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof AdministratorResponse
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof AdministratorResponse
   */
  phoneNumber: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdministratorResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdministratorResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface AdministratorsResponse
 */
export interface AdministratorsResponse {
  /**
   * システム管理者一覧
   * @type {Array<AdministratorsResponseAdministrators>}
   * @memberof AdministratorsResponse
   */
  administrators: Array<AdministratorsResponseAdministrators>
  /**
   * 合計数
   * @type {number}
   * @memberof AdministratorsResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface AdministratorsResponseAdministrators
 */
export interface AdministratorsResponseAdministrators {
  /**
   * システム管理者ID
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  firstnameKana: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof AdministratorsResponseAdministrators
   */
  phoneNumber: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdministratorsResponseAdministrators
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof AdministratorsResponseAdministrators
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   * 管理者ID
   * @type {string}
   * @memberof AuthResponse
   */
  adminId: string
  /**
   * 権限(1:システム管理者,2:仲介者,3:生産者)
   * @type {number}
   * @memberof AuthResponse
   */
  role: number
  /**
   * アクセストークン
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken: string
  /**
   * 更新トークン
   * @type {string}
   * @memberof AuthResponse
   */
  refreshToken: string
  /**
   * 有効期限
   * @type {number}
   * @memberof AuthResponse
   */
  expiresIn: number
  /**
   * トークン種別
   * @type {string}
   * @memberof AuthResponse
   */
  tokenType: string
}
/**
 *
 * @export
 * @interface CategoriesResponse
 */
export interface CategoriesResponse {
  /**
   * 商品種別一覧
   * @type {Array<CategoriesResponseCategories>}
   * @memberof CategoriesResponse
   */
  categories: Array<CategoriesResponseCategories>
  /**
   * 合計数
   * @type {number}
   * @memberof CategoriesResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface CategoriesResponseCategories
 */
export interface CategoriesResponseCategories {
  /**
   * 商品種別ID
   * @type {string}
   * @memberof CategoriesResponseCategories
   */
  id: string
  /**
   * カテゴリ名
   * @type {string}
   * @memberof CategoriesResponseCategories
   */
  name: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CategoriesResponseCategories
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CategoriesResponseCategories
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
  /**
   * 商品種別ID
   * @type {string}
   * @memberof CategoryResponse
   */
  id: string
  /**
   * カテゴリ名
   * @type {string}
   * @memberof CategoryResponse
   */
  name: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CategoryResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CategoryResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
  /**
   * お問い合わせID
   * @type {string}
   * @memberof ContactResponse
   */
  id: string
  /**
   * 件名
   * @type {string}
   * @memberof ContactResponse
   */
  title: string
  /**
   * 内容
   * @type {string}
   * @memberof ContactResponse
   */
  content: string
  /**
   * 氏名
   * @type {string}
   * @memberof ContactResponse
   */
  username: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof ContactResponse
   */
  email: string
  /**
   * 電話番号(国際番号 + 電話番号)
   * @type {string}
   * @memberof ContactResponse
   */
  phoneNumber: string
  /**
   * 対応状況(0:不明,1:ToDo,2:進行中,3:完了,4:対応不要)
   * @type {number}
   * @memberof ContactResponse
   */
  status: number
  /**
   * 優先度(0:不明1:低,2:中,3:高)
   * @type {number}
   * @memberof ContactResponse
   */
  priority: number
  /**
   * 対応時メモ
   * @type {string}
   * @memberof ContactResponse
   */
  note: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ContactResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ContactResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ContactsResponse
 */
export interface ContactsResponse {
  /**
   * お問い合わせ一覧
   * @type {Array<ContactsResponseContacts>}
   * @memberof ContactsResponse
   */
  contacts: Array<ContactsResponseContacts>
  /**
   * 合計数
   * @type {number}
   * @memberof ContactsResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface ContactsResponseContacts
 */
export interface ContactsResponseContacts {
  /**
   * お問い合わせID
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  id: string
  /**
   * 件名
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  title: string
  /**
   * 内容
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  content: string
  /**
   * 氏名
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  username: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  email: string
  /**
   * 電話番号(国際番号 + 電話番号)
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  phoneNumber: string
  /**
   * 対応状況(0:不明,1:ToDo,2:進行中,3:完了,4:対応不要)
   * @type {number}
   * @memberof ContactsResponseContacts
   */
  status: number
  /**
   * 優先度(0:不明1:低,2:中,3:高)
   * @type {number}
   * @memberof ContactsResponseContacts
   */
  priority: number
  /**
   * 対応時メモ
   * @type {string}
   * @memberof ContactsResponseContacts
   */
  note: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ContactsResponseContacts
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ContactsResponseContacts
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface CoordinatorResponse
 */
export interface CoordinatorResponse {
  /**
   * 仲介者ID
   * @type {string}
   * @memberof CoordinatorResponse
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof CoordinatorResponse
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof CoordinatorResponse
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof CoordinatorResponse
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof CoordinatorResponse
   */
  firstnameKana: string
  /**
   * 会社名
   * @type {string}
   * @memberof CoordinatorResponse
   */
  companyName: string
  /**
   * 店舗名
   * @type {string}
   * @memberof CoordinatorResponse
   */
  storeName: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof CoordinatorResponse
   */
  thumbnailUrl: string
  /**
   * ヘッダー画像URL
   * @type {string}
   * @memberof CoordinatorResponse
   */
  headerUrl: string
  /**
   * Twitterアカウント
   * @type {string}
   * @memberof CoordinatorResponse
   */
  twitterAccount: string
  /**
   * Instagramアカウント
   * @type {string}
   * @memberof CoordinatorResponse
   */
  instagramAccount: string
  /**
   * Facebookアカウント
   * @type {string}
   * @memberof CoordinatorResponse
   */
  facebookAccount: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof CoordinatorResponse
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof CoordinatorResponse
   */
  phoneNumber: string
  /**
   * 郵便番号
   * @type {string}
   * @memberof CoordinatorResponse
   */
  postalCode: string
  /**
   * 都道府県
   * @type {string}
   * @memberof CoordinatorResponse
   */
  prefecture: string
  /**
   * 市区町村
   * @type {string}
   * @memberof CoordinatorResponse
   */
  city: string
  /**
   * 町名・番地
   * @type {string}
   * @memberof CoordinatorResponse
   */
  addressLine1: string
  /**
   * ビル名・号室など
   * @type {string}
   * @memberof CoordinatorResponse
   */
  addressLine2: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CoordinatorResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CoordinatorResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface CoordinatorsResponse
 */
export interface CoordinatorsResponse {
  /**
   * 仲介者一覧
   * @type {Array<CoordinatorsResponseCoordinators>}
   * @memberof CoordinatorsResponse
   */
  coordinators: Array<CoordinatorsResponseCoordinators>
  /**
   * 合計数
   * @type {number}
   * @memberof CoordinatorsResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface CoordinatorsResponseCoordinators
 */
export interface CoordinatorsResponseCoordinators {
  /**
   * 仲介者ID
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  firstnameKana: string
  /**
   * 会社名
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  companyName: string
  /**
   * 店舗名
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  storeName: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  thumbnailUrl: string
  /**
   * ヘッダー画像URL
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  headerUrl: string
  /**
   * Twitterアカウント
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  twitterAccount: string
  /**
   * Instagramアカウント
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  instagramAccount: string
  /**
   * Facebookアカウント
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  facebookAccount: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  phoneNumber: string
  /**
   * 郵便番号
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  postalCode: string
  /**
   * 都道府県
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  prefecture: string
  /**
   * 市区町村
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  city: string
  /**
   * 町名・番地
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  addressLine1: string
  /**
   * ビル名・号室など
   * @type {string}
   * @memberof CoordinatorsResponseCoordinators
   */
  addressLine2: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CoordinatorsResponseCoordinators
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof CoordinatorsResponseCoordinators
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface CreateAdministratorRequest
 */
export interface CreateAdministratorRequest {
  /**
   * 姓(16文字まで)
   * @type {string}
   * @memberof CreateAdministratorRequest
   */
  lastname: string
  /**
   * 名(16文字まで)
   * @type {string}
   * @memberof CreateAdministratorRequest
   */
  firstname: string
  /**
   * 姓(かな)(ひらがな,32文字まで)
   * @type {string}
   * @memberof CreateAdministratorRequest
   */
  lastnameKana: string
  /**
   * 名(かな)(ひらがな,32文字まで)
   * @type {string}
   * @memberof CreateAdministratorRequest
   */
  firstnameKana: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof CreateAdministratorRequest
   */
  email: string
  /**
   * 電話番号(国際番号 + 電話番号)
   * @type {string}
   * @memberof CreateAdministratorRequest
   */
  phoneNumber: string
}
/**
 *
 * @export
 * @interface CreateCategoryRequest
 */
export interface CreateCategoryRequest {
  /**
   * カテゴリ名(32文字まで)
   * @type {string}
   * @memberof CreateCategoryRequest
   */
  name: string
}
/**
 *
 * @export
 * @interface CreateCoordinatorRequest
 */
export interface CreateCoordinatorRequest {
  /**
   * 姓(16文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  lastname: string
  /**
   * 名(16文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  firstname: string
  /**
   * 姓(かな)(ひらがな,32文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  lastnameKana: string
  /**
   * 名(かな)(ひらがな,32文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  firstnameKana: string
  /**
   * 会社名(64文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  companyName: string
  /**
   * 店舗名(64文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  storeName: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  thumbnailUrl?: string
  /**
   * ヘッダー画像URL
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  headerUrl?: string
  /**
   * Twitterアカウント(15文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  twitterAccount?: string
  /**
   * Instagramアカウント(30文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  instagramAccount?: string
  /**
   * Facebookアカウント(50文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  facebookAccount?: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  phoneNumber: string
  /**
   * 郵便番号(ハイフンなし)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  postalCode: string
  /**
   * 都道府県(32文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  prefecture: string
  /**
   * 市区町村(32文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  city: string
  /**
   * 町名・番地(64文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  addressLine1: string
  /**
   * ビル名・号室など(64文字まで)
   * @type {string}
   * @memberof CreateCoordinatorRequest
   */
  addressLine2: string
}
/**
 *
 * @export
 * @interface CreateProducerRequest
 */
export interface CreateProducerRequest {
  /**
   * 姓(16文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  lastname: string
  /**
   * 名(16文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  firstname: string
  /**
   * 姓(かな)(ひらがな,32文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  lastnameKana: string
  /**
   * 名(かな)(ひらがな,32文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  firstnameKana: string
  /**
   * 店舗名(64文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  storeName: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof CreateProducerRequest
   */
  thumbnailUrl?: string
  /**
   * ヘッダー画像URL
   * @type {string}
   * @memberof CreateProducerRequest
   */
  headerUrl?: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof CreateProducerRequest
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  phoneNumber: string
  /**
   * 郵便番号(ハイフンなし)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  postalCode: string
  /**
   * 都道府県(32文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  prefecture: string
  /**
   * 市区町村(32文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  city: string
  /**
   * 町名・番地(64文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  addressLine1: string
  /**
   * ビル名・号室など(64文字まで)
   * @type {string}
   * @memberof CreateProducerRequest
   */
  addressLine2: string
}
/**
 *
 * @export
 * @interface CreateProductRequest
 */
export interface CreateProductRequest {
  /**
   * 商品名(128文字まで)
   * @type {string}
   * @memberof CreateProductRequest
   */
  name: string
  /**
   * 商品説明(20000文字まで)
   * @type {string}
   * @memberof CreateProductRequest
   */
  description: string
  /**
   * 生産者ID
   * @type {string}
   * @memberof CreateProductRequest
   */
  producerId: string
  /**
   * 商品種別ID
   * @type {string}
   * @memberof CreateProductRequest
   */
  categoryId: string
  /**
   * 品目ID
   * @type {string}
   * @memberof CreateProductRequest
   */
  productTypeId: string
  /**
   * 公開フラグ
   * @type {boolean}
   * @memberof CreateProductRequest
   */
  public: boolean
  /**
   * 在庫数(0以上)
   * @type {number}
   * @memberof CreateProductRequest
   */
  inventory: number
  /**
   * 重量(0以上,kg単位:少数第1位まで)
   * @type {number}
   * @memberof CreateProductRequest
   */
  weight: number
  /**
   * 数量単位(16文字まで)
   * @type {string}
   * @memberof CreateProductRequest
   */
  itemUnit: string
  /**
   * 数量単位説明(64文字まで)
   * @type {string}
   * @memberof CreateProductRequest
   */
  itemDescription: string
  /**
   * メディア一覧(8つまで)
   * @type {Array<ProductsResponseMedia>}
   * @memberof CreateProductRequest
   */
  media: Array<ProductsResponseMedia>
  /**
   * 販売価格(0以上)
   * @type {number}
   * @memberof CreateProductRequest
   */
  price: number
  /**
   * 配送方法(1:通常便,2:冷蔵便,3:冷凍便)
   * @type {number}
   * @memberof CreateProductRequest
   */
  deliveryType: number
  /**
   * 箱の占有率(サイズ:60)(0以上,100以下)
   * @type {number}
   * @memberof CreateProductRequest
   */
  box60Rate: number
  /**
   * 箱の占有率(サイズ:80)(0以上,100以下)
   * @type {number}
   * @memberof CreateProductRequest
   */
  box80Rate: number
  /**
   * 箱の占有率(サイズ:100)(0以上,100以下)
   * @type {number}
   * @memberof CreateProductRequest
   */
  box100Rate: number
  /**
   * 原産地(都道府県)(32文字まで)
   * @type {string}
   * @memberof CreateProductRequest
   */
  originPrefecture: string
  /**
   * 原産地(市区町村)(32文字まで)
   * @type {string}
   * @memberof CreateProductRequest
   */
  originCity: string
}
/**
 *
 * @export
 * @interface CreateProductTypeRequest
 */
export interface CreateProductTypeRequest {
  /**
   * 品目名(32文字まで)
   * @type {string}
   * @memberof CreateProductTypeRequest
   */
  name: string
}
/**
 *
 * @export
 * @interface CreateShippingRate
 */
export interface CreateShippingRate {
  /**
   * 配送料金設定名
   * @type {string}
   * @memberof CreateShippingRate
   */
  name: string
  /**
   * 配送料金(100万未満)
   * @type {number}
   * @memberof CreateShippingRate
   */
  price: number
  /**
   * 対象都道府県コード一覧
   * @type {Array<string>}
   * @memberof CreateShippingRate
   */
  prefectures: Array<string>
}
/**
 *
 * @export
 * @interface CreateShippingRequest
 */
export interface CreateShippingRequest {
  /**
   * 配送設定名(64文字まで)
   * @type {string}
   * @memberof CreateShippingRequest
   */
  name: string
  /**
   * 箱サイズ60の通常配送料一覧(すべての都道府県の設定が必須)
   * @type {Array<CreateShippingRate>}
   * @memberof CreateShippingRequest
   */
  box60Rates: Array<CreateShippingRate>
  /**
   * 箱サイズ60の冷蔵便追加配送料(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  box60Refrigerated: number
  /**
   * 箱サイズ60の冷凍便追加配送料(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  box60Frozen: number
  /**
   * 箱サイズ80の通常配送料一覧(すべての都道府県の設定が必須)
   * @type {Array<CreateShippingRate>}
   * @memberof CreateShippingRequest
   */
  box80Rates: Array<CreateShippingRate>
  /**
   * 箱サイズ80の冷蔵便追加配送料(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  box80Refrigerated: number
  /**
   * 箱サイズ80の冷凍便追加配送料(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  box80Frozen: number
  /**
   * 箱サイズ100の通常配送料一覧(すべての都道府県の設定が必須)
   * @type {Array<CreateShippingRate>}
   * @memberof CreateShippingRequest
   */
  box100Rates: Array<CreateShippingRate>
  /**
   * 箱サイズ100の冷蔵便追加配送料(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  box100Refrigerated: number
  /**
   * 箱サイズ100の冷凍便追加配送料(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  box100Frozen: number
  /**
   * 送料無料オプションの有無
   * @type {boolean}
   * @memberof CreateShippingRequest
   */
  hasFreeShipping: boolean
  /**
   * 送料無料になる金額(100万未満)
   * @type {number}
   * @memberof CreateShippingRequest
   */
  freeShippingRates: number
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * ステータスコード
   * @type {number}
   * @memberof ErrorResponse
   */
  status: number
  /**
   * エラー概要
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string
  /**
   * エラー詳細
   * @type {string}
   * @memberof ErrorResponse
   */
  details: string
}
/**
 * 都道府県コード
 * @export
 * @enum {string}
 */

export const Prefecture = {
  Hokkaido: 'hokkaido',
  Aomori: 'aomori',
  Iwate: 'iwate',
  Miyagi: 'miyagi',
  Akita: 'akita',
  Yamagata: 'yamagata',
  Fukushima: 'fukushima',
  Ibaraki: 'ibaraki',
  Tochigi: 'tochigi',
  Gunma: 'gunma',
  Saitama: 'saitama',
  Chiba: 'chiba',
  Tokyo: 'tokyo',
  Kanagawa: 'kanagawa',
  Niigata: 'niigata',
  Toyama: 'toyama',
  Ishikawa: 'ishikawa',
  Fukui: 'fukui',
  Yamanashi: 'yamanashi',
  Nagano: 'nagano',
  Gifu: 'gifu',
  Shizuoka: 'shizuoka',
  Aichi: 'aichi',
  Mie: 'mie',
  Shiga: 'shiga',
  Kyoto: 'kyoto',
  Osaka: 'osaka',
  Hyogo: 'hyogo',
  Nara: 'nara',
  Wakayama: 'wakayama',
  Tottori: 'tottori',
  Shimane: 'shimane',
  Okayama: 'okayama',
  Hiroshima: 'hiroshima',
  Yamaguchi: 'yamaguchi',
  Tokushima: 'tokushima',
  Kagawa: 'kagawa',
  Ehime: 'ehime',
  Kochi: 'kochi',
  Fukuoka: 'fukuoka',
  Saga: 'saga',
  Nagasaki: 'nagasaki',
  Kumamoto: 'kumamoto',
  Oita: 'oita',
  Miyazaki: 'miyazaki',
  Kagoshima: 'kagoshima',
  Okinawa: 'okinawa',
} as const

export type Prefecture = typeof Prefecture[keyof typeof Prefecture]

/**
 *
 * @export
 * @interface ProducerResponse
 */
export interface ProducerResponse {
  /**
   * 生産者ID
   * @type {string}
   * @memberof ProducerResponse
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof ProducerResponse
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof ProducerResponse
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof ProducerResponse
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof ProducerResponse
   */
  firstnameKana: string
  /**
   * 店舗名
   * @type {string}
   * @memberof ProducerResponse
   */
  storeName: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof ProducerResponse
   */
  thumbnailUrl: string
  /**
   * ヘッダー画像URL
   * @type {string}
   * @memberof ProducerResponse
   */
  headerUrl: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof ProducerResponse
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof ProducerResponse
   */
  phoneNumber: string
  /**
   * 郵便番号
   * @type {string}
   * @memberof ProducerResponse
   */
  postalCode: string
  /**
   * 都道府県
   * @type {string}
   * @memberof ProducerResponse
   */
  prefecture: string
  /**
   * 市区町村
   * @type {string}
   * @memberof ProducerResponse
   */
  city: string
  /**
   * 町名・番地
   * @type {string}
   * @memberof ProducerResponse
   */
  addressLine1: string
  /**
   * ビル名・号室など
   * @type {string}
   * @memberof ProducerResponse
   */
  addressLine2: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProducerResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProducerResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ProducersResponse
 */
export interface ProducersResponse {
  /**
   * 生産者一覧
   * @type {Array<ProducersResponseProducers>}
   * @memberof ProducersResponse
   */
  producers: Array<ProducersResponseProducers>
  /**
   * 合計数
   * @type {number}
   * @memberof ProducersResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface ProducersResponseProducers
 */
export interface ProducersResponseProducers {
  /**
   * システム管理者ID
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  id: string
  /**
   * 姓
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  lastname: string
  /**
   * 名
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  firstname: string
  /**
   * 姓(かな)
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  lastnameKana: string
  /**
   * 名(かな)
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  firstnameKana: string
  /**
   * 店舗名
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  storeName: string
  /**
   * ヘッダー画像URL
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  headerUrl: string
  /**
   * サムネイルURL
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  thumbnailUrl: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  email: string
  /**
   * 電話番号 (国際番号 + 電話番号)
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  phoneNumber: string
  /**
   * 郵便番号
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  postalCode: string
  /**
   * 都道府県
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  prefecture: string
  /**
   * 市区町村
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  city: string
  /**
   * 町名・番地
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  addressLine1: string
  /**
   * ビル名・号室など
   * @type {string}
   * @memberof ProducersResponseProducers
   */
  addressLine2: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProducersResponseProducers
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProducersResponseProducers
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
  /**
   * 商品ID
   * @type {string}
   * @memberof ProductResponse
   */
  id: string
  /**
   * 商品名
   * @type {string}
   * @memberof ProductResponse
   */
  name: string
  /**
   * 商品説明
   * @type {string}
   * @memberof ProductResponse
   */
  description: string
  /**
   * 生産者ID
   * @type {string}
   * @memberof ProductResponse
   */
  producerId: string
  /**
   * 農家名
   * @type {string}
   * @memberof ProductResponse
   */
  storeName: string
  /**
   * 商品種別ID
   * @type {string}
   * @memberof ProductResponse
   */
  categoryId: string
  /**
   * 商品種別名
   * @type {string}
   * @memberof ProductResponse
   */
  categoryName: string
  /**
   * 品目ID
   * @type {string}
   * @memberof ProductResponse
   */
  productTypeId: string
  /**
   * 品目名
   * @type {string}
   * @memberof ProductResponse
   */
  productTypeName: string
  /**
   * 公開フラグ
   * @type {boolean}
   * @memberof ProductResponse
   */
  public: boolean
  /**
   * 在庫数
   * @type {number}
   * @memberof ProductResponse
   */
  inventory: number
  /**
   * 重量(kg:少数第1位まで)
   * @type {number}
   * @memberof ProductResponse
   */
  weight: number
  /**
   * 数量単位
   * @type {string}
   * @memberof ProductResponse
   */
  itemUnit: string
  /**
   * 数量単位説明
   * @type {string}
   * @memberof ProductResponse
   */
  itemDescription: string
  /**
   *
   * @type {Array<ProductsResponseMedia>}
   * @memberof ProductResponse
   */
  media: Array<ProductsResponseMedia>
  /**
   * 販売価格
   * @type {number}
   * @memberof ProductResponse
   */
  price: number
  /**
   * 配送方法(1:通常便,2:冷蔵便,3:冷凍便)
   * @type {number}
   * @memberof ProductResponse
   */
  deliveryType: number
  /**
   * 箱の占有率(サイズ:60)
   * @type {number}
   * @memberof ProductResponse
   */
  box60Rate: number
  /**
   * 箱の占有率(サイズ:80)
   * @type {number}
   * @memberof ProductResponse
   */
  box80Rate: number
  /**
   * 箱の占有率(サイズ:100)
   * @type {number}
   * @memberof ProductResponse
   */
  box100Rate: number
  /**
   * 原産地(都道府県)
   * @type {string}
   * @memberof ProductResponse
   */
  originPrefecture: string
  /**
   * 原産地(市区町村)
   * @type {string}
   * @memberof ProductResponse
   */
  originCity: string
  /**
   * 登録者ID
   * @type {string}
   * @memberof ProductResponse
   */
  createdBy: string
  /**
   * 更新者ID
   * @type {string}
   * @memberof ProductResponse
   */
  updatedBy: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ProductTypeResponse
 */
export interface ProductTypeResponse {
  /**
   * 品目ID
   * @type {string}
   * @memberof ProductTypeResponse
   */
  id: string
  /**
   * 品目名
   * @type {string}
   * @memberof ProductTypeResponse
   */
  name: string
  /**
   * 商品種別ID
   * @type {string}
   * @memberof ProductTypeResponse
   */
  categoryId: string
  /**
   * 商品種別名
   * @type {string}
   * @memberof ProductTypeResponse
   */
  categoryName: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductTypeResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductTypeResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ProductTypesResponse
 */
export interface ProductTypesResponse {
  /**
   * 品目一覧
   * @type {Array<ProductTypesResponseProductTypes>}
   * @memberof ProductTypesResponse
   */
  productTypes: Array<ProductTypesResponseProductTypes>
  /**
   * 合計数
   * @type {number}
   * @memberof ProductTypesResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface ProductTypesResponseProductTypes
 */
export interface ProductTypesResponseProductTypes {
  /**
   * 品目ID
   * @type {string}
   * @memberof ProductTypesResponseProductTypes
   */
  id: string
  /**
   * 品目名
   * @type {string}
   * @memberof ProductTypesResponseProductTypes
   */
  name: string
  /**
   * 商品種別ID
   * @type {string}
   * @memberof ProductTypesResponseProductTypes
   */
  categoryId: string
  /**
   * 商品種別名
   * @type {string}
   * @memberof ProductTypesResponseProductTypes
   */
  categoryName: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductTypesResponseProductTypes
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductTypesResponseProductTypes
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ProductsResponse
 */
export interface ProductsResponse {
  /**
   * 商品一覧
   * @type {Array<ProductsResponseProducts>}
   * @memberof ProductsResponse
   */
  products: Array<ProductsResponseProducts>
  /**
   * 合計数
   * @type {number}
   * @memberof ProductsResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface ProductsResponseMedia
 */
export interface ProductsResponseMedia {
  /**
   * メディアURL
   * @type {string}
   * @memberof ProductsResponseMedia
   */
  url: string
  /**
   * サムネイルとして使用(1つまで)
   * @type {boolean}
   * @memberof ProductsResponseMedia
   */
  isThumbnail: boolean
}
/**
 *
 * @export
 * @interface ProductsResponseProducts
 */
export interface ProductsResponseProducts {
  /**
   * 商品ID
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  id: string
  /**
   * 商品名
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  name: string
  /**
   * 商品説明
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  description: string
  /**
   * 生産者ID
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  producerId: string
  /**
   * 農家名
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  storeName: string
  /**
   * 商品種別ID
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  categoryId: string
  /**
   * 商品種別名
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  cateogryName?: string
  /**
   * 品目ID
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  productTypeId: string
  /**
   * 品目名
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  productTypeName: string
  /**
   * 公開フラグ
   * @type {boolean}
   * @memberof ProductsResponseProducts
   */
  public: boolean
  /**
   * 在庫数
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  inventory: number
  /**
   * 重量(kg:少数第1位まで)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  weight: number
  /**
   * 数量単位
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  itemUnit: string
  /**
   * 数量単位説明
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  itemDescription: string
  /**
   *
   * @type {Array<ProductsResponseMedia>}
   * @memberof ProductsResponseProducts
   */
  media: Array<ProductsResponseMedia>
  /**
   * 販売価格
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  price: number
  /**
   * 配送方法(1:通常便,2:冷蔵便,3:冷凍便)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  deliveryType: number
  /**
   * 箱の占有率(サイズ:60)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  box60Rate: number
  /**
   * 箱の占有率(サイズ:80)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  box80Rate: number
  /**
   * 箱の占有率(サイズ:100)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  box100Rate: number
  /**
   * 原産地(都道府県)
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  originPrefecture: string
  /**
   * 原産地(市区町村)
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  originCity: string
  /**
   * 登録者ID
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  createdBy: string
  /**
   * 更新者ID
   * @type {string}
   * @memberof ProductsResponseProducts
   */
  updatedBy: string
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ProductsResponseProducts
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
  /**
   * 更新トークン
   * @type {string}
   * @memberof RefreshAuthTokenRequest
   */
  refreshToken: string
}
/**
 *
 * @export
 * @interface ShippingRate
 */
export interface ShippingRate {
  /**
   * No.
   * @type {number}
   * @memberof ShippingRate
   */
  number: number
  /**
   * 配送料金設定名
   * @type {string}
   * @memberof ShippingRate
   */
  name: string
  /**
   * 配送料金
   * @type {number}
   * @memberof ShippingRate
   */
  price: number
  /**
   * 対象都道府県コード一覧
   * @type {Array<string>}
   * @memberof ShippingRate
   */
  prefectures: Array<string>
}
/**
 *
 * @export
 * @interface ShippingResponse
 */
export interface ShippingResponse {
  /**
   * 配送設定ID
   * @type {string}
   * @memberof ShippingResponse
   */
  id: string
  /**
   * 配送設定名
   * @type {string}
   * @memberof ShippingResponse
   */
  name: string
  /**
   * 箱サイズ60の通常配送料一覧
   * @type {Array<ShippingRate>}
   * @memberof ShippingResponse
   */
  box60Rates: Array<ShippingRate>
  /**
   * 箱サイズ60の冷蔵便追加配送料
   * @type {number}
   * @memberof ShippingResponse
   */
  box60Refrigerated: number
  /**
   * 箱サイズ60の冷凍便追加配送料
   * @type {number}
   * @memberof ShippingResponse
   */
  box60Frozen: number
  /**
   * 箱サイズ80の通常配送料一覧
   * @type {Array<ShippingRate>}
   * @memberof ShippingResponse
   */
  box80Rates: Array<ShippingRate>
  /**
   * 箱サイズ80の冷蔵便追加配送料
   * @type {number}
   * @memberof ShippingResponse
   */
  box80Refrigerated: number
  /**
   * 箱サイズ80の冷凍便追加配送料
   * @type {number}
   * @memberof ShippingResponse
   */
  box80Frozen: number
  /**
   * 箱サイズ100の通常配送料一覧
   * @type {Array<ShippingRate>}
   * @memberof ShippingResponse
   */
  box100Rates: Array<ShippingRate>
  /**
   * 箱サイズ100の冷蔵便追加配送料
   * @type {number}
   * @memberof ShippingResponse
   */
  box100Refrigerated: number
  /**
   * 箱サイズ100の冷凍便追加配送料
   * @type {number}
   * @memberof ShippingResponse
   */
  box100Frozen: number
  /**
   * 送料無料オプションの有無
   * @type {boolean}
   * @memberof ShippingResponse
   */
  hasFreeShipping: boolean
  /**
   * 送料無料になる金額
   * @type {number}
   * @memberof ShippingResponse
   */
  freeShippingRates: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ShippingResponse
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ShippingResponse
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface ShippingsResponse
 */
export interface ShippingsResponse {
  /**
   * 配送設定一覧
   * @type {Array<ShippingsResponseShippings>}
   * @memberof ShippingsResponse
   */
  shippings: Array<ShippingsResponseShippings>
  /**
   * 合計数
   * @type {number}
   * @memberof ShippingsResponse
   */
  total: number
}
/**
 *
 * @export
 * @interface ShippingsResponseShippings
 */
export interface ShippingsResponseShippings {
  /**
   * 配送設定ID
   * @type {string}
   * @memberof ShippingsResponseShippings
   */
  id: string
  /**
   * 配送設定名
   * @type {string}
   * @memberof ShippingsResponseShippings
   */
  name: string
  /**
   * 箱サイズ60の通常配送料一覧
   * @type {Array<ShippingRate>}
   * @memberof ShippingsResponseShippings
   */
  box60Rates: Array<ShippingRate>
  /**
   * 箱サイズ60の冷蔵便追加配送料
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  box60Refrigerated: number
  /**
   * 箱サイズ60の冷凍便追加配送料
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  box60Frozen: number
  /**
   * 箱サイズ80の通常配送料一覧
   * @type {Array<ShippingRate>}
   * @memberof ShippingsResponseShippings
   */
  box80Rates: Array<ShippingRate>
  /**
   * 箱サイズ80の冷蔵便追加配送料
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  box80Refrigerated: number
  /**
   * 箱サイズ80の冷凍便追加配送料
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  box80Frozen: number
  /**
   * 箱サイズ100の通常配送料一覧
   * @type {Array<ShippingRate>}
   * @memberof ShippingsResponseShippings
   */
  box100Rates: Array<ShippingRate>
  /**
   * 箱サイズ100の冷蔵便追加配送料
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  box100Refrigerated: number
  /**
   * 箱サイズ100の冷凍便追加配送料
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  box100Frozen: number
  /**
   * 送料無料オプションの有無
   * @type {boolean}
   * @memberof ShippingsResponseShippings
   */
  hasFreeShipping: boolean
  /**
   * 送料無料になる金額
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  freeShippingRates: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  createdAt: number
  /**
   * 登録日時 (unixtime)
   * @type {number}
   * @memberof ShippingsResponseShippings
   */
  updatedAt: number
}
/**
 *
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
  /**
   * ユーザー名(メールアドレス)
   * @type {string}
   * @memberof SignInRequest
   */
  username: string
  /**
   * パスワード
   * @type {string}
   * @memberof SignInRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface UpdateAuthEmailRequest
 */
export interface UpdateAuthEmailRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof UpdateAuthEmailRequest
   */
  email: string
}
/**
 *
 * @export
 * @interface UpdateAuthPasswordRequest
 */
export interface UpdateAuthPasswordRequest {
  /**
   * 現在のパスワード
   * @type {string}
   * @memberof UpdateAuthPasswordRequest
   */
  oldPassword: string
  /**
   * 新しいパスワード(8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
   * @type {string}
   * @memberof UpdateAuthPasswordRequest
   */
  newPassword: string
  /**
   * パスワード(確認用)
   * @type {string}
   * @memberof UpdateAuthPasswordRequest
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface UpdateCategoryRequest
 */
export interface UpdateCategoryRequest {
  /**
   * カテゴリ名(32文字まで)
   * @type {string}
   * @memberof UpdateCategoryRequest
   */
  name: string
}
/**
 *
 * @export
 * @interface UpdateContactRequest
 */
export interface UpdateContactRequest {
  /**
   * 対応状況(1:ToDo,2:進行中,3:完了,4:対応不要)
   * @type {number}
   * @memberof UpdateContactRequest
   */
  status: number
  /**
   * 優先度(1:低,2:中,3:高)
   * @type {number}
   * @memberof UpdateContactRequest
   */
  priority: number
  /**
   * 対応メモ(2000文字まで)
   * @type {string}
   * @memberof UpdateContactRequest
   */
  note: string
}
/**
 *
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
  /**
   * 商品名(128文字まで)
   * @type {string}
   * @memberof UpdateProductRequest
   */
  name: string
  /**
   * 商品説明(20000文字まで)
   * @type {string}
   * @memberof UpdateProductRequest
   */
  description: string
  /**
   * 生産者ID
   * @type {string}
   * @memberof UpdateProductRequest
   */
  producerId: string
  /**
   * 商品種別ID
   * @type {string}
   * @memberof UpdateProductRequest
   */
  categoryId: string
  /**
   * 品目ID
   * @type {string}
   * @memberof UpdateProductRequest
   */
  productTypeId: string
  /**
   * 公開フラグ
   * @type {boolean}
   * @memberof UpdateProductRequest
   */
  public: boolean
  /**
   * 在庫数(0以上)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  inventory: number
  /**
   * 重量(0以上,kg単位:少数第1位まで)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  weight: number
  /**
   * 数量単位(16文字まで)
   * @type {string}
   * @memberof UpdateProductRequest
   */
  itemUnit: string
  /**
   * 数量単位説明(64文字まで)
   * @type {string}
   * @memberof UpdateProductRequest
   */
  itemDescription: string
  /**
   * メディア一覧(8つまで)
   * @type {Array<ProductsResponseMedia>}
   * @memberof UpdateProductRequest
   */
  media: Array<ProductsResponseMedia>
  /**
   * 販売価格(0以上)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  price: number
  /**
   * 配送方法(1:通常便,2:冷蔵便,3:冷凍便)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  deliveryType: number
  /**
   * 箱の占有率(サイズ:60)(0以上,100以下)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  box60Rate: number
  /**
   * 箱の占有率(サイズ:80)(0以上,100以下)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  box80Rate: number
  /**
   * 箱の占有率(サイズ:100)(0以上,100以下)
   * @type {number}
   * @memberof UpdateProductRequest
   */
  box100Rate: number
  /**
   * 原産地(都道府県)(32文字まで)
   * @type {string}
   * @memberof UpdateProductRequest
   */
  originPrefecture: string
  /**
   * 原産地(市区町村)(32文字まで)
   * @type {string}
   * @memberof UpdateProductRequest
   */
  originCity: string
}
/**
 *
 * @export
 * @interface UpdateProductTypeRequest
 */
export interface UpdateProductTypeRequest {
  /**
   * 品目名(32文字まで)
   * @type {string}
   * @memberof UpdateProductTypeRequest
   */
  name: string
}
/**
 *
 * @export
 * @interface UpdateShippingRequest
 */
export interface UpdateShippingRequest {
  /**
   * 配送設定名(64文字まで)
   * @type {string}
   * @memberof UpdateShippingRequest
   */
  name: string
  /**
   * 箱サイズ60の通常配送料一覧(すべての都道府県の設定が必須)
   * @type {Array<CreateShippingRate>}
   * @memberof UpdateShippingRequest
   */
  box60Rates: Array<CreateShippingRate>
  /**
   * 箱サイズ60の冷蔵便追加配送料(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  box60Refrigerated: number
  /**
   * 箱サイズ60の冷凍便追加配送料(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  box60Frozen: number
  /**
   * 箱サイズ80の通常配送料一覧(すべての都道府県の設定が必須)
   * @type {Array<CreateShippingRate>}
   * @memberof UpdateShippingRequest
   */
  box80Rates: Array<CreateShippingRate>
  /**
   * 箱サイズ80の冷蔵便追加配送料(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  box80Refrigerated: number
  /**
   * 箱サイズ80の冷凍便追加配送料(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  box80Frozen: number
  /**
   * 箱サイズ100の通常配送料一覧(すべての都道府県の設定が必須)
   * @type {Array<CreateShippingRate>}
   * @memberof UpdateShippingRequest
   */
  box100Rates: Array<CreateShippingRate>
  /**
   * 箱サイズ100の冷蔵便追加配送料(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  box100Refrigerated: number
  /**
   * 箱サイズ100の冷凍便追加配送料(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  box100Frozen: number
  /**
   * 送料無料オプションの有無
   * @type {boolean}
   * @memberof UpdateShippingRequest
   */
  hasFreeShipping: boolean
  /**
   * 送料無料になる金額(100万未満)
   * @type {number}
   * @memberof UpdateShippingRequest
   */
  freeShippingRates: number
}
/**
 *
 * @export
 * @interface UploadImageResponse
 */
export interface UploadImageResponse {
  /**
   * 画像アップロード先URL
   * @type {string}
   * @memberof UploadImageResponse
   */
  url: string
}
/**
 *
 * @export
 * @interface VerifyAuthEmailRequest
 */
export interface VerifyAuthEmailRequest {
  /**
   * 認証コード
   * @type {string}
   * @memberof VerifyAuthEmailRequest
   */
  verifyCode: string
}

/**
 * AdministratorApi - axios parameter creator
 * @export
 */
export const AdministratorApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary システム管理者登録
     * @param {CreateAdministratorRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAdministrator: async (
      body: CreateAdministratorRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateAdministrator', 'body', body)
      const localVarPath = `/v1/administrators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary システム管理者取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAdministrator: async (
      adminId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminId' is not null or undefined
      assertParamExists('v1GetAdministrator', 'adminId', adminId)
      const localVarPath = `/v1/administrators/{adminId}`.replace(
        `{${'adminId'}}`,
        encodeURIComponent(String(adminId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary システム管理者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListAdministrators: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/administrators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdministratorApi - functional programming interface
 * @export
 */
export const AdministratorApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AdministratorApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary システム管理者登録
     * @param {CreateAdministratorRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateAdministrator(
      body: CreateAdministratorRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdministratorResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateAdministrator(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary システム管理者取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAdministrator(
      adminId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdministratorResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1GetAdministrator(adminId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary システム管理者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListAdministrators(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdministratorsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ListAdministrators(
          limit,
          offset,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * AdministratorApi - factory interface
 * @export
 */
export const AdministratorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdministratorApiFp(configuration)
  return {
    /**
     *
     * @summary システム管理者登録
     * @param {CreateAdministratorRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateAdministrator(
      body: CreateAdministratorRequest,
      options?: any
    ): AxiosPromise<AdministratorResponse> {
      return localVarFp
        .v1CreateAdministrator(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary システム管理者取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAdministrator(
      adminId: string,
      options?: any
    ): AxiosPromise<AdministratorResponse> {
      return localVarFp
        .v1GetAdministrator(adminId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary システム管理者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListAdministrators(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<AdministratorsResponse> {
      return localVarFp
        .v1ListAdministrators(limit, offset, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AdministratorApi - object-oriented interface
 * @export
 * @class AdministratorApi
 * @extends {BaseAPI}
 */
export class AdministratorApi extends BaseAPI {
  /**
   *
   * @summary システム管理者登録
   * @param {CreateAdministratorRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministratorApi
   */
  public v1CreateAdministrator(
    body: CreateAdministratorRequest,
    options?: AxiosRequestConfig
  ) {
    return AdministratorApiFp(this.configuration)
      .v1CreateAdministrator(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary システム管理者取得
   * @param {string} adminId 管理者ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministratorApi
   */
  public v1GetAdministrator(adminId: string, options?: AxiosRequestConfig) {
    return AdministratorApiFp(this.configuration)
      .v1GetAdministrator(adminId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary システム管理者一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministratorApi
   */
  public v1ListAdministrators(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return AdministratorApiFp(this.configuration)
      .v1ListAdministrators(limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken: async (
      body: RefreshAuthTokenRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1RefreshAuthToken', 'body', body)
      const localVarPath = `/v1/auth/refresh-token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn: async (
      body: SignInRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1SignIn', 'body', body)
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAuthEmail: async (
      body: UpdateAuthEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateAuthEmail', 'body', body)
      const localVarPath = `/v1/auth/email`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAuthPassword: async (
      body: UpdateAuthPasswordRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateAuthPassword', 'body', body)
      const localVarPath = `/v1/auth/password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAuthEmail: async (
      body: VerifyAuthEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1VerifyAuthEmail', 'body', body)
      const localVarPath = `/v1/auth/email/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAuth(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1RefreshAuthToken(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignIn(
      body: SignInRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignOut(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateAuthEmail(
      body: UpdateAuthEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateAuthEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateAuthPassword(
      body: UpdateAuthPasswordRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateAuthPassword(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1VerifyAuthEmail(
      body: VerifyAuthEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1VerifyAuthEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1GetAuth(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: any
    ): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1RefreshAuthToken(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1SignIn(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut(options?: any): AxiosPromise<object> {
      return localVarFp
        .v1SignOut(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAuthEmail(
      body: UpdateAuthEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateAuthEmail(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateAuthPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateAuthPassword(
      body: UpdateAuthPasswordRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateAuthPassword(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyAuthEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyAuthEmail(
      body: VerifyAuthEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1VerifyAuthEmail(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary トークン検証
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1GetAuth(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1GetAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary トークン更新
   * @param {RefreshAuthTokenRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1RefreshAuthToken(
    body: RefreshAuthTokenRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1RefreshAuthToken(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインイン
   * @param {SignInRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignIn(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignOut(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignOut(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新
   * @param {UpdateAuthEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1UpdateAuthEmail(
    body: UpdateAuthEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1UpdateAuthEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary パスワード更新
   * @param {UpdateAuthPasswordRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1UpdateAuthPassword(
    body: UpdateAuthPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1UpdateAuthPassword(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新 - コード検証
   * @param {VerifyAuthEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1VerifyAuthEmail(
    body: VerifyAuthEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1VerifyAuthEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 商品種別登録
     * @param {CreateCategoryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateCategory: async (
      body: CreateCategoryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateCategory', 'body', body)
      const localVarPath = `/v1/categories`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 商品種別削除
     * @param {string} categoryId 商品種別ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DeleteCategory: async (
      categoryId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('v1DeleteCategory', 'categoryId', categoryId)
      const localVarPath = `/v1/categories/{categoryId}`.replace(
        `{${'categoryId'}}`,
        encodeURIComponent(String(categoryId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 商品種別一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 商品種別名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListCategories: async (
      limit?: number,
      offset?: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/categories`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 商品種別更新
     * @param {string} categoryId 商品種別ID
     * @param {UpdateCategoryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateCategory: async (
      categoryId: string,
      body: UpdateCategoryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('v1UpdateCategory', 'categoryId', categoryId)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateCategory', 'body', body)
      const localVarPath = `/v1/categories/{categoryId}`.replace(
        `{${'categoryId'}}`,
        encodeURIComponent(String(categoryId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 商品種別登録
     * @param {CreateCategoryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateCategory(
      body: CreateCategoryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateCategory(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 商品種別削除
     * @param {string} categoryId 商品種別ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1DeleteCategory(
      categoryId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1DeleteCategory(categoryId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 商品種別一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 商品種別名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListCategories(
      limit?: number,
      offset?: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoriesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ListCategories(
          limit,
          offset,
          name,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 商品種別更新
     * @param {string} categoryId 商品種別ID
     * @param {UpdateCategoryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateCategory(
      categoryId: string,
      body: UpdateCategoryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateCategory(
          categoryId,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoryApiFp(configuration)
  return {
    /**
     *
     * @summary 商品種別登録
     * @param {CreateCategoryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateCategory(
      body: CreateCategoryRequest,
      options?: any
    ): AxiosPromise<CategoryResponse> {
      return localVarFp
        .v1CreateCategory(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 商品種別削除
     * @param {string} categoryId 商品種別ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DeleteCategory(categoryId: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .v1DeleteCategory(categoryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 商品種別一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 商品種別名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListCategories(
      limit?: number,
      offset?: number,
      name?: string,
      options?: any
    ): AxiosPromise<CategoriesResponse> {
      return localVarFp
        .v1ListCategories(limit, offset, name, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 商品種別更新
     * @param {string} categoryId 商品種別ID
     * @param {UpdateCategoryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateCategory(
      categoryId: string,
      body: UpdateCategoryRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateCategory(categoryId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
  /**
   *
   * @summary 商品種別登録
   * @param {CreateCategoryRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public v1CreateCategory(
    body: CreateCategoryRequest,
    options?: AxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .v1CreateCategory(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 商品種別削除
   * @param {string} categoryId 商品種別ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public v1DeleteCategory(categoryId: string, options?: AxiosRequestConfig) {
    return CategoryApiFp(this.configuration)
      .v1DeleteCategory(categoryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 商品種別一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {string} [name] 商品種別名(あいまい検索)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public v1ListCategories(
    limit?: number,
    offset?: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .v1ListCategories(limit, offset, name, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 商品種別更新
   * @param {string} categoryId 商品種別ID
   * @param {UpdateCategoryRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public v1UpdateCategory(
    categoryId: string,
    body: UpdateCategoryRequest,
    options?: AxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .v1UpdateCategory(categoryId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary お問い合わせ取得
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetContact: async (
      contactId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists('v1GetContact', 'contactId', contactId)
      const localVarPath = `/v1/contacts/{contactId}`.replace(
        `{${'contactId'}}`,
        encodeURIComponent(String(contactId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary お問い合わせ一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListContacts: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/contacts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary お問い合わせ更新
     * @param {string} contactId お問い合わせID
     * @param {UpdateContactRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateContact: async (
      contactId: string,
      body: UpdateContactRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists('v1UpdateContact', 'contactId', contactId)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateContact', 'body', body)
      const localVarPath = `/v1/contacts/{contactId}`.replace(
        `{${'contactId'}}`,
        encodeURIComponent(String(contactId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary お問い合わせ取得
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetContact(
      contactId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContactResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetContact(
        contactId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary お問い合わせ一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListContacts(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContactsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListContacts(
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary お問い合わせ更新
     * @param {string} contactId お問い合わせID
     * @param {UpdateContactRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateContact(
      contactId: string,
      body: UpdateContactRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateContact(
        contactId,
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContactApiFp(configuration)
  return {
    /**
     *
     * @summary お問い合わせ取得
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetContact(
      contactId: string,
      options?: any
    ): AxiosPromise<ContactResponse> {
      return localVarFp
        .v1GetContact(contactId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary お問い合わせ一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListContacts(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<ContactsResponse> {
      return localVarFp
        .v1ListContacts(limit, offset, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary お問い合わせ更新
     * @param {string} contactId お問い合わせID
     * @param {UpdateContactRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateContact(
      contactId: string,
      body: UpdateContactRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateContact(contactId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
  /**
   *
   * @summary お問い合わせ取得
   * @param {string} contactId お問い合わせID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactApi
   */
  public v1GetContact(contactId: string, options?: AxiosRequestConfig) {
    return ContactApiFp(this.configuration)
      .v1GetContact(contactId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary お問い合わせ一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactApi
   */
  public v1ListContacts(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return ContactApiFp(this.configuration)
      .v1ListContacts(limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary お問い合わせ更新
   * @param {string} contactId お問い合わせID
   * @param {UpdateContactRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactApi
   */
  public v1UpdateContact(
    contactId: string,
    body: UpdateContactRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactApiFp(this.configuration)
      .v1UpdateContact(contactId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CoordinatorApi - axios parameter creator
 * @export
 */
export const CoordinatorApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 仲介者登録
     * @param {CreateCoordinatorRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateCoordinator: async (
      body: CreateCoordinatorRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateCoordinator', 'body', body)
      const localVarPath = `/v1/coordinators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 仲介者取得
     * @param {string} coordinatorId 仲介者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetCoordinator: async (
      coordinatorId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'coordinatorId' is not null or undefined
      assertParamExists('v1GetCoordinator', 'coordinatorId', coordinatorId)
      const localVarPath = `/v1/coordinators/{coordinatorId}`.replace(
        `{${'coordinatorId'}}`,
        encodeURIComponent(String(coordinatorId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 仲介者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListCoordinators: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/coordinators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 仲介者ヘッダー画像アップロード
     * @param {any} [image] 仲介者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadCoordinatorHeader: async (
      image?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/upload/coordinators/header`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (image !== undefined) {
        localVarFormParams.append('image', image as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 仲介者サムネイルアップロード
     * @param {any} [thumbnail] 仲介者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadCoordinatorThumbnail: async (
      thumbnail?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/upload/coordinators/thumbnail`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (thumbnail !== undefined) {
        localVarFormParams.append('thumbnail', thumbnail as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CoordinatorApi - functional programming interface
 * @export
 */
export const CoordinatorApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CoordinatorApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 仲介者登録
     * @param {CreateCoordinatorRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateCoordinator(
      body: CreateCoordinatorRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CoordinatorResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateCoordinator(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 仲介者取得
     * @param {string} coordinatorId 仲介者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetCoordinator(
      coordinatorId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CoordinatorResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1GetCoordinator(coordinatorId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 仲介者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListCoordinators(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CoordinatorsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ListCoordinators(
          limit,
          offset,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 仲介者ヘッダー画像アップロード
     * @param {any} [image] 仲介者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UploadCoordinatorHeader(
      image?: any,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UploadImageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UploadCoordinatorHeader(
          image,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 仲介者サムネイルアップロード
     * @param {any} [thumbnail] 仲介者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UploadCoordinatorThumbnail(
      thumbnail?: any,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UploadImageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UploadCoordinatorThumbnail(
          thumbnail,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * CoordinatorApi - factory interface
 * @export
 */
export const CoordinatorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoordinatorApiFp(configuration)
  return {
    /**
     *
     * @summary 仲介者登録
     * @param {CreateCoordinatorRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateCoordinator(
      body: CreateCoordinatorRequest,
      options?: any
    ): AxiosPromise<CoordinatorResponse> {
      return localVarFp
        .v1CreateCoordinator(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 仲介者取得
     * @param {string} coordinatorId 仲介者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetCoordinator(
      coordinatorId: string,
      options?: any
    ): AxiosPromise<CoordinatorResponse> {
      return localVarFp
        .v1GetCoordinator(coordinatorId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 仲介者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListCoordinators(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<CoordinatorsResponse> {
      return localVarFp
        .v1ListCoordinators(limit, offset, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 仲介者ヘッダー画像アップロード
     * @param {any} [image] 仲介者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadCoordinatorHeader(
      image?: any,
      options?: any
    ): AxiosPromise<UploadImageResponse> {
      return localVarFp
        .v1UploadCoordinatorHeader(image, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 仲介者サムネイルアップロード
     * @param {any} [thumbnail] 仲介者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadCoordinatorThumbnail(
      thumbnail?: any,
      options?: any
    ): AxiosPromise<UploadImageResponse> {
      return localVarFp
        .v1UploadCoordinatorThumbnail(thumbnail, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CoordinatorApi - object-oriented interface
 * @export
 * @class CoordinatorApi
 * @extends {BaseAPI}
 */
export class CoordinatorApi extends BaseAPI {
  /**
   *
   * @summary 仲介者登録
   * @param {CreateCoordinatorRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoordinatorApi
   */
  public v1CreateCoordinator(
    body: CreateCoordinatorRequest,
    options?: AxiosRequestConfig
  ) {
    return CoordinatorApiFp(this.configuration)
      .v1CreateCoordinator(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 仲介者取得
   * @param {string} coordinatorId 仲介者ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoordinatorApi
   */
  public v1GetCoordinator(coordinatorId: string, options?: AxiosRequestConfig) {
    return CoordinatorApiFp(this.configuration)
      .v1GetCoordinator(coordinatorId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 仲介者一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoordinatorApi
   */
  public v1ListCoordinators(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return CoordinatorApiFp(this.configuration)
      .v1ListCoordinators(limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 仲介者ヘッダー画像アップロード
   * @param {any} [image] 仲介者ヘッダー画像(png,jpeg形式,10MBまで)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoordinatorApi
   */
  public v1UploadCoordinatorHeader(image?: any, options?: AxiosRequestConfig) {
    return CoordinatorApiFp(this.configuration)
      .v1UploadCoordinatorHeader(image, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 仲介者サムネイルアップロード
   * @param {any} [thumbnail] 仲介者サムネイル(png,jpeg形式,10MBまで)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoordinatorApi
   */
  public v1UploadCoordinatorThumbnail(
    thumbnail?: any,
    options?: AxiosRequestConfig
  ) {
    return CoordinatorApiFp(this.configuration)
      .v1UploadCoordinatorThumbnail(thumbnail, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProducerApi - axios parameter creator
 * @export
 */
export const ProducerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 生産者登録
     * @param {CreateProducerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateProducer: async (
      body: CreateProducerRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateProducer', 'body', body)
      const localVarPath = `/v1/producers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生産者取得
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetProducer: async (
      producerId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'producerId' is not null or undefined
      assertParamExists('v1GetProducer', 'producerId', producerId)
      const localVarPath = `/v1/producers/{producerId}`.replace(
        `{${'producerId'}}`,
        encodeURIComponent(String(producerId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生産者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListProducers: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/producers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生産者ヘッダー画像アップロード
     * @param {any} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadProducerHeader: async (
      image?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/upload/producers/header`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (image !== undefined) {
        localVarFormParams.append('image', image as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生産者サムネイルアップロード
     * @param {any} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadProducerThumbnail: async (
      thumbnail?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/upload/producers/thumbnail`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (thumbnail !== undefined) {
        localVarFormParams.append('thumbnail', thumbnail as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProducerApi - functional programming interface
 * @export
 */
export const ProducerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProducerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 生産者登録
     * @param {CreateProducerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateProducer(
      body: CreateProducerRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProducerResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateProducer(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 生産者取得
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetProducer(
      producerId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProducerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetProducer(
        producerId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 生産者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListProducers(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProducersResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListProducers(
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 生産者ヘッダー画像アップロード
     * @param {any} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UploadProducerHeader(
      image?: any,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UploadImageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UploadProducerHeader(image, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 生産者サムネイルアップロード
     * @param {any} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UploadProducerThumbnail(
      thumbnail?: any,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UploadImageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UploadProducerThumbnail(
          thumbnail,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ProducerApi - factory interface
 * @export
 */
export const ProducerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProducerApiFp(configuration)
  return {
    /**
     *
     * @summary 生産者登録
     * @param {CreateProducerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateProducer(
      body: CreateProducerRequest,
      options?: any
    ): AxiosPromise<ProducerResponse> {
      return localVarFp
        .v1CreateProducer(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生産者取得
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetProducer(
      producerId: string,
      options?: any
    ): AxiosPromise<ProducerResponse> {
      return localVarFp
        .v1GetProducer(producerId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生産者一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListProducers(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<ProducersResponse> {
      return localVarFp
        .v1ListProducers(limit, offset, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生産者ヘッダー画像アップロード
     * @param {any} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadProducerHeader(
      image?: any,
      options?: any
    ): AxiosPromise<UploadImageResponse> {
      return localVarFp
        .v1UploadProducerHeader(image, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生産者サムネイルアップロード
     * @param {any} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UploadProducerThumbnail(
      thumbnail?: any,
      options?: any
    ): AxiosPromise<UploadImageResponse> {
      return localVarFp
        .v1UploadProducerThumbnail(thumbnail, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ProducerApi - object-oriented interface
 * @export
 * @class ProducerApi
 * @extends {BaseAPI}
 */
export class ProducerApi extends BaseAPI {
  /**
   *
   * @summary 生産者登録
   * @param {CreateProducerRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProducerApi
   */
  public v1CreateProducer(
    body: CreateProducerRequest,
    options?: AxiosRequestConfig
  ) {
    return ProducerApiFp(this.configuration)
      .v1CreateProducer(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生産者取得
   * @param {string} producerId 生産者ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProducerApi
   */
  public v1GetProducer(producerId: string, options?: AxiosRequestConfig) {
    return ProducerApiFp(this.configuration)
      .v1GetProducer(producerId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生産者一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProducerApi
   */
  public v1ListProducers(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return ProducerApiFp(this.configuration)
      .v1ListProducers(limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生産者ヘッダー画像アップロード
   * @param {any} [image] 生産者ヘッダー画像(png,jpeg形式,10MBまで)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProducerApi
   */
  public v1UploadProducerHeader(image?: any, options?: AxiosRequestConfig) {
    return ProducerApiFp(this.configuration)
      .v1UploadProducerHeader(image, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生産者サムネイルアップロード
   * @param {any} [thumbnail] 生産者サムネイル(png,jpeg形式,10MBまで)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProducerApi
   */
  public v1UploadProducerThumbnail(
    thumbnail?: any,
    options?: AxiosRequestConfig
  ) {
    return ProducerApiFp(this.configuration)
      .v1UploadProducerThumbnail(thumbnail, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 商品登録
     * @param {CreateProductRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateProduct: async (
      body: CreateProductRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateProduct', 'body', body)
      const localVarPath = `/v1/products`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 商品取得
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetProduct: async (
      productId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('v1GetProduct', 'productId', productId)
      const localVarPath = `/v1/products/{productId}`.replace(
        `{${'productId'}}`,
        encodeURIComponent(String(productId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 商品一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [coordinatorId] 仲介者ID
     * @param {string} [producerId] 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListProducts: async (
      limit?: number,
      offset?: number,
      coordinatorId?: string,
      producerId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/products`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (coordinatorId !== undefined) {
        localVarQueryParameter['coordinatorId'] = coordinatorId
      }

      if (producerId !== undefined) {
        localVarQueryParameter['producerId'] = producerId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 商品更新
     * @param {string} productId 商品ID
     * @param {UpdateProductRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateProduct: async (
      productId: string,
      body: UpdateProductRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('v1UpdateProduct', 'productId', productId)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateProduct', 'body', body)
      const localVarPath = `/v1/products/{productId}`.replace(
        `{${'productId'}}`,
        encodeURIComponent(String(productId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 商品登録
     * @param {CreateProductRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateProduct(
      body: CreateProductRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProductResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1CreateProduct(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 商品取得
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetProduct(
      productId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProductResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetProduct(
        productId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 商品一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [coordinatorId] 仲介者ID
     * @param {string} [producerId] 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListProducts(
      limit?: number,
      offset?: number,
      coordinatorId?: string,
      producerId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProductsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListProducts(
        limit,
        offset,
        coordinatorId,
        producerId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 商品更新
     * @param {string} productId 商品ID
     * @param {UpdateProductRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateProduct(
      productId: string,
      body: UpdateProductRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpdateProduct(
        productId,
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProductApiFp(configuration)
  return {
    /**
     *
     * @summary 商品登録
     * @param {CreateProductRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateProduct(
      body: CreateProductRequest,
      options?: any
    ): AxiosPromise<ProductResponse> {
      return localVarFp
        .v1CreateProduct(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 商品取得
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetProduct(
      productId: string,
      options?: any
    ): AxiosPromise<ProductResponse> {
      return localVarFp
        .v1GetProduct(productId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 商品一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [coordinatorId] 仲介者ID
     * @param {string} [producerId] 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListProducts(
      limit?: number,
      offset?: number,
      coordinatorId?: string,
      producerId?: string,
      options?: any
    ): AxiosPromise<ProductsResponse> {
      return localVarFp
        .v1ListProducts(limit, offset, coordinatorId, producerId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 商品更新
     * @param {string} productId 商品ID
     * @param {UpdateProductRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateProduct(
      productId: string,
      body: UpdateProductRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateProduct(productId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
  /**
   *
   * @summary 商品登録
   * @param {CreateProductRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public v1CreateProduct(
    body: CreateProductRequest,
    options?: AxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .v1CreateProduct(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 商品取得
   * @param {string} productId 商品ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public v1GetProduct(productId: string, options?: AxiosRequestConfig) {
    return ProductApiFp(this.configuration)
      .v1GetProduct(productId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 商品一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {string} [coordinatorId] 仲介者ID
   * @param {string} [producerId] 生産者ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public v1ListProducts(
    limit?: number,
    offset?: number,
    coordinatorId?: string,
    producerId?: string,
    options?: AxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .v1ListProducts(limit, offset, coordinatorId, producerId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 商品更新
   * @param {string} productId 商品ID
   * @param {UpdateProductRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public v1UpdateProduct(
    productId: string,
    body: UpdateProductRequest,
    options?: AxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .v1UpdateProduct(productId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProductTypeApi - axios parameter creator
 * @export
 */
export const ProductTypeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 品目登録
     * @param {string} categoryId 商品種別ID
     * @param {CreateProductTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateProductType: async (
      categoryId: string,
      body: CreateProductTypeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('v1CreateProductType', 'categoryId', categoryId)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateProductType', 'body', body)
      const localVarPath = `/v1/categories/{categoryId}/product-types`.replace(
        `{${'categoryId'}}`,
        encodeURIComponent(String(categoryId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 品目削除
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DeleteProductType: async (
      categoryId: string,
      productTypeId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('v1DeleteProductType', 'categoryId', categoryId)
      // verify required parameter 'productTypeId' is not null or undefined
      assertParamExists('v1DeleteProductType', 'productTypeId', productTypeId)
      const localVarPath =
        `/v1/categories/{categoryId}/product-types/{productTypeId}`
          .replace(`{${'categoryId'}}`, encodeURIComponent(String(categoryId)))
          .replace(
            `{${'productTypeId'}}`,
            encodeURIComponent(String(productTypeId))
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 品目一覧取得(商品種別指定なし)
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 品目名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListAllProductTypes: async (
      limit?: number,
      offset?: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/categories/-/product-types`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 品目一覧取得
     * @param {string} categoryId 商品種別ID
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 品目名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListProductTypes: async (
      categoryId: string,
      limit?: number,
      offset?: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('v1ListProductTypes', 'categoryId', categoryId)
      const localVarPath = `/v1/categories/{categoryId}/product-types`.replace(
        `{${'categoryId'}}`,
        encodeURIComponent(String(categoryId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 品目更新
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {UpdateProductTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateProductType: async (
      categoryId: string,
      productTypeId: string,
      body: UpdateProductTypeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      assertParamExists('v1UpdateProductType', 'categoryId', categoryId)
      // verify required parameter 'productTypeId' is not null or undefined
      assertParamExists('v1UpdateProductType', 'productTypeId', productTypeId)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateProductType', 'body', body)
      const localVarPath =
        `/v1/categories/{categoryId}/product-types/{productTypeId}`
          .replace(`{${'categoryId'}}`, encodeURIComponent(String(categoryId)))
          .replace(
            `{${'productTypeId'}}`,
            encodeURIComponent(String(productTypeId))
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProductTypeApi - functional programming interface
 * @export
 */
export const ProductTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ProductTypeApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 品目登録
     * @param {string} categoryId 商品種別ID
     * @param {CreateProductTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateProductType(
      categoryId: string,
      body: CreateProductTypeRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProductTypeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateProductType(
          categoryId,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 品目削除
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1DeleteProductType(
      categoryId: string,
      productTypeId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1DeleteProductType(
          categoryId,
          productTypeId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 品目一覧取得(商品種別指定なし)
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 品目名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListAllProductTypes(
      limit?: number,
      offset?: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProductTypesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ListAllProductTypes(
          limit,
          offset,
          name,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 品目一覧取得
     * @param {string} categoryId 商品種別ID
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 品目名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListProductTypes(
      categoryId: string,
      limit?: number,
      offset?: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProductTypesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1ListProductTypes(
          categoryId,
          limit,
          offset,
          name,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 品目更新
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {UpdateProductTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateProductType(
      categoryId: string,
      productTypeId: string,
      body: UpdateProductTypeRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateProductType(
          categoryId,
          productTypeId,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ProductTypeApi - factory interface
 * @export
 */
export const ProductTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProductTypeApiFp(configuration)
  return {
    /**
     *
     * @summary 品目登録
     * @param {string} categoryId 商品種別ID
     * @param {CreateProductTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateProductType(
      categoryId: string,
      body: CreateProductTypeRequest,
      options?: any
    ): AxiosPromise<ProductTypeResponse> {
      return localVarFp
        .v1CreateProductType(categoryId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 品目削除
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DeleteProductType(
      categoryId: string,
      productTypeId: string,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1DeleteProductType(categoryId, productTypeId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 品目一覧取得(商品種別指定なし)
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 品目名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListAllProductTypes(
      limit?: number,
      offset?: number,
      name?: string,
      options?: any
    ): AxiosPromise<ProductTypesResponse> {
      return localVarFp
        .v1ListAllProductTypes(limit, offset, name, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 品目一覧取得
     * @param {string} categoryId 商品種別ID
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {string} [name] 品目名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListProductTypes(
      categoryId: string,
      limit?: number,
      offset?: number,
      name?: string,
      options?: any
    ): AxiosPromise<ProductTypesResponse> {
      return localVarFp
        .v1ListProductTypes(categoryId, limit, offset, name, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 品目更新
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {UpdateProductTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateProductType(
      categoryId: string,
      productTypeId: string,
      body: UpdateProductTypeRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateProductType(categoryId, productTypeId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ProductTypeApi - object-oriented interface
 * @export
 * @class ProductTypeApi
 * @extends {BaseAPI}
 */
export class ProductTypeApi extends BaseAPI {
  /**
   *
   * @summary 品目登録
   * @param {string} categoryId 商品種別ID
   * @param {CreateProductTypeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductTypeApi
   */
  public v1CreateProductType(
    categoryId: string,
    body: CreateProductTypeRequest,
    options?: AxiosRequestConfig
  ) {
    return ProductTypeApiFp(this.configuration)
      .v1CreateProductType(categoryId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 品目削除
   * @param {string} categoryId 商品種別ID
   * @param {string} productTypeId 品目ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductTypeApi
   */
  public v1DeleteProductType(
    categoryId: string,
    productTypeId: string,
    options?: AxiosRequestConfig
  ) {
    return ProductTypeApiFp(this.configuration)
      .v1DeleteProductType(categoryId, productTypeId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 品目一覧取得(商品種別指定なし)
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {string} [name] 品目名(あいまい検索)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductTypeApi
   */
  public v1ListAllProductTypes(
    limit?: number,
    offset?: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return ProductTypeApiFp(this.configuration)
      .v1ListAllProductTypes(limit, offset, name, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 品目一覧取得
   * @param {string} categoryId 商品種別ID
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {string} [name] 品目名(あいまい検索)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductTypeApi
   */
  public v1ListProductTypes(
    categoryId: string,
    limit?: number,
    offset?: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return ProductTypeApiFp(this.configuration)
      .v1ListProductTypes(categoryId, limit, offset, name, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 品目更新
   * @param {string} categoryId 商品種別ID
   * @param {string} productTypeId 品目ID
   * @param {UpdateProductTypeRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductTypeApi
   */
  public v1UpdateProductType(
    categoryId: string,
    productTypeId: string,
    body: UpdateProductTypeRequest,
    options?: AxiosRequestConfig
  ) {
    return ProductTypeApiFp(this.configuration)
      .v1UpdateProductType(categoryId, productTypeId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 配送設定登録
     * @param {CreateShippingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateShipping: async (
      body: CreateShippingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1CreateShipping', 'body', body)
      const localVarPath = `/v1/shippings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 配送設定取得
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetShipping: async (
      shippingId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'shippingId' is not null or undefined
      assertParamExists('v1GetShipping', 'shippingId', shippingId)
      const localVarPath = `/v1/shippings/{shippingId}`.replace(
        `{${'shippingId'}}`,
        encodeURIComponent(String(shippingId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 配送設定更新
     * @param {string} shippingId 配送設定ID
     * @param {UpdateShippingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateShipping: async (
      shippingId: string,
      body: UpdateShippingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'shippingId' is not null or undefined
      assertParamExists('v1UpdateShipping', 'shippingId', shippingId)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateShipping', 'body', body)
      const localVarPath = `/v1/shippings/{shippingId}`.replace(
        `{${'shippingId'}}`,
        encodeURIComponent(String(shippingId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 配送設定登録
     * @param {CreateShippingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CreateShipping(
      body: CreateShippingRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ShippingResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CreateShipping(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 配送設定取得
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetShipping(
      shippingId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ShippingResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetShipping(
        shippingId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary 配送設定更新
     * @param {string} shippingId 配送設定ID
     * @param {UpdateShippingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateShipping(
      shippingId: string,
      body: UpdateShippingRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateShipping(
          shippingId,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShippingApiFp(configuration)
  return {
    /**
     *
     * @summary 配送設定登録
     * @param {CreateShippingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CreateShipping(
      body: CreateShippingRequest,
      options?: any
    ): AxiosPromise<ShippingResponse> {
      return localVarFp
        .v1CreateShipping(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 配送設定取得
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetShipping(
      shippingId: string,
      options?: any
    ): AxiosPromise<ShippingResponse> {
      return localVarFp
        .v1GetShipping(shippingId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 配送設定更新
     * @param {string} shippingId 配送設定ID
     * @param {UpdateShippingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateShipping(
      shippingId: string,
      body: UpdateShippingRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateShipping(shippingId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
  /**
   *
   * @summary 配送設定登録
   * @param {CreateShippingRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShippingApi
   */
  public v1CreateShipping(
    body: CreateShippingRequest,
    options?: AxiosRequestConfig
  ) {
    return ShippingApiFp(this.configuration)
      .v1CreateShipping(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 配送設定取得
   * @param {string} shippingId 配送設定ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShippingApi
   */
  public v1GetShipping(shippingId: string, options?: AxiosRequestConfig) {
    return ShippingApiFp(this.configuration)
      .v1GetShipping(shippingId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 配送設定更新
   * @param {string} shippingId 配送設定ID
   * @param {UpdateShippingRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShippingApi
   */
  public v1UpdateShipping(
    shippingId: string,
    body: UpdateShippingRequest,
    options?: AxiosRequestConfig
  ) {
    return ShippingApiFp(this.configuration)
      .v1UpdateShipping(shippingId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ShippingsApi - axios parameter creator
 * @export
 */
export const ShippingsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 配送設定一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListShippings: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/shippings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ShippingsApi - functional programming interface
 * @export
 */
export const ShippingsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShippingsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 配送設定一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ListShippings(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ShippingsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListShippings(
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ShippingsApi - factory interface
 * @export
 */
export const ShippingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShippingsApiFp(configuration)
  return {
    /**
     *
     * @summary 配送設定一覧取得
     * @param {number} [limit] 取得上限数
     * @param {number} [offset] 取得開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ListShippings(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<ShippingsResponse> {
      return localVarFp
        .v1ListShippings(limit, offset, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ShippingsApi - object-oriented interface
 * @export
 * @class ShippingsApi
 * @extends {BaseAPI}
 */
export class ShippingsApi extends BaseAPI {
  /**
   *
   * @summary 配送設定一覧取得
   * @param {number} [limit] 取得上限数
   * @param {number} [offset] 取得開始位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShippingsApi
   */
  public v1ListShippings(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return ShippingsApiFp(this.configuration)
      .v1ListShippings(limit, offset, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
