/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoordinatorResponse,
  CoordinatorsResponse,
  CreateCoordinatorRequest,
  ErrorResponse,
  ProducersResponse,
  RelateProducersRequest,
  UpdateCoordinatorEmailRequest,
  UpdateCoordinatorRequest,
  UploadImageResponse,
} from '../models';
import {
    CoordinatorResponseFromJSON,
    CoordinatorResponseToJSON,
    CoordinatorsResponseFromJSON,
    CoordinatorsResponseToJSON,
    CreateCoordinatorRequestFromJSON,
    CreateCoordinatorRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProducersResponseFromJSON,
    ProducersResponseToJSON,
    RelateProducersRequestFromJSON,
    RelateProducersRequestToJSON,
    UpdateCoordinatorEmailRequestFromJSON,
    UpdateCoordinatorEmailRequestToJSON,
    UpdateCoordinatorRequestFromJSON,
    UpdateCoordinatorRequestToJSON,
    UploadImageResponseFromJSON,
    UploadImageResponseToJSON,
} from '../models';

export interface V1CreateCoordinatorRequest {
    body: CreateCoordinatorRequest;
}

export interface V1DeleteCoordinatorRequest {
    coordinatorId: string;
}

export interface V1GetCoordinatorRequest {
    coordinatorId: string;
}

export interface V1ListCoordinatorsRequest {
    limit?: number;
    offset?: number;
}

export interface V1ListRelatedProducersRequest {
    coordinatorId: string;
    limit?: number;
    offset?: number;
}

export interface V1RelateProducersRequest {
    coordinatorId: string;
    body: RelateProducersRequest;
}

export interface V1UnrelateProducerRequest {
    coordinatorId: string;
    producerId: string;
}

export interface V1UpdateCoordinatorRequest {
    coordinatorId: string;
    body: UpdateCoordinatorRequest;
}

export interface V1UpdateCoordinatorEmailRequest {
    coordinatorId: string;
    body: UpdateCoordinatorEmailRequest;
}

export interface V1UpdateCoordinatorPasswordRequest {
    coordinatorId: string;
    body: object;
}

export interface V1UploadCoordinatorHeaderRequest {
    image?: Blob;
}

export interface V1UploadCoordinatorThumbnailRequest {
    thumbnail?: Blob;
}

/**
 * 
 */
export class CoordinatorApi extends runtime.BaseAPI {

    /**
     * コーディネータ登録
     */
    async v1CreateCoordinatorRaw(requestParameters: V1CreateCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatorResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateCoordinator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatorResponseFromJSON(jsonValue));
    }

    /**
     * コーディネータ登録
     */
    async v1CreateCoordinator(requestParameters: V1CreateCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatorResponse> {
        const response = await this.v1CreateCoordinatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータ退会
     */
    async v1DeleteCoordinatorRaw(requestParameters: V1DeleteCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1DeleteCoordinator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * コーディネータ退会
     */
    async v1DeleteCoordinator(requestParameters: V1DeleteCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1DeleteCoordinatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータ取得
     */
    async v1GetCoordinatorRaw(requestParameters: V1GetCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatorResponse>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1GetCoordinator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatorResponseFromJSON(jsonValue));
    }

    /**
     * コーディネータ取得
     */
    async v1GetCoordinator(requestParameters: V1GetCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatorResponse> {
        const response = await this.v1GetCoordinatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータ一覧取得
     */
    async v1ListCoordinatorsRaw(requestParameters: V1ListCoordinatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatorsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatorsResponseFromJSON(jsonValue));
    }

    /**
     * コーディネータ一覧取得
     */
    async v1ListCoordinators(requestParameters: V1ListCoordinatorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatorsResponse> {
        const response = await this.v1ListCoordinatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 関連付けられた生産者一覧
     */
    async v1ListRelatedProducersRaw(requestParameters: V1ListRelatedProducersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProducersResponse>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1ListRelatedProducers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}/producers`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducersResponseFromJSON(jsonValue));
    }

    /**
     * 関連付けられた生産者一覧
     */
    async v1ListRelatedProducers(requestParameters: V1ListRelatedProducersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProducersResponse> {
        const response = await this.v1ListRelatedProducersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者を関連付け
     */
    async v1RelateProducersRaw(requestParameters: V1RelateProducersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1RelateProducers.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1RelateProducers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}/producers`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 生産者を関連付け
     */
    async v1RelateProducers(requestParameters: V1RelateProducersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1RelateProducersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者の関連付けを解除
     */
    async v1UnrelateProducerRaw(requestParameters: V1UnrelateProducerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1UnrelateProducer.');
        }

        if (requestParameters.producerId === null || requestParameters.producerId === undefined) {
            throw new runtime.RequiredError('producerId','Required parameter requestParameters.producerId was null or undefined when calling v1UnrelateProducer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}/producers/{producerId}`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))).replace(`{${"producerId"}}`, encodeURIComponent(String(requestParameters.producerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 生産者の関連付けを解除
     */
    async v1UnrelateProducer(requestParameters: V1UnrelateProducerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UnrelateProducerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータ更新
     */
    async v1UpdateCoordinatorRaw(requestParameters: V1UpdateCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1UpdateCoordinator.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateCoordinator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * コーディネータ更新
     */
    async v1UpdateCoordinator(requestParameters: V1UpdateCoordinatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateCoordinatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータメールアドレス更新
     */
    async v1UpdateCoordinatorEmailRaw(requestParameters: V1UpdateCoordinatorEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1UpdateCoordinatorEmail.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateCoordinatorEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}/email`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * コーディネータメールアドレス更新
     */
    async v1UpdateCoordinatorEmail(requestParameters: V1UpdateCoordinatorEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateCoordinatorEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータパスワード更新(ランダム生成)
     */
    async v1UpdateCoordinatorPasswordRaw(requestParameters: V1UpdateCoordinatorPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.coordinatorId === null || requestParameters.coordinatorId === undefined) {
            throw new runtime.RequiredError('coordinatorId','Required parameter requestParameters.coordinatorId was null or undefined when calling v1UpdateCoordinatorPassword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateCoordinatorPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/coordinators/{coordinatorId}/password`.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters.coordinatorId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * コーディネータパスワード更新(ランダム生成)
     */
    async v1UpdateCoordinatorPassword(requestParameters: V1UpdateCoordinatorPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateCoordinatorPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータヘッダー画像アップロード
     */
    async v1UploadCoordinatorHeaderRaw(requestParameters: V1UploadCoordinatorHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.image !== undefined) {
            formParams.append('image', requestParameters.image as any);
        }

        const response = await this.request({
            path: `/v1/upload/coordinators/header`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadImageResponseFromJSON(jsonValue));
    }

    /**
     * コーディネータヘッダー画像アップロード
     */
    async v1UploadCoordinatorHeader(requestParameters: V1UploadCoordinatorHeaderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadImageResponse> {
        const response = await this.v1UploadCoordinatorHeaderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネータサムネイルアップロード
     */
    async v1UploadCoordinatorThumbnailRaw(requestParameters: V1UploadCoordinatorThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.thumbnail !== undefined) {
            formParams.append('thumbnail', requestParameters.thumbnail as any);
        }

        const response = await this.request({
            path: `/v1/upload/coordinators/thumbnail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadImageResponseFromJSON(jsonValue));
    }

    /**
     * コーディネータサムネイルアップロード
     */
    async v1UploadCoordinatorThumbnail(requestParameters: V1UploadCoordinatorThumbnailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadImageResponse> {
        const response = await this.v1UploadCoordinatorThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
