/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  LiveResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LiveResponseFromJSON,
    LiveResponseToJSON,
} from '../models';

export interface V1GetLiveRequest {
    scheduleId: string;
    liveId: string;
}

/**
 * 
 */
export class LiveApi extends runtime.BaseAPI {

    /**
     * 配信詳細取得
     */
    async v1GetLiveRaw(requestParameters: V1GetLiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveResponse>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling v1GetLive.');
        }

        if (requestParameters.liveId === null || requestParameters.liveId === undefined) {
            throw new runtime.RequiredError('liveId','Required parameter requestParameters.liveId was null or undefined when calling v1GetLive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/schedules/{scheduleId}/Lives/{liveId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters.scheduleId))).replace(`{${"liveId"}}`, encodeURIComponent(String(requestParameters.liveId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveResponseFromJSON(jsonValue));
    }

    /**
     * 配信詳細取得
     */
    async v1GetLive(requestParameters: V1GetLiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveResponse> {
        const response = await this.v1GetLiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
