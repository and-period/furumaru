/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactResponse,
  ContactsResponse,
  ErrorResponse,
  UpdateContactRequest,
} from '../models';
import {
    ContactResponseFromJSON,
    ContactResponseToJSON,
    ContactsResponseFromJSON,
    ContactsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateContactRequestFromJSON,
    UpdateContactRequestToJSON,
} from '../models';

export interface V1GetContactRequest {
    contactId: string;
}

export interface V1ListContactsRequest {
    limit?: number;
    offset?: number;
    orders?: string;
}

export interface V1UpdateContactRequest {
    contactId: string;
    body: UpdateContactRequest;
}

/**
 * 
 */
export class ContactApi extends runtime.BaseAPI {

    /**
     * お問い合わせ取得
     */
    async v1GetContactRaw(requestParameters: V1GetContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactResponse>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling v1GetContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactResponseFromJSON(jsonValue));
    }

    /**
     * お問い合わせ取得
     */
    async v1GetContact(requestParameters: V1GetContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactResponse> {
        const response = await this.v1GetContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お問い合わせ一覧取得
     */
    async v1ListContactsRaw(requestParameters: V1ListContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/contacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsResponseFromJSON(jsonValue));
    }

    /**
     * お問い合わせ一覧取得
     */
    async v1ListContacts(requestParameters: V1ListContactsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactsResponse> {
        const response = await this.v1ListContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お問い合わせ更新
     */
    async v1UpdateContactRaw(requestParameters: V1UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling v1UpdateContact.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * お問い合わせ更新
     */
    async v1UpdateContact(requestParameters: V1UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
