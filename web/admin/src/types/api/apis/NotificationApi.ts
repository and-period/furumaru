/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNotificationRequest,
  ErrorResponse,
  NotificationResponse,
  NotificationsResponse,
  UpdateNotificationRequest,
} from '../models';
import {
    CreateNotificationRequestFromJSON,
    CreateNotificationRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NotificationResponseFromJSON,
    NotificationResponseToJSON,
    NotificationsResponseFromJSON,
    NotificationsResponseToJSON,
    UpdateNotificationRequestFromJSON,
    UpdateNotificationRequestToJSON,
} from '../models';

export interface V1CreateNotificationRequest {
    body: CreateNotificationRequest;
}

export interface V1DeleteNotificationRequest {
    notificationId: string;
}

export interface V1GetNotificationRequest {
    notificationId: string;
}

export interface V1ListNotificationsRequest {
    limit?: number;
    offset?: number;
    since?: number;
    until?: number;
    orders?: string;
}

export interface V1UpdateNotificationRequest {
    notificationId: string;
    body: UpdateNotificationRequest;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     * お知らせ登録
     */
    async v1CreateNotificationRaw(requestParameters: V1CreateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     * お知らせ登録
     */
    async v1CreateNotification(requestParameters: V1CreateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationResponse> {
        const response = await this.v1CreateNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お知らせ削除
     */
    async v1DeleteNotificationRaw(requestParameters: V1DeleteNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling v1DeleteNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notifications/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * お知らせ削除
     */
    async v1DeleteNotification(requestParameters: V1DeleteNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1DeleteNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お知らせ取得
     */
    async v1GetNotificationRaw(requestParameters: V1GetNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling v1GetNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notifications/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     * お知らせ取得
     */
    async v1GetNotification(requestParameters: V1GetNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationResponse> {
        const response = await this.v1GetNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お知らせ一覧取得
     */
    async v1ListNotificationsRaw(requestParameters: V1ListNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsResponseFromJSON(jsonValue));
    }

    /**
     * お知らせ一覧取得
     */
    async v1ListNotifications(requestParameters: V1ListNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsResponse> {
        const response = await this.v1ListNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お知らせ更新
     */
    async v1UpdateNotificationRaw(requestParameters: V1UpdateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling v1UpdateNotification.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notifications/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * お知らせ更新
     */
    async v1UpdateNotification(requestParameters: V1UpdateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
