/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoriesResponse,
  CategoryResponse,
  CreateCategoryRequest,
  ErrorResponse,
  UpdateCategoryRequest,
} from '../models';
import {
    CategoriesResponseFromJSON,
    CategoriesResponseToJSON,
    CategoryResponseFromJSON,
    CategoryResponseToJSON,
    CreateCategoryRequestFromJSON,
    CreateCategoryRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateCategoryRequestFromJSON,
    UpdateCategoryRequestToJSON,
} from '../models';

export interface V1CreateCategoryRequest {
    body: CreateCategoryRequest;
}

export interface V1DeleteCategoryRequest {
    categoryId: string;
}

export interface V1ListCategoriesRequest {
    limit?: number;
    offset?: number;
    name?: string;
    orders?: string;
}

export interface V1UpdateCategoryRequest {
    categoryId: string;
    body: UpdateCategoryRequest;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     * 商品種別登録
     */
    async v1CreateCategoryRaw(requestParameters: V1CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryResponseFromJSON(jsonValue));
    }

    /**
     * 商品種別登録
     */
    async v1CreateCategory(requestParameters: V1CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryResponse> {
        const response = await this.v1CreateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品種別削除
     */
    async v1DeleteCategoryRaw(requestParameters: V1DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling v1DeleteCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 商品種別削除
     */
    async v1DeleteCategory(requestParameters: V1DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1DeleteCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品種別一覧取得
     */
    async v1ListCategoriesRaw(requestParameters: V1ListCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoriesResponseFromJSON(jsonValue));
    }

    /**
     * 商品種別一覧取得
     */
    async v1ListCategories(requestParameters: V1ListCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoriesResponse> {
        const response = await this.v1ListCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品種別更新
     */
    async v1UpdateCategoryRaw(requestParameters: V1UpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling v1UpdateCategory.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 商品種別更新
     */
    async v1UpdateCategory(requestParameters: V1UpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
