/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductTypeRequest,
  ErrorResponse,
  ProductTypeResponse,
  ProductTypesResponse,
  UpdateProductTypeRequest,
  UploadImageResponse,
} from '../models';
import {
    CreateProductTypeRequestFromJSON,
    CreateProductTypeRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProductTypeResponseFromJSON,
    ProductTypeResponseToJSON,
    ProductTypesResponseFromJSON,
    ProductTypesResponseToJSON,
    UpdateProductTypeRequestFromJSON,
    UpdateProductTypeRequestToJSON,
    UploadImageResponseFromJSON,
    UploadImageResponseToJSON,
} from '../models';

export interface V1CreateProductTypeRequest {
    categoryId: string;
    body: CreateProductTypeRequest;
}

export interface V1DeleteProductTypeRequest {
    categoryId: string;
    productTypeId: string;
}

export interface V1ListAllProductTypesRequest {
    limit?: number;
    offset?: number;
    name?: string;
    orders?: string;
}

export interface V1ListProductTypesRequest {
    categoryId: string;
    limit?: number;
    offset?: number;
    name?: string;
    orders?: string;
}

export interface V1UpdateProductTypeRequest {
    categoryId: string;
    productTypeId: string;
    body: UpdateProductTypeRequest;
}

export interface V1UploadProductTypeIconRequest {
    icon?: Blob;
}

/**
 * 
 */
export class ProductTypeApi extends runtime.BaseAPI {

    /**
     * 品目登録
     */
    async v1CreateProductTypeRaw(requestParameters: V1CreateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeResponse>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling v1CreateProductType.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/{categoryId}/product-types`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeResponseFromJSON(jsonValue));
    }

    /**
     * 品目登録
     */
    async v1CreateProductType(requestParameters: V1CreateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeResponse> {
        const response = await this.v1CreateProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 品目削除
     */
    async v1DeleteProductTypeRaw(requestParameters: V1DeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling v1DeleteProductType.');
        }

        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling v1DeleteProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/{categoryId}/product-types/{productTypeId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 品目削除
     */
    async v1DeleteProductType(requestParameters: V1DeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1DeleteProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 品目一覧取得(商品種別指定なし)
     */
    async v1ListAllProductTypesRaw(requestParameters: V1ListAllProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/-/product-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypesResponseFromJSON(jsonValue));
    }

    /**
     * 品目一覧取得(商品種別指定なし)
     */
    async v1ListAllProductTypes(requestParameters: V1ListAllProductTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypesResponse> {
        const response = await this.v1ListAllProductTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 品目一覧取得
     */
    async v1ListProductTypesRaw(requestParameters: V1ListProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypesResponse>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling v1ListProductTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/{categoryId}/product-types`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypesResponseFromJSON(jsonValue));
    }

    /**
     * 品目一覧取得
     */
    async v1ListProductTypes(requestParameters: V1ListProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypesResponse> {
        const response = await this.v1ListProductTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 品目更新
     */
    async v1UpdateProductTypeRaw(requestParameters: V1UpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling v1UpdateProductType.');
        }

        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling v1UpdateProductType.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/categories/{categoryId}/product-types/{productTypeId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 品目更新
     */
    async v1UpdateProductType(requestParameters: V1UpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 品目アイコンアップロード
     */
    async v1UploadProductTypeIconRaw(requestParameters: V1UploadProductTypeIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.icon !== undefined) {
            formParams.append('icon', requestParameters.icon as any);
        }

        const response = await this.request({
            path: `/v1/upload/product-types/icon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadImageResponseFromJSON(jsonValue));
    }

    /**
     * 品目アイコンアップロード
     */
    async v1UploadProductTypeIcon(requestParameters: V1UploadProductTypeIconRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadImageResponse> {
        const response = await this.v1UploadProductTypeIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
