/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateShippingRequest,
  ErrorResponse,
  ShippingResponse,
  ShippingsResponse,
  UpdateShippingRequest,
} from '../models';
import {
    CreateShippingRequestFromJSON,
    CreateShippingRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ShippingResponseFromJSON,
    ShippingResponseToJSON,
    ShippingsResponseFromJSON,
    ShippingsResponseToJSON,
    UpdateShippingRequestFromJSON,
    UpdateShippingRequestToJSON,
} from '../models';

export interface V1CreateShippingRequest {
    body: CreateShippingRequest;
}

export interface V1GetShippingRequest {
    shippingId: string;
}

export interface V1ListShippingsRequest {
    limit?: number;
    offset?: number;
    orders?: string;
}

export interface V1UpdateShippingRequest {
    shippingId: string;
    body: UpdateShippingRequest;
}

/**
 * 
 */
export class ShippingApi extends runtime.BaseAPI {

    /**
     * 配送設定登録
     */
    async v1CreateShippingRaw(requestParameters: V1CreateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/shippings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     * 配送設定登録
     */
    async v1CreateShipping(requestParameters: V1CreateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingResponse> {
        const response = await this.v1CreateShippingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 配送設定取得
     */
    async v1GetShippingRaw(requestParameters: V1GetShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling v1GetShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/shippings/{shippingId}`.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     * 配送設定取得
     */
    async v1GetShipping(requestParameters: V1GetShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingResponse> {
        const response = await this.v1GetShippingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 配送設定一覧取得
     */
    async v1ListShippingsRaw(requestParameters: V1ListShippingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/shippings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingsResponseFromJSON(jsonValue));
    }

    /**
     * 配送設定一覧取得
     */
    async v1ListShippings(requestParameters: V1ListShippingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingsResponse> {
        const response = await this.v1ListShippingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 配送設定更新
     */
    async v1UpdateShippingRaw(requestParameters: V1UpdateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling v1UpdateShipping.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/shippings/{shippingId}`.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 配送設定更新
     */
    async v1UpdateShipping(requestParameters: V1UpdateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateShippingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
