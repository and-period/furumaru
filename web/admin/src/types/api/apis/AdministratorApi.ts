/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdministratorResponse,
  AdministratorsResponse,
  CreateAdministratorRequest,
  ErrorResponse,
  UpdateAdministratorEmailRequest,
  UpdateAdministratorRequest,
} from '../models';
import {
    AdministratorResponseFromJSON,
    AdministratorResponseToJSON,
    AdministratorsResponseFromJSON,
    AdministratorsResponseToJSON,
    CreateAdministratorRequestFromJSON,
    CreateAdministratorRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateAdministratorEmailRequestFromJSON,
    UpdateAdministratorEmailRequestToJSON,
    UpdateAdministratorRequestFromJSON,
    UpdateAdministratorRequestToJSON,
} from '../models';

export interface V1CreateAdministratorRequest {
    body: CreateAdministratorRequest;
}

export interface V1DeleteAdministratorRequest {
    adminId: string;
}

export interface V1GetAdministratorRequest {
    adminId: string;
}

export interface V1ListAdministratorsRequest {
    limit?: number;
    offset?: number;
}

export interface V1UpdateAdministratorRequest {
    adminId: string;
    body: UpdateAdministratorRequest;
}

export interface V1UpdateAdministratorEmailRequest {
    adminId: string;
    body: UpdateAdministratorEmailRequest;
}

export interface V1UpdateAdministratorPasswordRequest {
    adminId: string;
    body: object;
}

/**
 * 
 */
export class AdministratorApi extends runtime.BaseAPI {

    /**
     * システム管理者登録
     */
    async v1CreateAdministratorRaw(requestParameters: V1CreateAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateAdministrator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorResponseFromJSON(jsonValue));
    }

    /**
     * システム管理者登録
     */
    async v1CreateAdministrator(requestParameters: V1CreateAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorResponse> {
        const response = await this.v1CreateAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者退会
     */
    async v1DeleteAdministratorRaw(requestParameters: V1DeleteAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.adminId === null || requestParameters.adminId === undefined) {
            throw new runtime.RequiredError('adminId','Required parameter requestParameters.adminId was null or undefined when calling v1DeleteAdministrator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators/{adminId}`.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters.adminId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * システム管理者退会
     */
    async v1DeleteAdministrator(requestParameters: V1DeleteAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1DeleteAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者取得
     */
    async v1GetAdministratorRaw(requestParameters: V1GetAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorResponse>> {
        if (requestParameters.adminId === null || requestParameters.adminId === undefined) {
            throw new runtime.RequiredError('adminId','Required parameter requestParameters.adminId was null or undefined when calling v1GetAdministrator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators/{adminId}`.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters.adminId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorResponseFromJSON(jsonValue));
    }

    /**
     * システム管理者取得
     */
    async v1GetAdministrator(requestParameters: V1GetAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorResponse> {
        const response = await this.v1GetAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者一覧取得
     */
    async v1ListAdministratorsRaw(requestParameters: V1ListAdministratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorsResponseFromJSON(jsonValue));
    }

    /**
     * システム管理者一覧取得
     */
    async v1ListAdministrators(requestParameters: V1ListAdministratorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorsResponse> {
        const response = await this.v1ListAdministratorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者更新
     */
    async v1UpdateAdministratorRaw(requestParameters: V1UpdateAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.adminId === null || requestParameters.adminId === undefined) {
            throw new runtime.RequiredError('adminId','Required parameter requestParameters.adminId was null or undefined when calling v1UpdateAdministrator.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAdministrator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators/{adminId}`.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters.adminId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * システム管理者更新
     */
    async v1UpdateAdministrator(requestParameters: V1UpdateAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者メールアドレス更新
     */
    async v1UpdateAdministratorEmailRaw(requestParameters: V1UpdateAdministratorEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.adminId === null || requestParameters.adminId === undefined) {
            throw new runtime.RequiredError('adminId','Required parameter requestParameters.adminId was null or undefined when calling v1UpdateAdministratorEmail.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAdministratorEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators/{adminId}/email`.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters.adminId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * システム管理者メールアドレス更新
     */
    async v1UpdateAdministratorEmail(requestParameters: V1UpdateAdministratorEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateAdministratorEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者パスワード更新(ランダム生成)
     */
    async v1UpdateAdministratorPasswordRaw(requestParameters: V1UpdateAdministratorPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.adminId === null || requestParameters.adminId === undefined) {
            throw new runtime.RequiredError('adminId','Required parameter requestParameters.adminId was null or undefined when calling v1UpdateAdministratorPassword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdateAdministratorPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/administrators/{adminId}/password`.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters.adminId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * システム管理者パスワード更新(ランダム生成)
     */
    async v1UpdateAdministratorPassword(requestParameters: V1UpdateAdministratorPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdateAdministratorPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
