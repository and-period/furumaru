/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePromotionRequest,
  ErrorResponse,
  PromotionResponse,
  PromotionsResponse,
  UpdatePromotionRequest,
} from '../models';
import {
    CreatePromotionRequestFromJSON,
    CreatePromotionRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PromotionResponseFromJSON,
    PromotionResponseToJSON,
    PromotionsResponseFromJSON,
    PromotionsResponseToJSON,
    UpdatePromotionRequestFromJSON,
    UpdatePromotionRequestToJSON,
} from '../models';

export interface V1CreatePromotionRequest {
    body: CreatePromotionRequest;
}

export interface V1DeletePromotionRequest {
    promotionId: string;
}

export interface V1GetPromotionRequest {
    promotionId: string;
}

export interface V1ListPromotionsRequest {
    limit?: number;
    offset?: number;
    orders?: string;
}

export interface V1UpdatePromotionRequest {
    promotionId: string;
    body: UpdatePromotionRequest;
}

/**
 * 
 */
export class PromotionApi extends runtime.BaseAPI {

    /**
     * プロモーション登録
     */
    async v1CreatePromotionRaw(requestParameters: V1CreatePromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreatePromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/promotions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     * プロモーション登録
     */
    async v1CreatePromotion(requestParameters: V1CreatePromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionResponse> {
        const response = await this.v1CreatePromotionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロモーション削除
     */
    async v1DeletePromotionRaw(requestParameters: V1DeletePromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.promotionId === null || requestParameters.promotionId === undefined) {
            throw new runtime.RequiredError('promotionId','Required parameter requestParameters.promotionId was null or undefined when calling v1DeletePromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/promotions/{promotionId}`.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters.promotionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * プロモーション削除
     */
    async v1DeletePromotion(requestParameters: V1DeletePromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1DeletePromotionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロモーション取得
     */
    async v1GetPromotionRaw(requestParameters: V1GetPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.promotionId === null || requestParameters.promotionId === undefined) {
            throw new runtime.RequiredError('promotionId','Required parameter requestParameters.promotionId was null or undefined when calling v1GetPromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/promotions/{promotionId}`.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters.promotionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     * プロモーション取得
     */
    async v1GetPromotion(requestParameters: V1GetPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionResponse> {
        const response = await this.v1GetPromotionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロモーション一覧取得
     */
    async v1ListPromotionsRaw(requestParameters: V1ListPromotionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orders !== undefined) {
            queryParameters['orders'] = requestParameters.orders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/promotions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionsResponseFromJSON(jsonValue));
    }

    /**
     * プロモーション一覧取得
     */
    async v1ListPromotions(requestParameters: V1ListPromotionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionsResponse> {
        const response = await this.v1ListPromotionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロモーション更新
     */
    async v1UpdatePromotionRaw(requestParameters: V1UpdatePromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.promotionId === null || requestParameters.promotionId === undefined) {
            throw new runtime.RequiredError('promotionId','Required parameter requestParameters.promotionId was null or undefined when calling v1UpdatePromotion.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1UpdatePromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/promotions/{promotionId}`.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters.promotionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * プロモーション更新
     */
    async v1UpdatePromotion(requestParameters: V1UpdatePromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1UpdatePromotionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
