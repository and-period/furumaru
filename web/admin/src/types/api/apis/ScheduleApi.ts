/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateScheduleRequest,
  ErrorResponse,
  ScheduleResponse,
} from '../models';
import {
    CreateScheduleRequestFromJSON,
    CreateScheduleRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ScheduleResponseFromJSON,
    ScheduleResponseToJSON,
} from '../models';

export interface V1CreateScheduleRequest {
    body: CreateScheduleRequest;
}

export interface V1GetScheduleRequest {
    scheduleId: string;
}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     * スケジュール登録
     */
    async v1CreateScheduleRaw(requestParameters: V1CreateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling v1CreateSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * スケジュール登録
     */
    async v1CreateSchedule(requestParameters: V1CreateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleResponse> {
        const response = await this.v1CreateScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 開催スケジュール取得
     */
    async v1GetScheduleRaw(requestParameters: V1GetScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling v1GetSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * 開催スケジュール取得
     */
    async v1GetSchedule(requestParameters: V1GetScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleResponse> {
        const response = await this.v1GetScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
