/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductTypesResponseProductTypesInnerIconsInner } from './ProductTypesResponseProductTypesInnerIconsInner';
import {
    ProductTypesResponseProductTypesInnerIconsInnerFromJSON,
    ProductTypesResponseProductTypesInnerIconsInnerFromJSONTyped,
    ProductTypesResponseProductTypesInnerIconsInnerToJSON,
} from './ProductTypesResponseProductTypesInnerIconsInner';

/**
 * 
 * @export
 * @interface ProductTypeResponse
 */
export interface ProductTypeResponse {
    /**
     * 品目ID
     * @type {string}
     * @memberof ProductTypeResponse
     */
    id: string;
    /**
     * 品目名
     * @type {string}
     * @memberof ProductTypeResponse
     */
    name: string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof ProductTypeResponse
     */
    iconUrl: string;
    /**
     * リサイズ済みアイコンURL一覧
     * @type {Array<ProductTypesResponseProductTypesInnerIconsInner>}
     * @memberof ProductTypeResponse
     */
    icons: Array<ProductTypesResponseProductTypesInnerIconsInner>;
    /**
     * 商品種別ID
     * @type {string}
     * @memberof ProductTypeResponse
     */
    categoryId: string;
    /**
     * 商品種別名
     * @type {string}
     * @memberof ProductTypeResponse
     */
    categoryName: string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof ProductTypeResponse
     */
    createdAt: number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof ProductTypeResponse
     */
    updatedAt: number;
}

/**
 * Check if a given object implements the ProductTypeResponse interface.
 */
export function instanceOfProductTypeResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "iconUrl" in value;
    isInstance = isInstance && "icons" in value;
    isInstance = isInstance && "categoryId" in value;
    isInstance = isInstance && "categoryName" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ProductTypeResponseFromJSON(json: any): ProductTypeResponse {
    return ProductTypeResponseFromJSONTyped(json, false);
}

export function ProductTypeResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductTypeResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'iconUrl': json['iconUrl'],
        'icons': ((json['icons'] as Array<any>).map(ProductTypesResponseProductTypesInnerIconsInnerFromJSON)),
        'categoryId': json['categoryId'],
        'categoryName': json['categoryName'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function ProductTypeResponseToJSON(value?: ProductTypeResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'iconUrl': value.iconUrl,
        'icons': ((value.icons as Array<any>).map(ProductTypesResponseProductTypesInnerIconsInnerToJSON)),
        'categoryId': value.categoryId,
        'categoryName': value.categoryName,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
    };
}

