/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AdministratorsResponseAdministratorsInner
 */
export interface AdministratorsResponseAdministratorsInner {
    /**
     * システム管理者ID
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    id: string;
    /**
     * 姓
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    lastname: string;
    /**
     * 名
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    firstname: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    lastnameKana: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    firstnameKana: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    email: string;
    /**
     * 電話番号 (国際番号 + 電話番号)
     * @type {string}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    phoneNumber: string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    createdAt: number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof AdministratorsResponseAdministratorsInner
     */
    updatedAt: number;
}

/**
 * Check if a given object implements the AdministratorsResponseAdministratorsInner interface.
 */
export function instanceOfAdministratorsResponseAdministratorsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "lastname" in value;
    isInstance = isInstance && "firstname" in value;
    isInstance = isInstance && "lastnameKana" in value;
    isInstance = isInstance && "firstnameKana" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function AdministratorsResponseAdministratorsInnerFromJSON(json: any): AdministratorsResponseAdministratorsInner {
    return AdministratorsResponseAdministratorsInnerFromJSONTyped(json, false);
}

export function AdministratorsResponseAdministratorsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdministratorsResponseAdministratorsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'lastname': json['lastname'],
        'firstname': json['firstname'],
        'lastnameKana': json['lastnameKana'],
        'firstnameKana': json['firstnameKana'],
        'email': json['email'],
        'phoneNumber': json['phoneNumber'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function AdministratorsResponseAdministratorsInnerToJSON(value?: AdministratorsResponseAdministratorsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'lastname': value.lastname,
        'firstname': value.firstname,
        'lastnameKana': value.lastnameKana,
        'firstnameKana': value.firstnameKana,
        'email': value.email,
        'phoneNumber': value.phoneNumber,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
    };
}

