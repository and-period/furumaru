/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PaymentMethodType } from './PaymentMethodType';
import {
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeFromJSONTyped,
    PaymentMethodTypeToJSON,
} from './PaymentMethodType';
import type { PaymentStatus } from './PaymentStatus';
import {
    PaymentStatusFromJSON,
    PaymentStatusFromJSONTyped,
    PaymentStatusToJSON,
} from './PaymentStatus';

/**
 * 支払い情報
 * @export
 * @interface OrderResponsePayment
 */
export interface OrderResponsePayment {
    /**
     * 取引ID
     * @type {string}
     * @memberof OrderResponsePayment
     */
    transactionId: string;
    /**
     * 決済手段ID
     * @type {string}
     * @memberof OrderResponsePayment
     */
    methodId: string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof OrderResponsePayment
     */
    methodType: PaymentMethodType;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof OrderResponsePayment
     */
    status: PaymentStatus;
    /**
     * 購入金額
     * @type {number}
     * @memberof OrderResponsePayment
     */
    subtotal: number;
    /**
     * 割引金額
     * @type {number}
     * @memberof OrderResponsePayment
     */
    discount: number;
    /**
     * 配送料金
     * @type {number}
     * @memberof OrderResponsePayment
     */
    shippingFee: number;
    /**
     * 消費税
     * @type {number}
     * @memberof OrderResponsePayment
     */
    tax: number;
    /**
     * 支払い合計金額
     * @type {number}
     * @memberof OrderResponsePayment
     */
    total: number;
    /**
     * 請求先情報ID
     * @type {string}
     * @memberof OrderResponsePayment
     */
    addressId: string;
    /**
     * 請求先情報 姓
     * @type {string}
     * @memberof OrderResponsePayment
     */
    lastname: string;
    /**
     * 請求先情報 名
     * @type {string}
     * @memberof OrderResponsePayment
     */
    firstname: string;
    /**
     * 請求先情報 郵便番号
     * @type {string}
     * @memberof OrderResponsePayment
     */
    postalCode: string;
    /**
     * 請求先情報 都道府県
     * @type {string}
     * @memberof OrderResponsePayment
     */
    prefecture: string;
    /**
     * 請求先情報 市区町村
     * @type {string}
     * @memberof OrderResponsePayment
     */
    city: string;
    /**
     * 請求先情報 町名・番地
     * @type {string}
     * @memberof OrderResponsePayment
     */
    addressLine1: string;
    /**
     * 請求先情報 ビル名・号室など
     * @type {string}
     * @memberof OrderResponsePayment
     */
    addressLine2: string;
    /**
     * 請求先情報 電話番号
     * @type {string}
     * @memberof OrderResponsePayment
     */
    phoneNumber: string;
}

/**
 * Check if a given object implements the OrderResponsePayment interface.
 */
export function instanceOfOrderResponsePayment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "methodId" in value;
    isInstance = isInstance && "methodType" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "subtotal" in value;
    isInstance = isInstance && "discount" in value;
    isInstance = isInstance && "shippingFee" in value;
    isInstance = isInstance && "tax" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "addressId" in value;
    isInstance = isInstance && "lastname" in value;
    isInstance = isInstance && "firstname" in value;
    isInstance = isInstance && "postalCode" in value;
    isInstance = isInstance && "prefecture" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "addressLine1" in value;
    isInstance = isInstance && "addressLine2" in value;
    isInstance = isInstance && "phoneNumber" in value;

    return isInstance;
}

export function OrderResponsePaymentFromJSON(json: any): OrderResponsePayment {
    return OrderResponsePaymentFromJSONTyped(json, false);
}

export function OrderResponsePaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderResponsePayment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': json['transactionId'],
        'methodId': json['methodId'],
        'methodType': PaymentMethodTypeFromJSON(json['methodType']),
        'status': PaymentStatusFromJSON(json['status']),
        'subtotal': json['subtotal'],
        'discount': json['discount'],
        'shippingFee': json['shippingFee'],
        'tax': json['tax'],
        'total': json['total'],
        'addressId': json['addressId'],
        'lastname': json['lastname'],
        'firstname': json['firstname'],
        'postalCode': json['postalCode'],
        'prefecture': json['prefecture'],
        'city': json['city'],
        'addressLine1': json['addressLine1'],
        'addressLine2': json['addressLine2'],
        'phoneNumber': json['phoneNumber'],
    };
}

export function OrderResponsePaymentToJSON(value?: OrderResponsePayment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionId': value.transactionId,
        'methodId': value.methodId,
        'methodType': PaymentMethodTypeToJSON(value.methodType),
        'status': PaymentStatusToJSON(value.status),
        'subtotal': value.subtotal,
        'discount': value.discount,
        'shippingFee': value.shippingFee,
        'tax': value.tax,
        'total': value.total,
        'addressId': value.addressId,
        'lastname': value.lastname,
        'firstname': value.firstname,
        'postalCode': value.postalCode,
        'prefecture': value.prefecture,
        'city': value.city,
        'addressLine1': value.addressLine1,
        'addressLine2': value.addressLine2,
        'phoneNumber': value.phoneNumber,
    };
}

