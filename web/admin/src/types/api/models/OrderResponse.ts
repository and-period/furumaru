/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrderResponseFulfillment } from './OrderResponseFulfillment';
import {
    OrderResponseFulfillmentFromJSON,
    OrderResponseFulfillmentFromJSONTyped,
    OrderResponseFulfillmentToJSON,
} from './OrderResponseFulfillment';
import type { OrderResponseItemsInner } from './OrderResponseItemsInner';
import {
    OrderResponseItemsInnerFromJSON,
    OrderResponseItemsInnerFromJSONTyped,
    OrderResponseItemsInnerToJSON,
} from './OrderResponseItemsInner';
import type { OrderResponsePayment } from './OrderResponsePayment';
import {
    OrderResponsePaymentFromJSON,
    OrderResponsePaymentFromJSONTyped,
    OrderResponsePaymentToJSON,
} from './OrderResponsePayment';
import type { OrderResponseRefund } from './OrderResponseRefund';
import {
    OrderResponseRefundFromJSON,
    OrderResponseRefundFromJSONTyped,
    OrderResponseRefundToJSON,
} from './OrderResponseRefund';

/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 注文ID
     * @type {string}
     * @memberof OrderResponse
     */
    id: string;
    /**
     * 開催スケジュールID
     * @type {string}
     * @memberof OrderResponse
     */
    scheduleId: string;
    /**
     * プロモーションID
     * @type {string}
     * @memberof OrderResponse
     */
    promotionId: string;
    /**
     * ユーザーID
     * @type {string}
     * @memberof OrderResponse
     */
    userId: string;
    /**
     * 注文者名
     * @type {string}
     * @memberof OrderResponse
     */
    userName: string;
    /**
     * 
     * @type {OrderResponsePayment}
     * @memberof OrderResponse
     */
    payment: OrderResponsePayment;
    /**
     * 
     * @type {OrderResponseFulfillment}
     * @memberof OrderResponse
     */
    fulfillment: OrderResponseFulfillment;
    /**
     * 
     * @type {OrderResponseRefund}
     * @memberof OrderResponse
     */
    refund: OrderResponseRefund;
    /**
     * 注文商品一覧
     * @type {Array<OrderResponseItemsInner>}
     * @memberof OrderResponse
     */
    items: Array<OrderResponseItemsInner>;
    /**
     * 注文日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    orderedAt: number;
    /**
     * 支払日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    paidAt: number;
    /**
     * 配送日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    deliveredAt: number;
    /**
     * 注文キャンセル日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    canceledAt: number;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    createdAt: number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof OrderResponse
     */
    updatedAt: number;
}

/**
 * Check if a given object implements the OrderResponse interface.
 */
export function instanceOfOrderResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "scheduleId" in value;
    isInstance = isInstance && "promotionId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "userName" in value;
    isInstance = isInstance && "payment" in value;
    isInstance = isInstance && "fulfillment" in value;
    isInstance = isInstance && "refund" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "orderedAt" in value;
    isInstance = isInstance && "paidAt" in value;
    isInstance = isInstance && "deliveredAt" in value;
    isInstance = isInstance && "canceledAt" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function OrderResponseFromJSON(json: any): OrderResponse {
    return OrderResponseFromJSONTyped(json, false);
}

export function OrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'scheduleId': json['scheduleId'],
        'promotionId': json['promotionId'],
        'userId': json['userId'],
        'userName': json['userName'],
        'payment': OrderResponsePaymentFromJSON(json['payment']),
        'fulfillment': OrderResponseFulfillmentFromJSON(json['fulfillment']),
        'refund': OrderResponseRefundFromJSON(json['refund']),
        'items': ((json['items'] as Array<any>).map(OrderResponseItemsInnerFromJSON)),
        'orderedAt': json['orderedAt'],
        'paidAt': json['paidAt'],
        'deliveredAt': json['deliveredAt'],
        'canceledAt': json['canceledAt'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function OrderResponseToJSON(value?: OrderResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'scheduleId': value.scheduleId,
        'promotionId': value.promotionId,
        'userId': value.userId,
        'userName': value.userName,
        'payment': OrderResponsePaymentToJSON(value.payment),
        'fulfillment': OrderResponseFulfillmentToJSON(value.fulfillment),
        'refund': OrderResponseRefundToJSON(value.refund),
        'items': ((value.items as Array<any>).map(OrderResponseItemsInnerToJSON)),
        'orderedAt': value.orderedAt,
        'paidAt': value.paidAt,
        'deliveredAt': value.deliveredAt,
        'canceledAt': value.canceledAt,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
    };
}

