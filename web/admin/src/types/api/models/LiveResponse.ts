/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ管理者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LiveStatus } from './LiveStatus';
import {
    LiveStatusFromJSON,
    LiveStatusFromJSONTyped,
    LiveStatusToJSON,
} from './LiveStatus';
import type { ScheduleResponseLivesInnerProductsInner } from './ScheduleResponseLivesInnerProductsInner';
import {
    ScheduleResponseLivesInnerProductsInnerFromJSON,
    ScheduleResponseLivesInnerProductsInnerFromJSONTyped,
    ScheduleResponseLivesInnerProductsInnerToJSON,
} from './ScheduleResponseLivesInnerProductsInner';

/**
 * 
 * @export
 * @interface LiveResponse
 */
export interface LiveResponse {
    /**
     * 配信ID
     * @type {string}
     * @memberof LiveResponse
     */
    id: string;
    /**
     * スケジュールID
     * @type {string}
     * @memberof LiveResponse
     */
    scheduleId: string;
    /**
     * ライブタイトル(128文字まで)
     * @type {string}
     * @memberof LiveResponse
     */
    title: string;
    /**
     * ライブ説明(20000文字まで)
     * @type {string}
     * @memberof LiveResponse
     */
    description: string;
    /**
     * 生産者ID
     * @type {string}
     * @memberof LiveResponse
     */
    producerId: string;
    /**
     * 生産者名
     * @type {string}
     * @memberof LiveResponse
     */
    producerName: string;
    /**
     * ライブ開始日時
     * @type {number}
     * @memberof LiveResponse
     */
    startAt: number;
    /**
     * ライブ終了日時
     * @type {number}
     * @memberof LiveResponse
     */
    endAt: number;
    /**
     * 配信公開フラグ
     * @type {boolean}
     * @memberof LiveResponse
     */
    published: boolean;
    /**
     * キャンセルフラグ
     * @type {boolean}
     * @memberof LiveResponse
     */
    canceled: boolean;
    /**
     * 
     * @type {LiveStatus}
     * @memberof LiveResponse
     */
    status: LiveStatus;
    /**
     * 
     * @type {Array<ScheduleResponseLivesInnerProductsInner>}
     * @memberof LiveResponse
     */
    products: Array<ScheduleResponseLivesInnerProductsInner>;
    /**
     * チャンネルARN
     * @type {string}
     * @memberof LiveResponse
     */
    channelArn: string;
    /**
     * ストリームキーARN
     * @type {string}
     * @memberof LiveResponse
     */
    streamKeyArn: string;
    /**
     * 登録日時 (unixtime)
     * @type {number}
     * @memberof LiveResponse
     */
    createdAt: number;
    /**
     * 更新日時 (unixtime)
     * @type {number}
     * @memberof LiveResponse
     */
    updatedAt: number;
    /**
     * 【配信用】チャンネル名
     * @type {string}
     * @memberof LiveResponse
     */
    channelName: string;
    /**
     * 【配信用】配信エンドポイント
     * @type {string}
     * @memberof LiveResponse
     */
    ingestEndpoint: string;
    /**
     * 【配信用】ストリームキー
     * @type {string}
     * @memberof LiveResponse
     */
    streamKey: string;
    /**
     * ストリームキーID
     * @type {string}
     * @memberof LiveResponse
     */
    streamId: string;
    /**
     * 【視聴用】再生用URL
     * @type {string}
     * @memberof LiveResponse
     */
    playbackUrl: string;
    /**
     * 【共用】視聴者数
     * @type {number}
     * @memberof LiveResponse
     */
    viewerCount?: number;
}

/**
 * Check if a given object implements the LiveResponse interface.
 */
export function instanceOfLiveResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "scheduleId" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "producerId" in value;
    isInstance = isInstance && "producerName" in value;
    isInstance = isInstance && "startAt" in value;
    isInstance = isInstance && "endAt" in value;
    isInstance = isInstance && "published" in value;
    isInstance = isInstance && "canceled" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "products" in value;
    isInstance = isInstance && "channelArn" in value;
    isInstance = isInstance && "streamKeyArn" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "channelName" in value;
    isInstance = isInstance && "ingestEndpoint" in value;
    isInstance = isInstance && "streamKey" in value;
    isInstance = isInstance && "streamId" in value;
    isInstance = isInstance && "playbackUrl" in value;

    return isInstance;
}

export function LiveResponseFromJSON(json: any): LiveResponse {
    return LiveResponseFromJSONTyped(json, false);
}

export function LiveResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'scheduleId': json['scheduleId'],
        'title': json['title'],
        'description': json['description'],
        'producerId': json['producerId'],
        'producerName': json['producerName'],
        'startAt': json['startAt'],
        'endAt': json['endAt'],
        'published': json['published'],
        'canceled': json['canceled'],
        'status': LiveStatusFromJSON(json['status']),
        'products': ((json['products'] as Array<any>).map(ScheduleResponseLivesInnerProductsInnerFromJSON)),
        'channelArn': json['channelArn'],
        'streamKeyArn': json['streamKeyArn'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'channelName': json['channelName'],
        'ingestEndpoint': json['ingestEndpoint'],
        'streamKey': json['streamKey'],
        'streamId': json['streamId'],
        'playbackUrl': json['playbackUrl'],
        'viewerCount': !exists(json, 'viewerCount') ? undefined : json['viewerCount'],
    };
}

export function LiveResponseToJSON(value?: LiveResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'scheduleId': value.scheduleId,
        'title': value.title,
        'description': value.description,
        'producerId': value.producerId,
        'producerName': value.producerName,
        'startAt': value.startAt,
        'endAt': value.endAt,
        'published': value.published,
        'canceled': value.canceled,
        'status': LiveStatusToJSON(value.status),
        'products': ((value.products as Array<any>).map(ScheduleResponseLivesInnerProductsInnerToJSON)),
        'channelArn': value.channelArn,
        'streamKeyArn': value.streamKeyArn,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'channelName': value.channelName,
        'ingestEndpoint': value.ingestEndpoint,
        'streamKey': value.streamKey,
        'streamId': value.streamId,
        'playbackUrl': value.playbackUrl,
        'viewerCount': value.viewerCount,
    };
}

