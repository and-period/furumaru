/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationType } from './NotificationType';
import {
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
    NotificationTypeToJSONTyped,
} from './NotificationType';
import type { NotificationTarget } from './NotificationTarget';
import {
    NotificationTargetFromJSON,
    NotificationTargetFromJSONTyped,
    NotificationTargetToJSON,
    NotificationTargetToJSONTyped,
} from './NotificationTarget';
import type { NotificationStatus } from './NotificationStatus';
import {
    NotificationStatusFromJSON,
    NotificationStatusFromJSONTyped,
    NotificationStatusToJSON,
    NotificationStatusToJSONTyped,
} from './NotificationStatus';

/**
 * お知らせ情報
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 本文
     * @type {string}
     * @memberof Notification
     */
    body: string;
    /**
     * 作成日時
     * @type {number}
     * @memberof Notification
     */
    createdAt: number;
    /**
     * 登録者ID
     * @type {string}
     * @memberof Notification
     */
    createdBy: string;
    /**
     * お知らせID
     * @type {string}
     * @memberof Notification
     */
    id: string;
    /**
     * 備考
     * @type {string}
     * @memberof Notification
     */
    note: string;
    /**
     * プロモーションID
     * @type {string}
     * @memberof Notification
     */
    promotionId: string;
    /**
     * 掲載開始日時
     * @type {number}
     * @memberof Notification
     */
    publishedAt: number;
    /**
     * 
     * @type {NotificationStatus}
     * @memberof Notification
     */
    status: NotificationStatus;
    /**
     * 掲載対象一覧
     * @type {Array<NotificationTarget>}
     * @memberof Notification
     */
    targets: Array<NotificationTarget>;
    /**
     * タイトル
     * @type {string}
     * @memberof Notification
     */
    title: string;
    /**
     * 
     * @type {NotificationType}
     * @memberof Notification
     */
    type: NotificationType;
    /**
     * 更新日時
     * @type {number}
     * @memberof Notification
     */
    updatedAt: number;
    /**
     * 更新者ID
     * @type {string}
     * @memberof Notification
     */
    updatedBy: string;
}



/**
 * Check if a given object implements the Notification interface.
 */
export function instanceOfNotification(value: object): value is Notification {
    if (!('body' in value) || value['body'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('note' in value) || value['note'] === undefined) return false;
    if (!('promotionId' in value) || value['promotionId'] === undefined) return false;
    if (!('publishedAt' in value) || value['publishedAt'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('targets' in value) || value['targets'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function NotificationFromJSON(json: any): Notification {
    return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notification {
    if (json == null) {
        return json;
    }
    return {
        
        'body': json['body'],
        'createdAt': json['createdAt'],
        'createdBy': json['createdBy'],
        'id': json['id'],
        'note': json['note'],
        'promotionId': json['promotionId'],
        'publishedAt': json['publishedAt'],
        'status': NotificationStatusFromJSON(json['status']),
        'targets': ((json['targets'] as Array<any>).map(NotificationTargetFromJSON)),
        'title': json['title'],
        'type': NotificationTypeFromJSON(json['type']),
        'updatedAt': json['updatedAt'],
        'updatedBy': json['updatedBy'],
    };
}

export function NotificationToJSON(json: any): Notification {
    return NotificationToJSONTyped(json, false);
}

export function NotificationToJSONTyped(value?: Notification | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'body': value['body'],
        'createdAt': value['createdAt'],
        'createdBy': value['createdBy'],
        'id': value['id'],
        'note': value['note'],
        'promotionId': value['promotionId'],
        'publishedAt': value['publishedAt'],
        'status': NotificationStatusToJSON(value['status']),
        'targets': ((value['targets'] as Array<any>).map(NotificationTargetToJSON)),
        'title': value['title'],
        'type': NotificationTypeToJSON(value['type']),
        'updatedAt': value['updatedAt'],
        'updatedBy': value['updatedBy'],
    };
}

