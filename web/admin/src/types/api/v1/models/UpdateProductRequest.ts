/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UpdateProductMedia } from './UpdateProductMedia';
import {
    UpdateProductMediaFromJSON,
    UpdateProductMediaFromJSONTyped,
    UpdateProductMediaToJSON,
    UpdateProductMediaToJSONTyped,
} from './UpdateProductMedia';

/**
 * 
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
    /**
     * 箱の占有率(サイズ:60)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    box60Rate: number;
    /**
     * 箱の占有率(サイズ:80)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    box80Rate: number;
    /**
     * 箱の占有率(サイズ:100)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    box100Rate: number;
    /**
     * 原価(税込)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    cost: number;
    /**
     * 配送方法
     * @type {number}
     * @memberof UpdateProductRequest
     */
    deliveryType: number;
    /**
     * 商品説明
     * @type {string}
     * @memberof UpdateProductRequest
     */
    description: string;
    /**
     * 販売終了日時
     * @type {number}
     * @memberof UpdateProductRequest
     */
    endAt: number;
    /**
     * 賞味期限(単位:日)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    expirationDate: number;
    /**
     * 在庫数
     * @type {number}
     * @memberof UpdateProductRequest
     */
    inventory: number;
    /**
     * 数量単位説明
     * @type {string}
     * @memberof UpdateProductRequest
     */
    itemDescription: string;
    /**
     * 数量単位
     * @type {string}
     * @memberof UpdateProductRequest
     */
    itemUnit: string;
    /**
     * メディア一覧
     * @type {Array<UpdateProductMedia>}
     * @memberof UpdateProductRequest
     */
    media: Array<UpdateProductMedia>;
    /**
     * 商品名
     * @type {string}
     * @memberof UpdateProductRequest
     */
    name: string;
    /**
     * 原産地(市区町村)
     * @type {string}
     * @memberof UpdateProductRequest
     */
    originCity: string;
    /**
     * 原産地(都道府県)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    originPrefectureCode: number;
    /**
     * 販売価格(税込)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    price: number;
    /**
     * 商品タグID一覧
     * @type {Array<string>}
     * @memberof UpdateProductRequest
     */
    productTagIds: Array<string>;
    /**
     * 品目ID
     * @type {string}
     * @memberof UpdateProductRequest
     */
    productTypeId: string;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof UpdateProductRequest
     */
    recommendedPoint1: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof UpdateProductRequest
     */
    recommendedPoint2: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof UpdateProductRequest
     */
    recommendedPoint3: string;
    /**
     * 公開範囲
     * @type {number}
     * @memberof UpdateProductRequest
     */
    scope: number;
    /**
     * 販売開始日時
     * @type {number}
     * @memberof UpdateProductRequest
     */
    startAt: number;
    /**
     * 保存方法
     * @type {number}
     * @memberof UpdateProductRequest
     */
    storageMethodType: number;
    /**
     * 重量(kg,少数第一位まで)
     * @type {number}
     * @memberof UpdateProductRequest
     */
    weight: number;
}

/**
 * Check if a given object implements the UpdateProductRequest interface.
 */
export function instanceOfUpdateProductRequest(value: object): value is UpdateProductRequest {
    if (!('box60Rate' in value) || value['box60Rate'] === undefined) return false;
    if (!('box80Rate' in value) || value['box80Rate'] === undefined) return false;
    if (!('box100Rate' in value) || value['box100Rate'] === undefined) return false;
    if (!('cost' in value) || value['cost'] === undefined) return false;
    if (!('deliveryType' in value) || value['deliveryType'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('endAt' in value) || value['endAt'] === undefined) return false;
    if (!('expirationDate' in value) || value['expirationDate'] === undefined) return false;
    if (!('inventory' in value) || value['inventory'] === undefined) return false;
    if (!('itemDescription' in value) || value['itemDescription'] === undefined) return false;
    if (!('itemUnit' in value) || value['itemUnit'] === undefined) return false;
    if (!('media' in value) || value['media'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('originCity' in value) || value['originCity'] === undefined) return false;
    if (!('originPrefectureCode' in value) || value['originPrefectureCode'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('productTagIds' in value) || value['productTagIds'] === undefined) return false;
    if (!('productTypeId' in value) || value['productTypeId'] === undefined) return false;
    if (!('recommendedPoint1' in value) || value['recommendedPoint1'] === undefined) return false;
    if (!('recommendedPoint2' in value) || value['recommendedPoint2'] === undefined) return false;
    if (!('recommendedPoint3' in value) || value['recommendedPoint3'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('startAt' in value) || value['startAt'] === undefined) return false;
    if (!('storageMethodType' in value) || value['storageMethodType'] === undefined) return false;
    if (!('weight' in value) || value['weight'] === undefined) return false;
    return true;
}

export function UpdateProductRequestFromJSON(json: any): UpdateProductRequest {
    return UpdateProductRequestFromJSONTyped(json, false);
}

export function UpdateProductRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateProductRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'box60Rate': json['box60Rate'],
        'box80Rate': json['box80Rate'],
        'box100Rate': json['box100Rate'],
        'cost': json['cost'],
        'deliveryType': json['deliveryType'],
        'description': json['description'],
        'endAt': json['endAt'],
        'expirationDate': json['expirationDate'],
        'inventory': json['inventory'],
        'itemDescription': json['itemDescription'],
        'itemUnit': json['itemUnit'],
        'media': ((json['media'] as Array<any>).map(UpdateProductMediaFromJSON)),
        'name': json['name'],
        'originCity': json['originCity'],
        'originPrefectureCode': json['originPrefectureCode'],
        'price': json['price'],
        'productTagIds': json['productTagIds'],
        'productTypeId': json['productTypeId'],
        'recommendedPoint1': json['recommendedPoint1'],
        'recommendedPoint2': json['recommendedPoint2'],
        'recommendedPoint3': json['recommendedPoint3'],
        'scope': json['scope'],
        'startAt': json['startAt'],
        'storageMethodType': json['storageMethodType'],
        'weight': json['weight'],
    };
}

export function UpdateProductRequestToJSON(json: any): UpdateProductRequest {
    return UpdateProductRequestToJSONTyped(json, false);
}

export function UpdateProductRequestToJSONTyped(value?: UpdateProductRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'box60Rate': value['box60Rate'],
        'box80Rate': value['box80Rate'],
        'box100Rate': value['box100Rate'],
        'cost': value['cost'],
        'deliveryType': value['deliveryType'],
        'description': value['description'],
        'endAt': value['endAt'],
        'expirationDate': value['expirationDate'],
        'inventory': value['inventory'],
        'itemDescription': value['itemDescription'],
        'itemUnit': value['itemUnit'],
        'media': ((value['media'] as Array<any>).map(UpdateProductMediaToJSON)),
        'name': value['name'],
        'originCity': value['originCity'],
        'originPrefectureCode': value['originPrefectureCode'],
        'price': value['price'],
        'productTagIds': value['productTagIds'],
        'productTypeId': value['productTypeId'],
        'recommendedPoint1': value['recommendedPoint1'],
        'recommendedPoint2': value['recommendedPoint2'],
        'recommendedPoint3': value['recommendedPoint3'],
        'scope': value['scope'],
        'startAt': value['startAt'],
        'storageMethodType': value['storageMethodType'],
        'weight': value['weight'],
    };
}

