/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentMethodType } from './PaymentMethodType';
import {
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeFromJSONTyped,
    PaymentMethodTypeToJSON,
    PaymentMethodTypeToJSONTyped,
} from './PaymentMethodType';
import type { PaymentStatus } from './PaymentStatus';
import {
    PaymentStatusFromJSON,
    PaymentStatusFromJSONTyped,
    PaymentStatusToJSON,
    PaymentStatusToJSONTyped,
} from './PaymentStatus';

/**
 * 支払い情報
 * @export
 * @interface OrderPayment
 */
export interface OrderPayment {
    /**
     * 住所ID
     * @type {string}
     * @memberof OrderPayment
     */
    addressId: string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof OrderPayment
     */
    addressLine1: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof OrderPayment
     */
    addressLine2: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof OrderPayment
     */
    city: string;
    /**
     * 割引金額(税込)
     * @type {number}
     * @memberof OrderPayment
     */
    discount: number;
    /**
     * 氏名（名）
     * @type {string}
     * @memberof OrderPayment
     */
    firstname: string;
    /**
     * 氏名(名:かな)
     * @type {string}
     * @memberof OrderPayment
     */
    firstnameKana: string;
    /**
     * 氏名（姓）
     * @type {string}
     * @memberof OrderPayment
     */
    lastname: string;
    /**
     * 氏名(姓:かな)
     * @type {string}
     * @memberof OrderPayment
     */
    lastnameKana: string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof OrderPayment
     */
    methodType: PaymentMethodType;
    /**
     * 注文日時
     * @type {number}
     * @memberof OrderPayment
     */
    orderedAt: number;
    /**
     * 支払日時
     * @type {number}
     * @memberof OrderPayment
     */
    paidAt: number;
    /**
     * 電話番号
     * @type {string}
     * @memberof OrderPayment
     */
    phoneNumber: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof OrderPayment
     */
    postalCode: string;
    /**
     * 都道府県
     * @type {string}
     * @memberof OrderPayment
     */
    prefecture: string;
    /**
     * 都道府県コード
     * @type {number}
     * @memberof OrderPayment
     */
    prefectureCode: number;
    /**
     * 配送手数料(税込)
     * @type {number}
     * @memberof OrderPayment
     */
    shippingFee: number;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof OrderPayment
     */
    status: PaymentStatus;
    /**
     * 購入金額(税込)
     * @type {number}
     * @memberof OrderPayment
     */
    subtotal: number;
    /**
     * 合計金額(税込)
     * @type {number}
     * @memberof OrderPayment
     */
    total: number;
    /**
     * 取引ID
     * @type {string}
     * @memberof OrderPayment
     */
    transactionId: string;
}



/**
 * Check if a given object implements the OrderPayment interface.
 */
export function instanceOfOrderPayment(value: object): value is OrderPayment {
    if (!('addressId' in value) || value['addressId'] === undefined) return false;
    if (!('addressLine1' in value) || value['addressLine1'] === undefined) return false;
    if (!('addressLine2' in value) || value['addressLine2'] === undefined) return false;
    if (!('city' in value) || value['city'] === undefined) return false;
    if (!('discount' in value) || value['discount'] === undefined) return false;
    if (!('firstname' in value) || value['firstname'] === undefined) return false;
    if (!('firstnameKana' in value) || value['firstnameKana'] === undefined) return false;
    if (!('lastname' in value) || value['lastname'] === undefined) return false;
    if (!('lastnameKana' in value) || value['lastnameKana'] === undefined) return false;
    if (!('methodType' in value) || value['methodType'] === undefined) return false;
    if (!('orderedAt' in value) || value['orderedAt'] === undefined) return false;
    if (!('paidAt' in value) || value['paidAt'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('postalCode' in value) || value['postalCode'] === undefined) return false;
    if (!('prefecture' in value) || value['prefecture'] === undefined) return false;
    if (!('prefectureCode' in value) || value['prefectureCode'] === undefined) return false;
    if (!('shippingFee' in value) || value['shippingFee'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('subtotal' in value) || value['subtotal'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('transactionId' in value) || value['transactionId'] === undefined) return false;
    return true;
}

export function OrderPaymentFromJSON(json: any): OrderPayment {
    return OrderPaymentFromJSONTyped(json, false);
}

export function OrderPaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderPayment {
    if (json == null) {
        return json;
    }
    return {
        
        'addressId': json['addressId'],
        'addressLine1': json['addressLine1'],
        'addressLine2': json['addressLine2'],
        'city': json['city'],
        'discount': json['discount'],
        'firstname': json['firstname'],
        'firstnameKana': json['firstnameKana'],
        'lastname': json['lastname'],
        'lastnameKana': json['lastnameKana'],
        'methodType': PaymentMethodTypeFromJSON(json['methodType']),
        'orderedAt': json['orderedAt'],
        'paidAt': json['paidAt'],
        'phoneNumber': json['phoneNumber'],
        'postalCode': json['postalCode'],
        'prefecture': json['prefecture'],
        'prefectureCode': json['prefectureCode'],
        'shippingFee': json['shippingFee'],
        'status': PaymentStatusFromJSON(json['status']),
        'subtotal': json['subtotal'],
        'total': json['total'],
        'transactionId': json['transactionId'],
    };
}

export function OrderPaymentToJSON(json: any): OrderPayment {
    return OrderPaymentToJSONTyped(json, false);
}

export function OrderPaymentToJSONTyped(value?: OrderPayment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'addressId': value['addressId'],
        'addressLine1': value['addressLine1'],
        'addressLine2': value['addressLine2'],
        'city': value['city'],
        'discount': value['discount'],
        'firstname': value['firstname'],
        'firstnameKana': value['firstnameKana'],
        'lastname': value['lastname'],
        'lastnameKana': value['lastnameKana'],
        'methodType': PaymentMethodTypeToJSON(value['methodType']),
        'orderedAt': value['orderedAt'],
        'paidAt': value['paidAt'],
        'phoneNumber': value['phoneNumber'],
        'postalCode': value['postalCode'],
        'prefecture': value['prefecture'],
        'prefectureCode': value['prefectureCode'],
        'shippingFee': value['shippingFee'],
        'status': PaymentStatusToJSON(value['status']),
        'subtotal': value['subtotal'],
        'total': value['total'],
        'transactionId': value['transactionId'],
    };
}

