/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ThreadUserType } from './ThreadUserType';
import {
    ThreadUserTypeFromJSON,
    ThreadUserTypeFromJSONTyped,
    ThreadUserTypeToJSON,
    ThreadUserTypeToJSONTyped,
} from './ThreadUserType';

/**
 * お問い合わせ会話履歴
 * @export
 * @interface Thread
 */
export interface Thread {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof Thread
     */
    contactId: string;
    /**
     * 会話内容
     * @type {string}
     * @memberof Thread
     */
    content: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof Thread
     */
    createdAt: number;
    /**
     * お問い合わせ会話履歴ID
     * @type {string}
     * @memberof Thread
     */
    id: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof Thread
     */
    updatedAt: number;
    /**
     * 送信者ID
     * @type {string}
     * @memberof Thread
     */
    userId: string;
    /**
     * 
     * @type {ThreadUserType}
     * @memberof Thread
     */
    userType: ThreadUserType;
}



/**
 * Check if a given object implements the Thread interface.
 */
export function instanceOfThread(value: object): value is Thread {
    if (!('contactId' in value) || value['contactId'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    return true;
}

export function ThreadFromJSON(json: any): Thread {
    return ThreadFromJSONTyped(json, false);
}

export function ThreadFromJSONTyped(json: any, ignoreDiscriminator: boolean): Thread {
    if (json == null) {
        return json;
    }
    return {
        
        'contactId': json['contactId'],
        'content': json['content'],
        'createdAt': json['createdAt'],
        'id': json['id'],
        'updatedAt': json['updatedAt'],
        'userId': json['userId'],
        'userType': ThreadUserTypeFromJSON(json['userType']),
    };
}

export function ThreadToJSON(json: any): Thread {
    return ThreadToJSONTyped(json, false);
}

export function ThreadToJSONTyped(value?: Thread | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contactId': value['contactId'],
        'content': value['content'],
        'createdAt': value['createdAt'],
        'id': value['id'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
        'userType': ThreadUserTypeToJSON(value['userType']),
    };
}

