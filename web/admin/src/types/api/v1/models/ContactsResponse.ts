/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Admin } from './Admin';
import {
    AdminFromJSON,
    AdminFromJSONTyped,
    AdminToJSON,
    AdminToJSONTyped,
} from './Admin';
import type { ContactCategory } from './ContactCategory';
import {
    ContactCategoryFromJSON,
    ContactCategoryFromJSONTyped,
    ContactCategoryToJSON,
    ContactCategoryToJSONTyped,
} from './ContactCategory';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
    ContactToJSONTyped,
} from './Contact';
import type { Thread } from './Thread';
import {
    ThreadFromJSON,
    ThreadFromJSONTyped,
    ThreadToJSON,
    ThreadToJSONTyped,
} from './Thread';

/**
 * 
 * @export
 * @interface ContactsResponse
 */
export interface ContactsResponse {
    /**
     * 管理者一覧
     * @type {Array<Admin>}
     * @memberof ContactsResponse
     */
    admins: Array<Admin>;
    /**
     * お問い合わせ種別一覧
     * @type {Array<ContactCategory>}
     * @memberof ContactsResponse
     */
    categories: Array<ContactCategory>;
    /**
     * お問い合わせ一覧
     * @type {Array<Contact>}
     * @memberof ContactsResponse
     */
    contacts: Array<Contact>;
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<Thread>}
     * @memberof ContactsResponse
     */
    threads: Array<Thread>;
    /**
     * お問い合わせ合計
     * @type {number}
     * @memberof ContactsResponse
     */
    total: number;
    /**
     * ユーザー一覧
     * @type {Array<User>}
     * @memberof ContactsResponse
     */
    users: Array<User>;
}

/**
 * Check if a given object implements the ContactsResponse interface.
 */
export function instanceOfContactsResponse(value: object): value is ContactsResponse {
    if (!('admins' in value) || value['admins'] === undefined) return false;
    if (!('categories' in value) || value['categories'] === undefined) return false;
    if (!('contacts' in value) || value['contacts'] === undefined) return false;
    if (!('threads' in value) || value['threads'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('users' in value) || value['users'] === undefined) return false;
    return true;
}

export function ContactsResponseFromJSON(json: any): ContactsResponse {
    return ContactsResponseFromJSONTyped(json, false);
}

export function ContactsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'admins': ((json['admins'] as Array<any>).map(AdminFromJSON)),
        'categories': ((json['categories'] as Array<any>).map(ContactCategoryFromJSON)),
        'contacts': ((json['contacts'] as Array<any>).map(ContactFromJSON)),
        'threads': ((json['threads'] as Array<any>).map(ThreadFromJSON)),
        'total': json['total'],
        'users': ((json['users'] as Array<any>).map(UserFromJSON)),
    };
}

export function ContactsResponseToJSON(json: any): ContactsResponse {
    return ContactsResponseToJSONTyped(json, false);
}

export function ContactsResponseToJSONTyped(value?: ContactsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'admins': ((value['admins'] as Array<any>).map(AdminToJSON)),
        'categories': ((value['categories'] as Array<any>).map(ContactCategoryToJSON)),
        'contacts': ((value['contacts'] as Array<any>).map(ContactToJSON)),
        'threads': ((value['threads'] as Array<any>).map(ThreadToJSON)),
        'total': value['total'],
        'users': ((value['users'] as Array<any>).map(UserToJSON)),
    };
}

