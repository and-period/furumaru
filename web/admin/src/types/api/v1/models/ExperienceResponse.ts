/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Experience } from './Experience';
import {
    ExperienceFromJSON,
    ExperienceFromJSONTyped,
    ExperienceToJSON,
    ExperienceToJSONTyped,
} from './Experience';
import type { ExperienceType } from './ExperienceType';
import {
    ExperienceTypeFromJSON,
    ExperienceTypeFromJSONTyped,
    ExperienceTypeToJSON,
    ExperienceTypeToJSONTyped,
} from './ExperienceType';
import type { Producer } from './Producer';
import {
    ProducerFromJSON,
    ProducerFromJSONTyped,
    ProducerToJSON,
    ProducerToJSONTyped,
} from './Producer';
import type { Coordinator } from './Coordinator';
import {
    CoordinatorFromJSON,
    CoordinatorFromJSONTyped,
    CoordinatorToJSON,
    CoordinatorToJSONTyped,
} from './Coordinator';

/**
 * 
 * @export
 * @interface ExperienceResponse
 */
export interface ExperienceResponse {
    /**
     * 
     * @type {Coordinator}
     * @memberof ExperienceResponse
     */
    coordinator: Coordinator;
    /**
     * 
     * @type {Experience}
     * @memberof ExperienceResponse
     */
    experience: Experience;
    /**
     * 
     * @type {ExperienceType}
     * @memberof ExperienceResponse
     */
    experienceType: ExperienceType;
    /**
     * 
     * @type {Producer}
     * @memberof ExperienceResponse
     */
    producer: Producer;
}

/**
 * Check if a given object implements the ExperienceResponse interface.
 */
export function instanceOfExperienceResponse(value: object): value is ExperienceResponse {
    if (!('coordinator' in value) || value['coordinator'] === undefined) return false;
    if (!('experience' in value) || value['experience'] === undefined) return false;
    if (!('experienceType' in value) || value['experienceType'] === undefined) return false;
    if (!('producer' in value) || value['producer'] === undefined) return false;
    return true;
}

export function ExperienceResponseFromJSON(json: any): ExperienceResponse {
    return ExperienceResponseFromJSONTyped(json, false);
}

export function ExperienceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperienceResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'coordinator': CoordinatorFromJSON(json['coordinator']),
        'experience': ExperienceFromJSON(json['experience']),
        'experienceType': ExperienceTypeFromJSON(json['experienceType']),
        'producer': ProducerFromJSON(json['producer']),
    };
}

export function ExperienceResponseToJSON(json: any): ExperienceResponse {
    return ExperienceResponseToJSONTyped(json, false);
}

export function ExperienceResponseToJSONTyped(value?: ExperienceResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'coordinator': CoordinatorToJSON(value['coordinator']),
        'experience': ExperienceToJSON(value['experience']),
        'experienceType': ExperienceTypeToJSON(value['experienceType']),
        'producer': ProducerToJSON(value['producer']),
    };
}

