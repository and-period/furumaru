/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Admin } from './Admin';
import {
    AdminFromJSON,
    AdminFromJSONTyped,
    AdminToJSON,
    AdminToJSONTyped,
} from './Admin';
import type { Thread } from './Thread';
import {
    ThreadFromJSON,
    ThreadFromJSONTyped,
    ThreadToJSON,
    ThreadToJSONTyped,
} from './Thread';

/**
 * 
 * @export
 * @interface ThreadsResponse
 */
export interface ThreadsResponse {
    /**
     * 送信者一覧
     * @type {Array<Admin>}
     * @memberof ThreadsResponse
     */
    admins: Array<Admin>;
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<Thread>}
     * @memberof ThreadsResponse
     */
    threads: Array<Thread>;
    /**
     * 会話履歴合計
     * @type {number}
     * @memberof ThreadsResponse
     */
    total: number;
    /**
     * 送信者一覧
     * @type {Array<User>}
     * @memberof ThreadsResponse
     */
    users: Array<User>;
}

/**
 * Check if a given object implements the ThreadsResponse interface.
 */
export function instanceOfThreadsResponse(value: object): value is ThreadsResponse {
    if (!('admins' in value) || value['admins'] === undefined) return false;
    if (!('threads' in value) || value['threads'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('users' in value) || value['users'] === undefined) return false;
    return true;
}

export function ThreadsResponseFromJSON(json: any): ThreadsResponse {
    return ThreadsResponseFromJSONTyped(json, false);
}

export function ThreadsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThreadsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'admins': ((json['admins'] as Array<any>).map(AdminFromJSON)),
        'threads': ((json['threads'] as Array<any>).map(ThreadFromJSON)),
        'total': json['total'],
        'users': ((json['users'] as Array<any>).map(UserFromJSON)),
    };
}

export function ThreadsResponseToJSON(json: any): ThreadsResponse {
    return ThreadsResponseToJSONTyped(json, false);
}

export function ThreadsResponseToJSONTyped(value?: ThreadsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'admins': ((value['admins'] as Array<any>).map(AdminToJSON)),
        'threads': ((value['threads'] as Array<any>).map(ThreadToJSON)),
        'total': value['total'],
        'users': ((value['users'] as Array<any>).map(UserToJSON)),
    };
}

