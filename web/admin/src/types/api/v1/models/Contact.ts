/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContactStatus } from './ContactStatus';
import {
    ContactStatusFromJSON,
    ContactStatusFromJSONTyped,
    ContactStatusToJSON,
    ContactStatusToJSONTyped,
} from './ContactStatus';

/**
 * お問い合わせ情報
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof Contact
     */
    categoryId: string;
    /**
     * 内容
     * @type {string}
     * @memberof Contact
     */
    content: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof Contact
     */
    createdAt: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Contact
     */
    email: string;
    /**
     * お問い合わせID
     * @type {string}
     * @memberof Contact
     */
    id: string;
    /**
     * 対応者メモ
     * @type {string}
     * @memberof Contact
     */
    note: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof Contact
     */
    phoneNumber: string;
    /**
     * 対応者ID
     * @type {string}
     * @memberof Contact
     */
    responderId: string;
    /**
     * 
     * @type {ContactStatus}
     * @memberof Contact
     */
    status: ContactStatus;
    /**
     * 件名
     * @type {string}
     * @memberof Contact
     */
    title: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof Contact
     */
    updatedAt: number;
    /**
     * ユーザーID
     * @type {string}
     * @memberof Contact
     */
    userId: string;
    /**
     * 氏名
     * @type {string}
     * @memberof Contact
     */
    username: string;
}



/**
 * Check if a given object implements the Contact interface.
 */
export function instanceOfContact(value: object): value is Contact {
    if (!('categoryId' in value) || value['categoryId'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('note' in value) || value['note'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('responderId' in value) || value['responderId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    return true;
}

export function ContactFromJSON(json: any): Contact {
    return ContactFromJSONTyped(json, false);
}

export function ContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contact {
    if (json == null) {
        return json;
    }
    return {
        
        'categoryId': json['categoryId'],
        'content': json['content'],
        'createdAt': json['createdAt'],
        'email': json['email'],
        'id': json['id'],
        'note': json['note'],
        'phoneNumber': json['phoneNumber'],
        'responderId': json['responderId'],
        'status': ContactStatusFromJSON(json['status']),
        'title': json['title'],
        'updatedAt': json['updatedAt'],
        'userId': json['userId'],
        'username': json['username'],
    };
}

export function ContactToJSON(json: any): Contact {
    return ContactToJSONTyped(json, false);
}

export function ContactToJSONTyped(value?: Contact | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'categoryId': value['categoryId'],
        'content': value['content'],
        'createdAt': value['createdAt'],
        'email': value['email'],
        'id': value['id'],
        'note': value['note'],
        'phoneNumber': value['phoneNumber'],
        'responderId': value['responderId'],
        'status': ContactStatusToJSON(value['status']),
        'title': value['title'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
        'username': value['username'],
    };
}

