/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Admin } from './Admin';
import {
    AdminFromJSON,
    AdminFromJSONTyped,
    AdminToJSON,
    AdminToJSONTyped,
} from './Admin';
import type { ContactCategory } from './ContactCategory';
import {
    ContactCategoryFromJSON,
    ContactCategoryFromJSONTyped,
    ContactCategoryToJSON,
    ContactCategoryToJSONTyped,
} from './ContactCategory';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
    ContactToJSONTyped,
} from './Contact';
import type { Thread } from './Thread';
import {
    ThreadFromJSON,
    ThreadFromJSONTyped,
    ThreadToJSON,
    ThreadToJSONTyped,
} from './Thread';

/**
 * 
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
    /**
     * 
     * @type {ContactCategory}
     * @memberof ContactResponse
     */
    category: ContactCategory;
    /**
     * 
     * @type {Contact}
     * @memberof ContactResponse
     */
    contact: Contact;
    /**
     * 
     * @type {Admin}
     * @memberof ContactResponse
     */
    responder: Admin;
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<Thread>}
     * @memberof ContactResponse
     */
    threads: Array<Thread>;
    /**
     * 
     * @type {User}
     * @memberof ContactResponse
     */
    user: User;
}

/**
 * Check if a given object implements the ContactResponse interface.
 */
export function instanceOfContactResponse(value: object): value is ContactResponse {
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('contact' in value) || value['contact'] === undefined) return false;
    if (!('responder' in value) || value['responder'] === undefined) return false;
    if (!('threads' in value) || value['threads'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function ContactResponseFromJSON(json: any): ContactResponse {
    return ContactResponseFromJSONTyped(json, false);
}

export function ContactResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'category': ContactCategoryFromJSON(json['category']),
        'contact': ContactFromJSON(json['contact']),
        'responder': AdminFromJSON(json['responder']),
        'threads': ((json['threads'] as Array<any>).map(ThreadFromJSON)),
        'user': UserFromJSON(json['user']),
    };
}

export function ContactResponseToJSON(json: any): ContactResponse {
    return ContactResponseToJSONTyped(json, false);
}

export function ContactResponseToJSONTyped(value?: ContactResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'category': ContactCategoryToJSON(value['category']),
        'contact': ContactToJSON(value['contact']),
        'responder': AdminToJSON(value['responder']),
        'threads': ((value['threads'] as Array<any>).map(ThreadToJSON)),
        'user': UserToJSON(value['user']),
    };
}

