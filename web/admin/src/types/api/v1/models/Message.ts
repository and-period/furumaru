/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageType } from './MessageType';
import {
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
    MessageTypeToJSONTyped,
} from './MessageType';

/**
 * メッセージ情報
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * メッセージ内容
     * @type {string}
     * @memberof Message
     */
    body: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof Message
     */
    createdAt: number;
    /**
     * メッセージID
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * 遷移先リンク
     * @type {string}
     * @memberof Message
     */
    link: string;
    /**
     * 既読フラグ
     * @type {boolean}
     * @memberof Message
     */
    read: boolean;
    /**
     * 受信日時
     * @type {number}
     * @memberof Message
     */
    receivedAt: number;
    /**
     * メッセージ件名
     * @type {string}
     * @memberof Message
     */
    title: string;
    /**
     * 
     * @type {MessageType}
     * @memberof Message
     */
    type: MessageType;
    /**
     * 更新日時
     * @type {number}
     * @memberof Message
     */
    updatedAt: number;
}



/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!('body' in value) || value['body'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('link' in value) || value['link'] === undefined) return false;
    if (!('read' in value) || value['read'] === undefined) return false;
    if (!('receivedAt' in value) || value['receivedAt'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'body': json['body'],
        'createdAt': json['createdAt'],
        'id': json['id'],
        'link': json['link'],
        'read': json['read'],
        'receivedAt': json['receivedAt'],
        'title': json['title'],
        'type': MessageTypeFromJSON(json['type']),
        'updatedAt': json['updatedAt'],
    };
}

export function MessageToJSON(json: any): Message {
    return MessageToJSONTyped(json, false);
}

export function MessageToJSONTyped(value?: Message | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'body': value['body'],
        'createdAt': value['createdAt'],
        'id': value['id'],
        'link': value['link'],
        'read': value['read'],
        'receivedAt': value['receivedAt'],
        'title': value['title'],
        'type': MessageTypeToJSON(value['type']),
        'updatedAt': value['updatedAt'],
    };
}

