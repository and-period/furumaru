/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface RequestActivateBroadcastMP4Request
 */
export interface RequestActivateBroadcastMP4Request {
    /**
     * 配信動画URL
     * @type {string}
     * @memberof RequestActivateBroadcastMP4Request
     */
    'inputUrl'?: string;
}
/**
 * 
 * @export
 * @interface RequestApproveScheduleRequest
 */
export interface RequestApproveScheduleRequest {
    /**
     * 承認フラグ
     * @type {boolean}
     * @memberof RequestApproveScheduleRequest
     */
    'approved'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestApproveSpotRequest
 */
export interface RequestApproveSpotRequest {
    /**
     * 承認フラグ
     * @type {boolean}
     * @memberof RequestApproveSpotRequest
     */
    'approved'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestAuthYoutubeBroadcastRequest
 */
export interface RequestAuthYoutubeBroadcastRequest {
    /**
     * 連携先Youtubeアカウント
     * @type {string}
     * @memberof RequestAuthYoutubeBroadcastRequest
     */
    'youtubeHandle'?: string;
}
/**
 * 
 * @export
 * @interface RequestCallbackAuthYoutubeBroadcastRequest
 */
export interface RequestCallbackAuthYoutubeBroadcastRequest {
    /**
     * Google認証時に取得したcode
     * @type {string}
     * @memberof RequestCallbackAuthYoutubeBroadcastRequest
     */
    'authCode'?: string;
    /**
     * Google認証時に取得したstate
     * @type {string}
     * @memberof RequestCallbackAuthYoutubeBroadcastRequest
     */
    'state'?: string;
}
/**
 * 
 * @export
 * @interface RequestCompleteOrderRequest
 */
export interface RequestCompleteOrderRequest {
    /**
     * 発送連絡時のメッセージ
     * @type {string}
     * @memberof RequestCompleteOrderRequest
     */
    'shippingMessage'?: string;
}
/**
 * 
 * @export
 * @interface RequestConnectGoogleAccountRequest
 */
export interface RequestConnectGoogleAccountRequest {
    /**
     * 認証コード
     * @type {string}
     * @memberof RequestConnectGoogleAccountRequest
     */
    'code'?: string;
    /**
     * セキュア文字列（リプレイアタック対策）
     * @type {string}
     * @memberof RequestConnectGoogleAccountRequest
     */
    'nonce'?: string;
    /**
     * リダイレクトURI
     * @type {string}
     * @memberof RequestConnectGoogleAccountRequest
     */
    'redirectUri'?: string;
}
/**
 * 
 * @export
 * @interface RequestConnectLINEAccountRequest
 */
export interface RequestConnectLINEAccountRequest {
    /**
     * 認証コード
     * @type {string}
     * @memberof RequestConnectLINEAccountRequest
     */
    'code'?: string;
    /**
     * セキュア文字列（リプレイアタック対策）
     * @type {string}
     * @memberof RequestConnectLINEAccountRequest
     */
    'nonce'?: string;
    /**
     * リダイレクトURI
     * @type {string}
     * @memberof RequestConnectLINEAccountRequest
     */
    'redirectUri'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateAdministratorRequest
 */
export interface RequestCreateAdministratorRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestCreateAdministratorRequest
     */
    'email'?: string;
    /**
     * 名
     * @type {string}
     * @memberof RequestCreateAdministratorRequest
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof RequestCreateAdministratorRequest
     */
    'firstnameKana'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof RequestCreateAdministratorRequest
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof RequestCreateAdministratorRequest
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestCreateAdministratorRequest
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateCategoryRequest
 */
export interface RequestCreateCategoryRequest {
    /**
     * 商品種別名
     * @type {string}
     * @memberof RequestCreateCategoryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateContactReadRequest
 */
export interface RequestCreateContactReadRequest {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof RequestCreateContactReadRequest
     */
    'contactId'?: string;
    /**
     * 送信者ID
     * @type {string}
     * @memberof RequestCreateContactReadRequest
     */
    'userId'?: string;
    /**
     * 送信者種別(不明:0, admin:1, uer:2, guest:3)
     * @type {number}
     * @memberof RequestCreateContactReadRequest
     */
    'userType'?: number;
}
/**
 * 
 * @export
 * @interface RequestCreateContactRequest
 */
export interface RequestCreateContactRequest {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'categoryId'?: string;
    /**
     * お問い合わせ内容
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'content'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'email'?: string;
    /**
     * 対応者メモ
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'note'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'phoneNumber'?: string;
    /**
     * 対応者ID(null許容)
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'responderId'?: string;
    /**
     * お問い合わせ件名
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'title'?: string;
    /**
     * 問い合わせ作成者ID(null許容)
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'userId'?: string;
    /**
     * 氏名
     * @type {string}
     * @memberof RequestCreateContactRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateExperienceMedia
 */
export interface RequestCreateExperienceMedia {
    /**
     * サムネイルとして使用
     * @type {boolean}
     * @memberof RequestCreateExperienceMedia
     */
    'isThumbnail'?: boolean;
    /**
     * メディアURL
     * @type {string}
     * @memberof RequestCreateExperienceMedia
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateExperienceRequest
 */
export interface RequestCreateExperienceRequest {
    /**
     * 営業終了時間
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'businessCloseTime'?: string;
    /**
     * 営業開始時間
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'businessOpenTime'?: string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'coordinatorId'?: string;
    /**
     * 説明
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'description'?: string;
    /**
     * アクセス方法
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'direction'?: string;
    /**
     * 体験時間(分)
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'duration'?: number;
    /**
     * 募集終了日時
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'endAt'?: number;
    /**
     * 体験種別ID
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'experienceTypeId'?: string;
    /**
     * 開催場所(住所1)
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'hostAddressLine1'?: string;
    /**
     * 開催場所(住所2)
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'hostAddressLine2'?: string;
    /**
     * 開催場所(市区町村)
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'hostCity'?: string;
    /**
     * 開催場所(郵便番号)
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'hostPostalCode'?: string;
    /**
     * 開催場所(都道府県コード)
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'hostPrefectureCode'?: number;
    /**
     * メディア一覧
     * @type {Array<RequestCreateExperienceMedia>}
     * @memberof RequestCreateExperienceRequest
     */
    'media'?: Array<RequestCreateExperienceMedia>;
    /**
     * 大人料金
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'priceAdult'?: number;
    /**
     * 小学生料金
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'priceElementarySchool'?: number;
    /**
     * 中学生料金
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'priceJuniorHighSchool'?: number;
    /**
     * 幼児料金
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'pricePreschool'?: number;
    /**
     * シニア料金
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'priceSenior'?: number;
    /**
     * 生産者ID
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'producerId'?: string;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'promotionVideoUrl'?: string;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof RequestCreateExperienceRequest
     */
    'public'?: boolean;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'recommendedPoint1'?: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'recommendedPoint2'?: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'recommendedPoint3'?: string;
    /**
     * 定員オーバーフラグ
     * @type {boolean}
     * @memberof RequestCreateExperienceRequest
     */
    'soldOut'?: boolean;
    /**
     * 募集開始日時
     * @type {number}
     * @memberof RequestCreateExperienceRequest
     */
    'startAt'?: number;
    /**
     * 体験名
     * @type {string}
     * @memberof RequestCreateExperienceRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateExperienceTypeRequest
 */
export interface RequestCreateExperienceTypeRequest {
    /**
     * 体験種別名
     * @type {string}
     * @memberof RequestCreateExperienceTypeRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateLiveRequest
 */
export interface RequestCreateLiveRequest {
    /**
     * コメント
     * @type {string}
     * @memberof RequestCreateLiveRequest
     */
    'comment'?: string;
    /**
     * 配信終了日時
     * @type {number}
     * @memberof RequestCreateLiveRequest
     */
    'endAt'?: number;
    /**
     * 生産者ID
     * @type {string}
     * @memberof RequestCreateLiveRequest
     */
    'producerId'?: string;
    /**
     * 商品ID一覧
     * @type {Array<string>}
     * @memberof RequestCreateLiveRequest
     */
    'productIds'?: Array<string>;
    /**
     * 配信開始日時
     * @type {number}
     * @memberof RequestCreateLiveRequest
     */
    'startAt'?: number;
}
/**
 * 
 * @export
 * @interface RequestCreateNotificationRequest
 */
export interface RequestCreateNotificationRequest {
    /**
     * 本文
     * @type {string}
     * @memberof RequestCreateNotificationRequest
     */
    'body'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof RequestCreateNotificationRequest
     */
    'note'?: string;
    /**
     * プロモーションID
     * @type {string}
     * @memberof RequestCreateNotificationRequest
     */
    'promotionId'?: string;
    /**
     * 掲載開始日
     * @type {number}
     * @memberof RequestCreateNotificationRequest
     */
    'publishedAt'?: number;
    /**
     * 掲載対象一覧
     * @type {Array<number>}
     * @memberof RequestCreateNotificationRequest
     */
    'targets'?: Array<number>;
    /**
     * タイトル
     * @type {string}
     * @memberof RequestCreateNotificationRequest
     */
    'title'?: string;
    /**
     * お知らせ種別
     * @type {number}
     * @memberof RequestCreateNotificationRequest
     */
    'type'?: number;
}
/**
 * 
 * @export
 * @interface RequestCreateProducerRequest
 */
export interface RequestCreateProducerRequest {
    /**
     * 町名・番地
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'addressLine2'?: string;
    /**
     * 購入特典映像URL
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'bonusVideoUrl'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'city'?: string;
    /**
     * 担当コーディネータ名
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'coordinatorId'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'email'?: string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'facebookId'?: string;
    /**
     * 名
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'firstnameKana'?: string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'headerUrl'?: string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'instagramId'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {number}
     * @memberof RequestCreateProducerRequest
     */
    'prefectureCode'?: number;
    /**
     * 紹介文
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'profile'?: string;
    /**
     * 紹介映像URL
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'promotionVideoUrl'?: string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'thumbnailUrl'?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof RequestCreateProducerRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateProductMedia
 */
export interface RequestCreateProductMedia {
    /**
     * サムネイルとして使用
     * @type {boolean}
     * @memberof RequestCreateProductMedia
     */
    'isThumbnail'?: boolean;
    /**
     * メディアURL
     * @type {string}
     * @memberof RequestCreateProductMedia
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateProductRequest
 */
export interface RequestCreateProductRequest {
    /**
     * 箱の占有率(サイズ:60)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'box60Rate'?: number;
    /**
     * 箱の占有率(サイズ:80)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'box80Rate'?: number;
    /**
     * 箱の占有率(サイズ:100)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'box100Rate'?: number;
    /**
     * コーディネータID
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'coordinatorId'?: string;
    /**
     * 原価(税込)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'cost'?: number;
    /**
     * 配送方法
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'deliveryType'?: number;
    /**
     * 商品説明
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'description'?: string;
    /**
     * 販売終了日時
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'endAt'?: number;
    /**
     * 賞味期限(単位:日)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'expirationDate'?: number;
    /**
     * 在庫数
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'inventory'?: number;
    /**
     * 数量単位説明
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'itemDescription'?: string;
    /**
     * 数量単位
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'itemUnit'?: string;
    /**
     * メディア一覧
     * @type {Array<RequestCreateProductMedia>}
     * @memberof RequestCreateProductRequest
     */
    'media'?: Array<RequestCreateProductMedia>;
    /**
     * 商品名
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'name'?: string;
    /**
     * 原産地(市区町村)
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'originCity'?: string;
    /**
     * 原産地(都道府県)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'originPrefectureCode'?: number;
    /**
     * 販売価格(税込)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'price'?: number;
    /**
     * 生産者ID
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'producerId'?: string;
    /**
     * 商品タグID一覧
     * @type {Array<string>}
     * @memberof RequestCreateProductRequest
     */
    'productTagIds'?: Array<string>;
    /**
     * 品目ID
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'productTypeId'?: string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof RequestCreateProductRequest
     */
    'public'?: boolean;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'recommendedPoint1'?: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'recommendedPoint2'?: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof RequestCreateProductRequest
     */
    'recommendedPoint3'?: string;
    /**
     * 販売開始日時
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'startAt'?: number;
    /**
     * 保存方法
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'storageMethodType'?: number;
    /**
     * 重量(kg,少数第一位まで)
     * @type {number}
     * @memberof RequestCreateProductRequest
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface RequestCreateProductTagRequest
 */
export interface RequestCreateProductTagRequest {
    /**
     * 商品タグ名
     * @type {string}
     * @memberof RequestCreateProductTagRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateProductTypeRequest
 */
export interface RequestCreateProductTypeRequest {
    /**
     * アイコンURL
     * @type {string}
     * @memberof RequestCreateProductTypeRequest
     */
    'iconUrl'?: string;
    /**
     * 品目名
     * @type {string}
     * @memberof RequestCreateProductTypeRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreatePromotionRequest
 */
export interface RequestCreatePromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestCreatePromotionRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestCreatePromotionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestCreatePromotionRequest
     */
    'discountRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestCreatePromotionRequest
     */
    'discountType'?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestCreatePromotionRequest
     */
    'endAt'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RequestCreatePromotionRequest
     */
    'public'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestCreatePromotionRequest
     */
    'startAt'?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestCreatePromotionRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateScheduleRequest
 */
export interface RequestCreateScheduleRequest {
    /**
     * コーディネータID
     * @type {string}
     * @memberof RequestCreateScheduleRequest
     */
    'coordinatorId'?: string;
    /**
     * 説明
     * @type {string}
     * @memberof RequestCreateScheduleRequest
     */
    'description'?: string;
    /**
     * 配信終了日時
     * @type {number}
     * @memberof RequestCreateScheduleRequest
     */
    'endAt'?: number;
    /**
     * 蓋絵URL
     * @type {string}
     * @memberof RequestCreateScheduleRequest
     */
    'imageUrl'?: string;
    /**
     * オープニング動画URL
     * @type {string}
     * @memberof RequestCreateScheduleRequest
     */
    'openingVideoUrl'?: string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof RequestCreateScheduleRequest
     */
    'public'?: boolean;
    /**
     * 配信開始日時
     * @type {number}
     * @memberof RequestCreateScheduleRequest
     */
    'startAt'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestCreateScheduleRequest
     */
    'thumbnailUrl'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof RequestCreateScheduleRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateShippingRate
 */
export interface RequestCreateShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof RequestCreateShippingRate
     */
    'name'?: string;
    /**
     * 対象都道府県一覧
     * @type {Array<number>}
     * @memberof RequestCreateShippingRate
     */
    'prefectureCodes'?: Array<number>;
    /**
     * 配送料金(税込)
     * @type {number}
     * @memberof RequestCreateShippingRate
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface RequestCreateShippingRequest
 */
export interface RequestCreateShippingRequest {
    /**
     * 箱サイズ60の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestCreateShippingRequest
     */
    'box60Frozen'?: number;
    /**
     * 箱サイズ60の通常便配送料一覧
     * @type {Array<RequestCreateShippingRate>}
     * @memberof RequestCreateShippingRequest
     */
    'box60Rates'?: Array<RequestCreateShippingRate>;
    /**
     * 箱サイズ80の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestCreateShippingRequest
     */
    'box80Frozen'?: number;
    /**
     * 箱サイズ80の通常便配送料一覧
     * @type {Array<RequestCreateShippingRate>}
     * @memberof RequestCreateShippingRequest
     */
    'box80Rates'?: Array<RequestCreateShippingRate>;
    /**
     * 箱サイズ100の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestCreateShippingRequest
     */
    'box100Frozen'?: number;
    /**
     * 箱サイズ100の通常便配送料一覧
     * @type {Array<RequestCreateShippingRate>}
     * @memberof RequestCreateShippingRequest
     */
    'box100Rates'?: Array<RequestCreateShippingRate>;
    /**
     * 送料無料になる金額(税込)
     * @type {number}
     * @memberof RequestCreateShippingRequest
     */
    'freeShippingRates'?: number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof RequestCreateShippingRequest
     */
    'hasFreeShipping'?: boolean;
    /**
     * 配送設定名
     * @type {string}
     * @memberof RequestCreateShippingRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateSpotRequest
 */
export interface RequestCreateSpotRequest {
    /**
     * 説明
     * @type {string}
     * @memberof RequestCreateSpotRequest
     */
    'description'?: string;
    /**
     * 緯度
     * @type {number}
     * @memberof RequestCreateSpotRequest
     */
    'latitude'?: number;
    /**
     * 経度
     * @type {number}
     * @memberof RequestCreateSpotRequest
     */
    'longitude'?: number;
    /**
     * スポット名
     * @type {string}
     * @memberof RequestCreateSpotRequest
     */
    'name'?: string;
    /**
     * スポット種別ID
     * @type {string}
     * @memberof RequestCreateSpotRequest
     */
    'spotTypeId'?: string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestCreateSpotRequest
     */
    'thumbnailUrl'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateSpotTypeRequest
 */
export interface RequestCreateSpotTypeRequest {
    /**
     * スポット種別名
     * @type {string}
     * @memberof RequestCreateSpotTypeRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateThreadRequest
 */
export interface RequestCreateThreadRequest {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof RequestCreateThreadRequest
     */
    'contactId'?: string;
    /**
     * 内容
     * @type {string}
     * @memberof RequestCreateThreadRequest
     */
    'content'?: string;
    /**
     * 送信者ID
     * @type {string}
     * @memberof RequestCreateThreadRequest
     */
    'userId'?: string;
    /**
     * 送信者種別(不明:0, admin:1, uer:2, guest:3)
     * @type {number}
     * @memberof RequestCreateThreadRequest
     */
    'userType'?: number;
}
/**
 * 
 * @export
 * @interface RequestCreateVideoRequest
 */
export interface RequestCreateVideoRequest {
    /**
     * コーディネータID
     * @type {string}
     * @memberof RequestCreateVideoRequest
     */
    'coordinatorId'?: string;
    /**
     * 説明
     * @type {string}
     * @memberof RequestCreateVideoRequest
     */
    'description'?: string;
    /**
     * 体験への表示設定
     * @type {boolean}
     * @memberof RequestCreateVideoRequest
     */
    'displayExperience'?: boolean;
    /**
     * 商品への表示設定
     * @type {boolean}
     * @memberof RequestCreateVideoRequest
     */
    'displayProduct'?: boolean;
    /**
     * 体験ID一覧
     * @type {Array<string>}
     * @memberof RequestCreateVideoRequest
     */
    'experienceIds'?: Array<string>;
    /**
     * 限定公開設定
     * @type {boolean}
     * @memberof RequestCreateVideoRequest
     */
    'limited'?: boolean;
    /**
     * 商品ID一覧
     * @type {Array<string>}
     * @memberof RequestCreateVideoRequest
     */
    'productIds'?: Array<string>;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof RequestCreateVideoRequest
     */
    'public'?: boolean;
    /**
     * 公開日時
     * @type {number}
     * @memberof RequestCreateVideoRequest
     */
    'publishedAt'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestCreateVideoRequest
     */
    'thumbnailUrl'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof RequestCreateVideoRequest
     */
    'title'?: string;
    /**
     * 動画URL
     * @type {string}
     * @memberof RequestCreateVideoRequest
     */
    'videoUrl'?: string;
}
/**
 * 
 * @export
 * @interface RequestCreateYoutubeBroadcastRequest
 */
export interface RequestCreateYoutubeBroadcastRequest {
    /**
     * ライブ配信説明
     * @type {string}
     * @memberof RequestCreateYoutubeBroadcastRequest
     */
    'description'?: string;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof RequestCreateYoutubeBroadcastRequest
     */
    'public'?: boolean;
    /**
     * ライブ配信タイトル
     * @type {string}
     * @memberof RequestCreateYoutubeBroadcastRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestDraftOrderRequest
 */
export interface RequestDraftOrderRequest {
    /**
     * 発送連絡時のメッセージ
     * @type {string}
     * @memberof RequestDraftOrderRequest
     */
    'shippingMessage'?: string;
}
/**
 * 
 * @export
 * @interface RequestExportOrdersRequest
 */
export interface RequestExportOrdersRequest {
    /**
     * 文字コード種別
     * @type {number}
     * @memberof RequestExportOrdersRequest
     */
    'characterEncodingType'?: number;
    /**
     * 配送会社
     * @type {number}
     * @memberof RequestExportOrdersRequest
     */
    'shippingCarrier'?: number;
}
/**
 * 
 * @export
 * @interface RequestForgotAuthPasswordRequest
 */
export interface RequestForgotAuthPasswordRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestForgotAuthPasswordRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface RequestGetUploadURLRequest
 */
export interface RequestGetUploadURLRequest {
    /**
     * ファイル種別
     * @type {string}
     * @memberof RequestGetUploadURLRequest
     */
    'fileType'?: string;
}
/**
 * 
 * @export
 * @interface RequestPublishScheduleRequest
 */
export interface RequestPublishScheduleRequest {
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof RequestPublishScheduleRequest
     */
    'public'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestRefreshAuthTokenRequest
 */
export interface RequestRefreshAuthTokenRequest {
    /**
     * 更新トークン
     * @type {string}
     * @memberof RequestRefreshAuthTokenRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface RequestRefundOrderRequest
 */
export interface RequestRefundOrderRequest {
    /**
     * 返金理由
     * @type {string}
     * @memberof RequestRefundOrderRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface RequestRegisterAuthDeviceRequest
 */
export interface RequestRegisterAuthDeviceRequest {
    /**
     * デバイスID
     * @type {string}
     * @memberof RequestRegisterAuthDeviceRequest
     */
    'device'?: string;
}
/**
 * 
 * @export
 * @interface RequestResetAuthPasswordRequest
 */
export interface RequestResetAuthPasswordRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestResetAuthPasswordRequest
     */
    'email'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof RequestResetAuthPasswordRequest
     */
    'password'?: string;
    /**
     * パスワード (確認用)
     * @type {string}
     * @memberof RequestResetAuthPasswordRequest
     */
    'passwordConfirmation'?: string;
    /**
     * 検証コード
     * @type {string}
     * @memberof RequestResetAuthPasswordRequest
     */
    'verifyCode'?: string;
}
/**
 * 
 * @export
 * @interface RequestSignInRequest
 */
export interface RequestSignInRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof RequestSignInRequest
     */
    'password'?: string;
    /**
     * ユーザー名 (メールアドレス)
     * @type {string}
     * @memberof RequestSignInRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateAdministratorEmailRequest
 */
export interface RequestUpdateAdministratorEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestUpdateAdministratorEmailRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateAdministratorRequest
 */
export interface RequestUpdateAdministratorRequest {
    /**
     * 名
     * @type {string}
     * @memberof RequestUpdateAdministratorRequest
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof RequestUpdateAdministratorRequest
     */
    'firstnameKana'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof RequestUpdateAdministratorRequest
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof RequestUpdateAdministratorRequest
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestUpdateAdministratorRequest
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateAuthEmailRequest
 */
export interface RequestUpdateAuthEmailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestUpdateAuthEmailRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateAuthPasswordRequest
 */
export interface RequestUpdateAuthPasswordRequest {
    /**
     * 新しいパスワード
     * @type {string}
     * @memberof RequestUpdateAuthPasswordRequest
     */
    'newPassword'?: string;
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof RequestUpdateAuthPasswordRequest
     */
    'oldPassword'?: string;
    /**
     * パスワード (確認用)
     * @type {string}
     * @memberof RequestUpdateAuthPasswordRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateBroadcastArchiveRequest
 */
export interface RequestUpdateBroadcastArchiveRequest {
    /**
     * アーカイブ動画URL
     * @type {string}
     * @memberof RequestUpdateBroadcastArchiveRequest
     */
    'archiveUrl'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateCategoryRequest
 */
export interface RequestUpdateCategoryRequest {
    /**
     * 商品種別名
     * @type {string}
     * @memberof RequestUpdateCategoryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateContactRequest
 */
export interface RequestUpdateContactRequest {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'categoryId'?: string;
    /**
     * お問い合わせ内容
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'content'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'email'?: string;
    /**
     * 対応者メモ
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'note'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'phoneNumber'?: string;
    /**
     * 対応者ID(null許容)
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'responderId'?: string;
    /**
     * お問い合わせステータス
     * @type {number}
     * @memberof RequestUpdateContactRequest
     */
    'status'?: number;
    /**
     * お問い合わせ件名
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'title'?: string;
    /**
     * 問い合わせ作成者ID(null許容)
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'userId'?: string;
    /**
     * 氏名
     * @type {string}
     * @memberof RequestUpdateContactRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateCoordinatorRequest
 */
export interface RequestUpdateCoordinatorRequest {
    /**
     * 町名・番地
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'addressLine2'?: string;
    /**
     * 購入特典映像URL
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'bonusVideoUrl'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'city'?: string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'facebookId'?: string;
    /**
     * 名
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'firstnameKana'?: string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'headerUrl'?: string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'instagramId'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {number}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'prefectureCode'?: number;
    /**
     * 紹介文
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'profile'?: string;
    /**
     * 紹介映像URL
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'promotionVideoUrl'?: string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'thumbnailUrl'?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof RequestUpdateCoordinatorRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateDefaultShippingRate
 */
export interface RequestUpdateDefaultShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof RequestUpdateDefaultShippingRate
     */
    'name'?: string;
    /**
     * 対象都道府県一覧
     * @type {Array<number>}
     * @memberof RequestUpdateDefaultShippingRate
     */
    'prefectureCodes'?: Array<number>;
    /**
     * 配送料金(税込)
     * @type {number}
     * @memberof RequestUpdateDefaultShippingRate
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface RequestUpdateDefaultShippingRequest
 */
export interface RequestUpdateDefaultShippingRequest {
    /**
     * 箱サイズ60の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'box60Frozen'?: number;
    /**
     * 箱サイズ60の通常便配送料一覧
     * @type {Array<RequestUpdateDefaultShippingRate>}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'box60Rates'?: Array<RequestUpdateDefaultShippingRate>;
    /**
     * 箱サイズ80の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'box80Frozen'?: number;
    /**
     * 箱サイズ80の通常便配送料一覧
     * @type {Array<RequestUpdateDefaultShippingRate>}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'box80Rates'?: Array<RequestUpdateDefaultShippingRate>;
    /**
     * 箱サイズ100の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'box100Frozen'?: number;
    /**
     * 箱サイズ100の通常便配送料一覧
     * @type {Array<RequestUpdateDefaultShippingRate>}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'box100Rates'?: Array<RequestUpdateDefaultShippingRate>;
    /**
     * 送料無料になる金額(税込)
     * @type {number}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'freeShippingRates'?: number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof RequestUpdateDefaultShippingRequest
     */
    'hasFreeShipping'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestUpdateExperienceMedia
 */
export interface RequestUpdateExperienceMedia {
    /**
     * サムネイルとして使用
     * @type {boolean}
     * @memberof RequestUpdateExperienceMedia
     */
    'isThumbnail'?: boolean;
    /**
     * メディアURL
     * @type {string}
     * @memberof RequestUpdateExperienceMedia
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateExperienceRequest
 */
export interface RequestUpdateExperienceRequest {
    /**
     * 営業終了時間
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'businessCloseTime'?: string;
    /**
     * 営業開始時間
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'businessOpenTime'?: string;
    /**
     * 説明
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'description'?: string;
    /**
     * アクセス方法
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'direction'?: string;
    /**
     * 体験時間(分)
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'duration'?: number;
    /**
     * 募集終了日時
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'endAt'?: number;
    /**
     * 体験種別ID
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'experienceTypeId'?: string;
    /**
     * 開催場所(住所1)
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'hostAddressLine1'?: string;
    /**
     * 開催場所(住所2)
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'hostAddressLine2'?: string;
    /**
     * 開催場所(市区町村)
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'hostCity'?: string;
    /**
     * 開催場所(郵便番号)
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'hostPostalCode'?: string;
    /**
     * 開催場所(都道府県コード)
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'hostPrefectureCode'?: number;
    /**
     * メディア一覧
     * @type {Array<RequestUpdateExperienceMedia>}
     * @memberof RequestUpdateExperienceRequest
     */
    'media'?: Array<RequestUpdateExperienceMedia>;
    /**
     * 大人料金
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'priceAdult'?: number;
    /**
     * 小学生料金
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'priceElementarySchool'?: number;
    /**
     * 中学生料金
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'priceJuniorHighSchool'?: number;
    /**
     * 幼児料金
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'pricePreschool'?: number;
    /**
     * シニア料金
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'priceSenior'?: number;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'promotionVideoUrl'?: string;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof RequestUpdateExperienceRequest
     */
    'public'?: boolean;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'recommendedPoint1'?: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'recommendedPoint2'?: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'recommendedPoint3'?: string;
    /**
     * 定員オーバーフラグ
     * @type {boolean}
     * @memberof RequestUpdateExperienceRequest
     */
    'soldOut'?: boolean;
    /**
     * 募集開始日時
     * @type {number}
     * @memberof RequestUpdateExperienceRequest
     */
    'startAt'?: number;
    /**
     * 体験名
     * @type {string}
     * @memberof RequestUpdateExperienceRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateExperienceTypeRequest
 */
export interface RequestUpdateExperienceTypeRequest {
    /**
     * 体験種別名
     * @type {string}
     * @memberof RequestUpdateExperienceTypeRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateLiveCommentRequest
 */
export interface RequestUpdateLiveCommentRequest {
    /**
     * コメント無効フラグ
     * @type {boolean}
     * @memberof RequestUpdateLiveCommentRequest
     */
    'disabled'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestUpdateLiveRequest
 */
export interface RequestUpdateLiveRequest {
    /**
     * コメント
     * @type {string}
     * @memberof RequestUpdateLiveRequest
     */
    'comment'?: string;
    /**
     * 配信終了日時
     * @type {number}
     * @memberof RequestUpdateLiveRequest
     */
    'endAt'?: number;
    /**
     * 商品ID一覧
     * @type {Array<string>}
     * @memberof RequestUpdateLiveRequest
     */
    'productIds'?: Array<string>;
    /**
     * 配信開始日時
     * @type {number}
     * @memberof RequestUpdateLiveRequest
     */
    'startAt'?: number;
}
/**
 * 
 * @export
 * @interface RequestUpdateNotificationRequest
 */
export interface RequestUpdateNotificationRequest {
    /**
     * 本文
     * @type {string}
     * @memberof RequestUpdateNotificationRequest
     */
    'body'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof RequestUpdateNotificationRequest
     */
    'note'?: string;
    /**
     * 掲載開始日
     * @type {number}
     * @memberof RequestUpdateNotificationRequest
     */
    'publishedAt'?: number;
    /**
     * 掲載対象一覧
     * @type {Array<number>}
     * @memberof RequestUpdateNotificationRequest
     */
    'targets'?: Array<number>;
    /**
     * タイトル
     * @type {string}
     * @memberof RequestUpdateNotificationRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdatePaymentSystemRequest
 */
export interface RequestUpdatePaymentSystemRequest {
    /**
     * 決済システム状態
     * @type {number}
     * @memberof RequestUpdatePaymentSystemRequest
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface RequestUpdateProducerRequest
 */
export interface RequestUpdateProducerRequest {
    /**
     * 町名・番地
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'addressLine2'?: string;
    /**
     * 購入特典映像URL
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'bonusVideoUrl'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'city'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'email'?: string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'facebookId'?: string;
    /**
     * 名
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'firstnameKana'?: string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'headerUrl'?: string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'instagramId'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {number}
     * @memberof RequestUpdateProducerRequest
     */
    'prefectureCode'?: number;
    /**
     * 紹介文
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'profile'?: string;
    /**
     * 紹介映像URL
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'promotionVideoUrl'?: string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'thumbnailUrl'?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof RequestUpdateProducerRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateProductTagRequest
 */
export interface RequestUpdateProductTagRequest {
    /**
     * 商品タグ名
     * @type {string}
     * @memberof RequestUpdateProductTagRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateProductTypeRequest
 */
export interface RequestUpdateProductTypeRequest {
    /**
     * アイコンURL
     * @type {string}
     * @memberof RequestUpdateProductTypeRequest
     */
    'iconUrl'?: string;
    /**
     * 品目名
     * @type {string}
     * @memberof RequestUpdateProductTypeRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdatePromotionRequest
 */
export interface RequestUpdatePromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestUpdatePromotionRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestUpdatePromotionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestUpdatePromotionRequest
     */
    'discountRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestUpdatePromotionRequest
     */
    'discountType'?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestUpdatePromotionRequest
     */
    'endAt'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RequestUpdatePromotionRequest
     */
    'public'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestUpdatePromotionRequest
     */
    'startAt'?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestUpdatePromotionRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateScheduleRequest
 */
export interface RequestUpdateScheduleRequest {
    /**
     * 説明
     * @type {string}
     * @memberof RequestUpdateScheduleRequest
     */
    'description'?: string;
    /**
     * 配信終了日時
     * @type {number}
     * @memberof RequestUpdateScheduleRequest
     */
    'endAt'?: number;
    /**
     * 蓋絵URL
     * @type {string}
     * @memberof RequestUpdateScheduleRequest
     */
    'imageUrl'?: string;
    /**
     * オープニング動画URL
     * @type {string}
     * @memberof RequestUpdateScheduleRequest
     */
    'openingVideoUrl'?: string;
    /**
     * 配信開始日時
     * @type {number}
     * @memberof RequestUpdateScheduleRequest
     */
    'startAt'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestUpdateScheduleRequest
     */
    'thumbnailUrl'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof RequestUpdateScheduleRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateShippingRate
 */
export interface RequestUpdateShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof RequestUpdateShippingRate
     */
    'name'?: string;
    /**
     * 対象都道府県一覧
     * @type {Array<number>}
     * @memberof RequestUpdateShippingRate
     */
    'prefectureCodes'?: Array<number>;
    /**
     * 配送料金(税込)
     * @type {number}
     * @memberof RequestUpdateShippingRate
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface RequestUpdateShippingRequest
 */
export interface RequestUpdateShippingRequest {
    /**
     * 箱サイズ60の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpdateShippingRequest
     */
    'box60Frozen'?: number;
    /**
     * 箱サイズ60の通常便配送料一覧
     * @type {Array<RequestUpdateShippingRate>}
     * @memberof RequestUpdateShippingRequest
     */
    'box60Rates'?: Array<RequestUpdateShippingRate>;
    /**
     * 箱サイズ80の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpdateShippingRequest
     */
    'box80Frozen'?: number;
    /**
     * 箱サイズ80の通常便配送料一覧
     * @type {Array<RequestUpdateShippingRate>}
     * @memberof RequestUpdateShippingRequest
     */
    'box80Rates'?: Array<RequestUpdateShippingRate>;
    /**
     * 箱サイズ100の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpdateShippingRequest
     */
    'box100Frozen'?: number;
    /**
     * 箱サイズ100の通常便配送料一覧
     * @type {Array<RequestUpdateShippingRate>}
     * @memberof RequestUpdateShippingRequest
     */
    'box100Rates'?: Array<RequestUpdateShippingRate>;
    /**
     * 送料無料になる金額(税込)
     * @type {number}
     * @memberof RequestUpdateShippingRequest
     */
    'freeShippingRates'?: number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof RequestUpdateShippingRequest
     */
    'hasFreeShipping'?: boolean;
    /**
     * 配送設定名
     * @type {string}
     * @memberof RequestUpdateShippingRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateShopRequest
 */
export interface RequestUpdateShopRequest {
    /**
     * 営業曜日(発送可能日)
     * @type {Array<number>}
     * @memberof RequestUpdateShopRequest
     */
    'businessDays'?: Array<number>;
    /**
     * 店舗名
     * @type {string}
     * @memberof RequestUpdateShopRequest
     */
    'name'?: string;
    /**
     * 取り扱い品目一覧
     * @type {Array<string>}
     * @memberof RequestUpdateShopRequest
     */
    'productTypeIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RequestUpdateSpotRequest
 */
export interface RequestUpdateSpotRequest {
    /**
     * 説明
     * @type {string}
     * @memberof RequestUpdateSpotRequest
     */
    'description'?: string;
    /**
     * 緯度
     * @type {number}
     * @memberof RequestUpdateSpotRequest
     */
    'latitude'?: number;
    /**
     * 経度
     * @type {number}
     * @memberof RequestUpdateSpotRequest
     */
    'longitude'?: number;
    /**
     * スポット名
     * @type {string}
     * @memberof RequestUpdateSpotRequest
     */
    'name'?: string;
    /**
     * スポット種別ID
     * @type {string}
     * @memberof RequestUpdateSpotRequest
     */
    'spotTypeId'?: string;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestUpdateSpotRequest
     */
    'thumbnailUrl'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateSpotTypeRequest
 */
export interface RequestUpdateSpotTypeRequest {
    /**
     * スポット種別名
     * @type {string}
     * @memberof RequestUpdateSpotTypeRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpdateThreadRequest
 */
export interface RequestUpdateThreadRequest {
    /**
     * 内容
     * @type {string}
     * @memberof RequestUpdateThreadRequest
     */
    'content'?: string;
    /**
     * お問い合わせID
     * @type {string}
     * @memberof RequestUpdateThreadRequest
     */
    'threadId'?: string;
    /**
     * 送信者ID
     * @type {string}
     * @memberof RequestUpdateThreadRequest
     */
    'userId'?: string;
    /**
     * 送信者種別(不明:0, admin:1, uer:2, guest:3)
     * @type {number}
     * @memberof RequestUpdateThreadRequest
     */
    'userType'?: number;
}
/**
 * 
 * @export
 * @interface RequestUpdateVideoCommentRequest
 */
export interface RequestUpdateVideoCommentRequest {
    /**
     * コメント無効フラグ
     * @type {boolean}
     * @memberof RequestUpdateVideoCommentRequest
     */
    'disabled'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestUpdateVideoRequest
 */
export interface RequestUpdateVideoRequest {
    /**
     * カテゴリID一覧
     * @type {Array<string>}
     * @memberof RequestUpdateVideoRequest
     */
    'categoryIds'?: Array<string>;
    /**
     * 説明
     * @type {string}
     * @memberof RequestUpdateVideoRequest
     */
    'description'?: string;
    /**
     * 体験への表示設定
     * @type {boolean}
     * @memberof RequestUpdateVideoRequest
     */
    'displayExperience'?: boolean;
    /**
     * 商品への表示設定
     * @type {boolean}
     * @memberof RequestUpdateVideoRequest
     */
    'displayProduct'?: boolean;
    /**
     * 体験ID一覧
     * @type {Array<string>}
     * @memberof RequestUpdateVideoRequest
     */
    'experienceIds'?: Array<string>;
    /**
     * 限定公開設定
     * @type {boolean}
     * @memberof RequestUpdateVideoRequest
     */
    'limited'?: boolean;
    /**
     * 商品ID一覧
     * @type {Array<string>}
     * @memberof RequestUpdateVideoRequest
     */
    'productIds'?: Array<string>;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof RequestUpdateVideoRequest
     */
    'public'?: boolean;
    /**
     * 公開日時
     * @type {number}
     * @memberof RequestUpdateVideoRequest
     */
    'publishedAt'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof RequestUpdateVideoRequest
     */
    'thumbnailUrl'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof RequestUpdateVideoRequest
     */
    'title'?: string;
    /**
     * 動画URL
     * @type {string}
     * @memberof RequestUpdateVideoRequest
     */
    'videoUrl'?: string;
}
/**
 * 
 * @export
 * @interface RequestUpsertShippingRate
 */
export interface RequestUpsertShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof RequestUpsertShippingRate
     */
    'name'?: string;
    /**
     * 対象都道府県一覧
     * @type {Array<number>}
     * @memberof RequestUpsertShippingRate
     */
    'prefectureCodes'?: Array<number>;
    /**
     * 配送料金(税込)
     * @type {number}
     * @memberof RequestUpsertShippingRate
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface RequestUpsertShippingRequest
 */
export interface RequestUpsertShippingRequest {
    /**
     * 箱サイズ60の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpsertShippingRequest
     */
    'box60Frozen'?: number;
    /**
     * 箱サイズ60の通常便配送料一覧
     * @type {Array<RequestUpsertShippingRate>}
     * @memberof RequestUpsertShippingRequest
     */
    'box60Rates'?: Array<RequestUpsertShippingRate>;
    /**
     * 箱サイズ80の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpsertShippingRequest
     */
    'box80Frozen'?: number;
    /**
     * 箱サイズ80の通常便配送料一覧
     * @type {Array<RequestUpsertShippingRate>}
     * @memberof RequestUpsertShippingRequest
     */
    'box80Rates'?: Array<RequestUpsertShippingRate>;
    /**
     * 箱サイズ100の冷凍便追加配送料(税込)
     * @type {number}
     * @memberof RequestUpsertShippingRequest
     */
    'box100Frozen'?: number;
    /**
     * 箱サイズ100の通常便配送料一覧
     * @type {Array<RequestUpsertShippingRate>}
     * @memberof RequestUpsertShippingRequest
     */
    'box100Rates'?: Array<RequestUpsertShippingRate>;
    /**
     * 送料無料になる金額(税込)
     * @type {number}
     * @memberof RequestUpsertShippingRequest
     */
    'freeShippingRates'?: number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof RequestUpsertShippingRequest
     */
    'hasFreeShipping'?: boolean;
}
/**
 * 
 * @export
 * @interface RequestVerifyAuthEmailRequest
 */
export interface RequestVerifyAuthEmailRequest {
    /**
     * 検証コード
     * @type {string}
     * @memberof RequestVerifyAuthEmailRequest
     */
    'verifyCode'?: string;
}
/**
 * デフォルト設定の住所情報
 * @export
 * @interface ResponseAddress
 */
export interface ResponseAddress {
    /**
     * 住所ID
     * @type {string}
     * @memberof ResponseAddress
     */
    'addressId'?: string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof ResponseAddress
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof ResponseAddress
     */
    'addressLine2'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof ResponseAddress
     */
    'city'?: string;
    /**
     * 氏名（名）
     * @type {string}
     * @memberof ResponseAddress
     */
    'firstname'?: string;
    /**
     * 氏名(名:かな)
     * @type {string}
     * @memberof ResponseAddress
     */
    'firstnameKana'?: string;
    /**
     * 氏名（姓）
     * @type {string}
     * @memberof ResponseAddress
     */
    'lastname'?: string;
    /**
     * 氏名(姓:かな)
     * @type {string}
     * @memberof ResponseAddress
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseAddress
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof ResponseAddress
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {string}
     * @memberof ResponseAddress
     */
    'prefecture'?: string;
    /**
     * 都道府県コード
     * @type {number}
     * @memberof ResponseAddress
     */
    'prefectureCode'?: number;
}
/**
 * 対応者情報
 * @export
 * @interface ResponseAdmin
 */
export interface ResponseAdmin {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseAdmin
     */
    'createdAt'?: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseAdmin
     */
    'email'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ResponseAdmin
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ResponseAdmin
     */
    'firstnameKana'?: string;
    /**
     * 管理者ID
     * @type {string}
     * @memberof ResponseAdmin
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ResponseAdmin
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ResponseAdmin
     */
    'lastnameKana'?: string;
    /**
     * 管理者種別
     * @type {number}
     * @memberof ResponseAdmin
     */
    'role'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseAdmin
     */
    'updateAt'?: number;
}
/**
 * システム管理者情報
 * @export
 * @interface ResponseAdministrator
 */
export interface ResponseAdministrator {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseAdministrator
     */
    'createdAt'?: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'email'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'firstnameKana'?: string;
    /**
     * 管理者ID
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseAdministrator
     */
    'phoneNumber'?: string;
    /**
     * 管理者の状態
     * @type {number}
     * @memberof ResponseAdministrator
     */
    'status'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseAdministrator
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseAdministratorResponse
 */
export interface ResponseAdministratorResponse {
    /**
     * 
     * @type {ResponseAdministrator}
     * @memberof ResponseAdministratorResponse
     */
    'administrator'?: ResponseAdministrator;
}
/**
 * 
 * @export
 * @interface ResponseAdministratorsResponse
 */
export interface ResponseAdministratorsResponse {
    /**
     * システム管理者一覧
     * @type {Array<ResponseAdministrator>}
     * @memberof ResponseAdministratorsResponse
     */
    'administrators'?: Array<ResponseAdministrator>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseAdministratorsResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResponseAnalyzeScheduleResponse
 */
export interface ResponseAnalyzeScheduleResponse {
    /**
     * 合計視聴者数
     * @type {number}
     * @memberof ResponseAnalyzeScheduleResponse
     */
    'totalViewers'?: number;
    /**
     * 視聴者数ログ
     * @type {Array<ResponseBroadcastViewerLog>}
     * @memberof ResponseAnalyzeScheduleResponse
     */
    'viewerLogs'?: Array<ResponseBroadcastViewerLog>;
}
/**
 * 
 * @export
 * @interface ResponseAnalyzeVideoResponse
 */
export interface ResponseAnalyzeVideoResponse {
    /**
     * 合計視聴者数
     * @type {number}
     * @memberof ResponseAnalyzeVideoResponse
     */
    'totalViewers'?: number;
    /**
     * 視聴者数ログ
     * @type {Array<ResponseVideoViewerLog>}
     * @memberof ResponseAnalyzeVideoResponse
     */
    'viewerLogs'?: Array<ResponseVideoViewerLog>;
}
/**
 * 
 * @export
 * @interface ResponseAuthGoogleAccountResponse
 */
export interface ResponseAuthGoogleAccountResponse {
    /**
     * Googleアカウント連携URL
     * @type {string}
     * @memberof ResponseAuthGoogleAccountResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ResponseAuthLINEAccountResponse
 */
export interface ResponseAuthLINEAccountResponse {
    /**
     * LINEアカウント連携URL
     * @type {string}
     * @memberof ResponseAuthLINEAccountResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ResponseAuthProvider
 */
export interface ResponseAuthProvider {
    /**
     * 連携日時
     * @type {number}
     * @memberof ResponseAuthProvider
     */
    'connectedAt'?: number;
    /**
     * プロバイダ種別
     * @type {number}
     * @memberof ResponseAuthProvider
     */
    'type'?: number;
}
/**
 * 
 * @export
 * @interface ResponseAuthProvidersResponse
 */
export interface ResponseAuthProvidersResponse {
    /**
     * プロバイダ一覧
     * @type {Array<ResponseAuthProvider>}
     * @memberof ResponseAuthProvidersResponse
     */
    'providers'?: Array<ResponseAuthProvider>;
}
/**
 * 
 * @export
 * @interface ResponseAuthResponse
 */
export interface ResponseAuthResponse {
    /**
     * アクセストークン
     * @type {string}
     * @memberof ResponseAuthResponse
     */
    'accessToken'?: string;
    /**
     * 管理者ID
     * @type {string}
     * @memberof ResponseAuthResponse
     */
    'adminId'?: string;
    /**
     * 有効期限
     * @type {number}
     * @memberof ResponseAuthResponse
     */
    'expiresIn'?: number;
    /**
     * 更新トークン
     * @type {string}
     * @memberof ResponseAuthResponse
     */
    'refreshToken'?: string;
    /**
     * トークン種別
     * @type {string}
     * @memberof ResponseAuthResponse
     */
    'tokenType'?: string;
    /**
     * 管理者種別
     * @type {number}
     * @memberof ResponseAuthResponse
     */
    'type'?: number;
}
/**
 * 
 * @export
 * @interface ResponseAuthUserResponse
 */
export interface ResponseAuthUserResponse {
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseAuthUserResponse
     */
    'email'?: string;
    /**
     * 管理者ID
     * @type {string}
     * @memberof ResponseAuthUserResponse
     */
    'id'?: string;
    /**
     * 店舗ID一覧
     * @type {Array<string>}
     * @memberof ResponseAuthUserResponse
     */
    'shopIds'?: Array<string>;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseAuthUserResponse
     */
    'thumbnailUrl'?: string;
    /**
     * 管理者種別
     * @type {number}
     * @memberof ResponseAuthUserResponse
     */
    'type'?: number;
    /**
     * 表示名
     * @type {string}
     * @memberof ResponseAuthUserResponse
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseAuthYoutubeBroadcastResponse
 */
export interface ResponseAuthYoutubeBroadcastResponse {
    /**
     * 認証URL
     * @type {string}
     * @memberof ResponseAuthYoutubeBroadcastResponse
     */
    'url'?: string;
}
/**
 * ライブ配信情報
 * @export
 * @interface ResponseBroadcast
 */
export interface ResponseBroadcast {
    /**
     * オンデマンド配信URL
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'archiveUrl'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseBroadcast
     */
    'createdAt'?: number;
    /**
     * ライブ配信ID
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'id'?: string;
    /**
     * ライブ配信URL(入力)
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'inputUrl'?: string;
    /**
     * ライブ配信URL(出力)
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'outputUrl'?: string;
    /**
     * 開催スケジュールID
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'scheduleId'?: string;
    /**
     * ライブ配信状況
     * @type {number}
     * @memberof ResponseBroadcast
     */
    'status'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseBroadcast
     */
    'updatedAt'?: number;
    /**
     * Youtubeアカウント
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'youtubeAccount'?: string;
    /**
     * Youtube管理画面URL
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'youtubeAdminUrl'?: string;
    /**
     * Youtube視聴画面URL
     * @type {string}
     * @memberof ResponseBroadcast
     */
    'youtubeViewerUrl'?: string;
}
/**
 * 
 * @export
 * @interface ResponseBroadcastResponse
 */
export interface ResponseBroadcastResponse {
    /**
     * 
     * @type {ResponseBroadcast}
     * @memberof ResponseBroadcastResponse
     */
    'broadcast'?: ResponseBroadcast;
}
/**
 * 
 * @export
 * @interface ResponseBroadcastViewerLog
 */
export interface ResponseBroadcastViewerLog {
    /**
     * ライブ配信ID
     * @type {string}
     * @memberof ResponseBroadcastViewerLog
     */
    'broadcastId'?: string;
    /**
     * 集計終了日時
     * @type {number}
     * @memberof ResponseBroadcastViewerLog
     */
    'endAt'?: number;
    /**
     * 集計開始日時
     * @type {number}
     * @memberof ResponseBroadcastViewerLog
     */
    'startAt'?: number;
    /**
     * 合計視聴者数
     * @type {number}
     * @memberof ResponseBroadcastViewerLog
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResponseCategoriesResponse
 */
export interface ResponseCategoriesResponse {
    /**
     * 商品種別一覧
     * @type {Array<ResponseCategory>}
     * @memberof ResponseCategoriesResponse
     */
    'categories'?: Array<ResponseCategory>;
    /**
     * 商品種別合計数
     * @type {number}
     * @memberof ResponseCategoriesResponse
     */
    'total'?: number;
}
/**
 * 商品種別情報
 * @export
 * @interface ResponseCategory
 */
export interface ResponseCategory {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseCategory
     */
    'createdAt'?: number;
    /**
     * 商品種別ID
     * @type {string}
     * @memberof ResponseCategory
     */
    'id'?: string;
    /**
     * 商品種別名
     * @type {string}
     * @memberof ResponseCategory
     */
    'name'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseCategory
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseCategoryResponse
 */
export interface ResponseCategoryResponse {
    /**
     * 
     * @type {ResponseCategory}
     * @memberof ResponseCategoryResponse
     */
    'category'?: ResponseCategory;
}
/**
 * お問い合わせ情報
 * @export
 * @interface ResponseContact
 */
export interface ResponseContact {
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof ResponseContact
     */
    'categoryId'?: string;
    /**
     * 内容
     * @type {string}
     * @memberof ResponseContact
     */
    'content'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseContact
     */
    'createdAt'?: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseContact
     */
    'email'?: string;
    /**
     * お問い合わせID
     * @type {string}
     * @memberof ResponseContact
     */
    'id'?: string;
    /**
     * 対応者メモ
     * @type {string}
     * @memberof ResponseContact
     */
    'note'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseContact
     */
    'phoneNumber'?: string;
    /**
     * 対応者ID
     * @type {string}
     * @memberof ResponseContact
     */
    'responderId'?: string;
    /**
     * お問い合わせステータス
     * @type {number}
     * @memberof ResponseContact
     */
    'status'?: number;
    /**
     * 件名
     * @type {string}
     * @memberof ResponseContact
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseContact
     */
    'updatedAt'?: number;
    /**
     * ユーザーID
     * @type {string}
     * @memberof ResponseContact
     */
    'userId'?: string;
    /**
     * 氏名
     * @type {string}
     * @memberof ResponseContact
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseContactCategoriesResponse
 */
export interface ResponseContactCategoriesResponse {
    /**
     * お問い合わせ種別一覧
     * @type {Array<ResponseContactCategory>}
     * @memberof ResponseContactCategoriesResponse
     */
    'contactCategories'?: Array<ResponseContactCategory>;
}
/**
 * お問い合わせ種別情報
 * @export
 * @interface ResponseContactCategory
 */
export interface ResponseContactCategory {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseContactCategory
     */
    'createdAt'?: number;
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof ResponseContactCategory
     */
    'id'?: string;
    /**
     * お問い合わせ種別名
     * @type {string}
     * @memberof ResponseContactCategory
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseContactCategory
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseContactCategoryResponse
 */
export interface ResponseContactCategoryResponse {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseContactCategoryResponse
     */
    'createdAt'?: number;
    /**
     * お問い合わせ種別ID
     * @type {string}
     * @memberof ResponseContactCategoryResponse
     */
    'id'?: string;
    /**
     * お問い合わせ種別名
     * @type {string}
     * @memberof ResponseContactCategoryResponse
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseContactCategoryResponse
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseContactReadResponse
 */
export interface ResponseContactReadResponse {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof ResponseContactReadResponse
     */
    'contactId'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseContactReadResponse
     */
    'createdAt'?: number;
    /**
     * お問い合わせ既読管理ID
     * @type {string}
     * @memberof ResponseContactReadResponse
     */
    'id'?: string;
    /**
     * 既読フラグ
     * @type {boolean}
     * @memberof ResponseContactReadResponse
     */
    'read'?: boolean;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseContactReadResponse
     */
    'updatedAt'?: number;
    /**
     * 既読ユーザーID
     * @type {string}
     * @memberof ResponseContactReadResponse
     */
    'userId'?: string;
    /**
     * 既読ユーザータイプ
     * @type {number}
     * @memberof ResponseContactReadResponse
     */
    'userType'?: number;
}
/**
 * 
 * @export
 * @interface ResponseContactResponse
 */
export interface ResponseContactResponse {
    /**
     * 
     * @type {ResponseContactCategory}
     * @memberof ResponseContactResponse
     */
    'category'?: ResponseContactCategory;
    /**
     * 
     * @type {ResponseContact}
     * @memberof ResponseContactResponse
     */
    'contact'?: ResponseContact;
    /**
     * 
     * @type {ResponseAdmin}
     * @memberof ResponseContactResponse
     */
    'responder'?: ResponseAdmin;
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<ResponseThread>}
     * @memberof ResponseContactResponse
     */
    'threads'?: Array<ResponseThread>;
    /**
     * 
     * @type {ResponseUser}
     * @memberof ResponseContactResponse
     */
    'user'?: ResponseUser;
}
/**
 * 
 * @export
 * @interface ResponseContactsResponse
 */
export interface ResponseContactsResponse {
    /**
     * 管理者一覧
     * @type {Array<ResponseAdmin>}
     * @memberof ResponseContactsResponse
     */
    'admins'?: Array<ResponseAdmin>;
    /**
     * お問い合わせ種別一覧
     * @type {Array<ResponseContactCategory>}
     * @memberof ResponseContactsResponse
     */
    'categories'?: Array<ResponseContactCategory>;
    /**
     * お問い合わせ一覧
     * @type {Array<ResponseContact>}
     * @memberof ResponseContactsResponse
     */
    'contacts'?: Array<ResponseContact>;
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<ResponseThread>}
     * @memberof ResponseContactsResponse
     */
    'threads'?: Array<ResponseThread>;
    /**
     * お問い合わせ合計
     * @type {number}
     * @memberof ResponseContactsResponse
     */
    'total'?: number;
    /**
     * ユーザー一覧
     * @type {Array<ResponseUser>}
     * @memberof ResponseContactsResponse
     */
    'users'?: Array<ResponseUser>;
}
/**
 * コーディネータ情報
 * @export
 * @interface ResponseCoordinator
 */
export interface ResponseCoordinator {
    /**
     * 町名・番地
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'addressLine2'?: string;
    /**
     * 購入特典映像URL
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'bonusVideoUrl'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'city'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseCoordinator
     */
    'createdAt'?: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'email'?: string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'facebookId'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'firstnameKana'?: string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'headerUrl'?: string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'id'?: string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'instagramId'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {number}
     * @memberof ResponseCoordinator
     */
    'prefectureCode'?: number;
    /**
     * 担当する生産者数
     * @type {number}
     * @memberof ResponseCoordinator
     */
    'producerTotal'?: number;
    /**
     * 紹介文
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'profile'?: string;
    /**
     * 紹介映像URL
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'promotionVideoUrl'?: string;
    /**
     * 店舗ID
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'shopId'?: string;
    /**
     * コーディネータの状態
     * @type {number}
     * @memberof ResponseCoordinator
     */
    'status'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'thumbnailUrl'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseCoordinator
     */
    'updatedAt'?: number;
    /**
     * 表示名
     * @type {string}
     * @memberof ResponseCoordinator
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseCoordinatorResponse
 */
export interface ResponseCoordinatorResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseCoordinatorResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * パスワード（登録時のみ）
     * @type {string}
     * @memberof ResponseCoordinatorResponse
     */
    'password'?: string;
    /**
     * 品目一覧
     * @type {Array<ResponseProductType>}
     * @memberof ResponseCoordinatorResponse
     */
    'productTypes'?: Array<ResponseProductType>;
    /**
     * 
     * @type {ResponseShop}
     * @memberof ResponseCoordinatorResponse
     */
    'shop'?: ResponseShop;
}
/**
 * 
 * @export
 * @interface ResponseCoordinatorsResponse
 */
export interface ResponseCoordinatorsResponse {
    /**
     * 生産者一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseCoordinatorsResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 品目一覧
     * @type {Array<ResponseProductType>}
     * @memberof ResponseCoordinatorsResponse
     */
    'productTypes'?: Array<ResponseProductType>;
    /**
     * 店舗一覧
     * @type {Array<ResponseShop>}
     * @memberof ResponseCoordinatorsResponse
     */
    'shops'?: Array<ResponseShop>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseCoordinatorsResponse
     */
    'total'?: number;
}
/**
 * 体験情報
 * @export
 * @interface ResponseExperience
 */
export interface ResponseExperience {
    /**
     * 営業終了時間
     * @type {string}
     * @memberof ResponseExperience
     */
    'businessCloseTime'?: string;
    /**
     * 営業開始時間
     * @type {string}
     * @memberof ResponseExperience
     */
    'businessOpenTime'?: string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseExperience
     */
    'coordinatorId'?: string;
    /**
     * 作成日時
     * @type {number}
     * @memberof ResponseExperience
     */
    'createdAt'?: number;
    /**
     * 説明
     * @type {string}
     * @memberof ResponseExperience
     */
    'description'?: string;
    /**
     * アクセス方法
     * @type {string}
     * @memberof ResponseExperience
     */
    'direction'?: string;
    /**
     * 体験時間(分)
     * @type {number}
     * @memberof ResponseExperience
     */
    'duration'?: number;
    /**
     * 募集終了日時
     * @type {number}
     * @memberof ResponseExperience
     */
    'endAt'?: number;
    /**
     * 体験種別ID
     * @type {string}
     * @memberof ResponseExperience
     */
    'experienceTypeId'?: string;
    /**
     * 開催場所(住所1)
     * @type {string}
     * @memberof ResponseExperience
     */
    'hostAddressLine1'?: string;
    /**
     * 開催場所(住所2)
     * @type {string}
     * @memberof ResponseExperience
     */
    'hostAddressLine2'?: string;
    /**
     * 開催場所(市区町村)
     * @type {string}
     * @memberof ResponseExperience
     */
    'hostCity'?: string;
    /**
     * 開催場所(郵便番号)
     * @type {string}
     * @memberof ResponseExperience
     */
    'hostPostalCode'?: string;
    /**
     * 開催場所(都道府県コード)
     * @type {number}
     * @memberof ResponseExperience
     */
    'hostPrefectureCode'?: number;
    /**
     * 体験ID
     * @type {string}
     * @memberof ResponseExperience
     */
    'id'?: string;
    /**
     * メディア一覧
     * @type {Array<ResponseExperienceMedia>}
     * @memberof ResponseExperience
     */
    'media'?: Array<ResponseExperienceMedia>;
    /**
     * 大人料金
     * @type {number}
     * @memberof ResponseExperience
     */
    'priceAdult'?: number;
    /**
     * 小学生料金
     * @type {number}
     * @memberof ResponseExperience
     */
    'priceElementarySchool'?: number;
    /**
     * 中学生料金
     * @type {number}
     * @memberof ResponseExperience
     */
    'priceJuniorHighSchool'?: number;
    /**
     * 幼児料金
     * @type {number}
     * @memberof ResponseExperience
     */
    'pricePreschool'?: number;
    /**
     * シニア料金
     * @type {number}
     * @memberof ResponseExperience
     */
    'priceSenior'?: number;
    /**
     * プロデューサーID
     * @type {string}
     * @memberof ResponseExperience
     */
    'producerId'?: string;
    /**
     * 紹介動画URL
     * @type {string}
     * @memberof ResponseExperience
     */
    'promotionVideoUrl'?: string;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof ResponseExperience
     */
    'public'?: boolean;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof ResponseExperience
     */
    'recommendedPoint1'?: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof ResponseExperience
     */
    'recommendedPoint2'?: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof ResponseExperience
     */
    'recommendedPoint3'?: string;
    /**
     * 定員オーバー設定
     * @type {boolean}
     * @memberof ResponseExperience
     */
    'soldOut'?: boolean;
    /**
     * 募集開始日時
     * @type {number}
     * @memberof ResponseExperience
     */
    'startAt'?: number;
    /**
     * 販売状況
     * @type {number}
     * @memberof ResponseExperience
     */
    'status'?: number;
    /**
     * タイトル
     * @type {string}
     * @memberof ResponseExperience
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseExperience
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseExperienceMedia
 */
export interface ResponseExperienceMedia {
    /**
     * サムネイルとして使用
     * @type {boolean}
     * @memberof ResponseExperienceMedia
     */
    'isThumbnail'?: boolean;
    /**
     * メディアURL
     * @type {string}
     * @memberof ResponseExperienceMedia
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ResponseExperienceResponse
 */
export interface ResponseExperienceResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseExperienceResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseExperience}
     * @memberof ResponseExperienceResponse
     */
    'experience'?: ResponseExperience;
    /**
     * 
     * @type {ResponseExperienceType}
     * @memberof ResponseExperienceResponse
     */
    'experienceType'?: ResponseExperienceType;
    /**
     * 
     * @type {ResponseProducer}
     * @memberof ResponseExperienceResponse
     */
    'producer'?: ResponseProducer;
}
/**
 * 体験種別情報
 * @export
 * @interface ResponseExperienceType
 */
export interface ResponseExperienceType {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseExperienceType
     */
    'createdAt'?: number;
    /**
     * 体験種別ID
     * @type {string}
     * @memberof ResponseExperienceType
     */
    'id'?: string;
    /**
     * 体験種別名
     * @type {string}
     * @memberof ResponseExperienceType
     */
    'name'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseExperienceType
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseExperienceTypeResponse
 */
export interface ResponseExperienceTypeResponse {
    /**
     * 
     * @type {ResponseExperienceType}
     * @memberof ResponseExperienceTypeResponse
     */
    'experienceType'?: ResponseExperienceType;
}
/**
 * 
 * @export
 * @interface ResponseExperienceTypesResponse
 */
export interface ResponseExperienceTypesResponse {
    /**
     * 体験種別一覧
     * @type {Array<ResponseExperienceType>}
     * @memberof ResponseExperienceTypesResponse
     */
    'experienceTypes'?: Array<ResponseExperienceType>;
    /**
     * 体験種別合計数
     * @type {number}
     * @memberof ResponseExperienceTypesResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResponseExperiencesResponse
 */
export interface ResponseExperiencesResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseExperiencesResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 体験種別一覧
     * @type {Array<ResponseExperienceType>}
     * @memberof ResponseExperiencesResponse
     */
    'experienceTypes'?: Array<ResponseExperienceType>;
    /**
     * 体験一覧
     * @type {Array<ResponseExperience>}
     * @memberof ResponseExperiencesResponse
     */
    'experiences'?: Array<ResponseExperience>;
    /**
     * 生産者一覧
     * @type {Array<ResponseProducer>}
     * @memberof ResponseExperiencesResponse
     */
    'producers'?: Array<ResponseProducer>;
    /**
     * 体験合計数
     * @type {number}
     * @memberof ResponseExperiencesResponse
     */
    'total'?: number;
}
/**
 * ゲスト用ライブ配信情報
 * @export
 * @interface ResponseGuestBroadcast
 */
export interface ResponseGuestBroadcast {
    /**
     * ライブ配信担当者(マルシェ)
     * @type {string}
     * @memberof ResponseGuestBroadcast
     */
    'coordinatorMarche'?: string;
    /**
     * ライブ配信担当者(名前)
     * @type {string}
     * @memberof ResponseGuestBroadcast
     */
    'coordinatorName'?: string;
    /**
     * ライブ配信説明
     * @type {string}
     * @memberof ResponseGuestBroadcast
     */
    'description'?: string;
    /**
     * ライブ配信終了日時
     * @type {number}
     * @memberof ResponseGuestBroadcast
     */
    'endAt'?: number;
    /**
     * ライブ配信開始日時
     * @type {number}
     * @memberof ResponseGuestBroadcast
     */
    'startAt'?: number;
    /**
     * ライブ配信タイトル
     * @type {string}
     * @memberof ResponseGuestBroadcast
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface ResponseGuestBroadcastResponse
 */
export interface ResponseGuestBroadcastResponse {
    /**
     * 
     * @type {ResponseGuestBroadcast}
     * @memberof ResponseGuestBroadcastResponse
     */
    'broadcast'?: ResponseGuestBroadcast;
}
/**
 * ライブ配信情報
 * @export
 * @interface ResponseLive
 */
export interface ResponseLive {
    /**
     * コメント
     * @type {string}
     * @memberof ResponseLive
     */
    'comment'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseLive
     */
    'createdAt'?: number;
    /**
     * ライブ配信終了日時
     * @type {number}
     * @memberof ResponseLive
     */
    'endAt'?: number;
    /**
     * ライブ配信ID
     * @type {string}
     * @memberof ResponseLive
     */
    'id'?: string;
    /**
     * 生産者ID
     * @type {string}
     * @memberof ResponseLive
     */
    'producerId'?: string;
    /**
     * 商品ID一覧
     * @type {Array<string>}
     * @memberof ResponseLive
     */
    'productIds'?: Array<string>;
    /**
     * マルシェ開催スケジュールID
     * @type {string}
     * @memberof ResponseLive
     */
    'scheduleId'?: string;
    /**
     * ライブ配信開始日時
     * @type {number}
     * @memberof ResponseLive
     */
    'startAt'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseLive
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseLiveComment
 */
export interface ResponseLiveComment {
    /**
     * アカウントID
     * @type {string}
     * @memberof ResponseLiveComment
     */
    'accountId'?: string;
    /**
     * コメント
     * @type {string}
     * @memberof ResponseLiveComment
     */
    'comment'?: string;
    /**
     * コメント無効フラグ
     * @type {boolean}
     * @memberof ResponseLiveComment
     */
    'disabled'?: boolean;
    /**
     * コメントID
     * @type {string}
     * @memberof ResponseLiveComment
     */
    'id'?: string;
    /**
     * 投稿日時
     * @type {number}
     * @memberof ResponseLiveComment
     */
    'publishedAt'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseLiveComment
     */
    'thumbnailUrl'?: string;
    /**
     * ユーザーID
     * @type {string}
     * @memberof ResponseLiveComment
     */
    'userId'?: string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof ResponseLiveComment
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseLiveCommentsResponse
 */
export interface ResponseLiveCommentsResponse {
    /**
     * コメント一覧
     * @type {Array<ResponseLiveComment>}
     * @memberof ResponseLiveCommentsResponse
     */
    'comments'?: Array<ResponseLiveComment>;
    /**
     * 次の取得開始位置
     * @type {string}
     * @memberof ResponseLiveCommentsResponse
     */
    'nextToken'?: string;
}
/**
 * 
 * @export
 * @interface ResponseLiveResponse
 */
export interface ResponseLiveResponse {
    /**
     * 
     * @type {ResponseLive}
     * @memberof ResponseLiveResponse
     */
    'live'?: ResponseLive;
    /**
     * 
     * @type {ResponseProducer}
     * @memberof ResponseLiveResponse
     */
    'producer'?: ResponseProducer;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseLiveResponse
     */
    'products'?: Array<ResponseProduct>;
}
/**
 * 
 * @export
 * @interface ResponseLivesResponse
 */
export interface ResponseLivesResponse {
    /**
     * ライブ配信一覧
     * @type {Array<ResponseLive>}
     * @memberof ResponseLivesResponse
     */
    'lives'?: Array<ResponseLive>;
    /**
     * 生産者一覧
     * @type {Array<ResponseProducer>}
     * @memberof ResponseLivesResponse
     */
    'producers'?: Array<ResponseProducer>;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseLivesResponse
     */
    'products'?: Array<ResponseProduct>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseLivesResponse
     */
    'total'?: number;
}
/**
 * メッセージ情報
 * @export
 * @interface ResponseMessage
 */
export interface ResponseMessage {
    /**
     * メッセージ内容
     * @type {string}
     * @memberof ResponseMessage
     */
    'body'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseMessage
     */
    'createdAt'?: number;
    /**
     * メッセージID
     * @type {string}
     * @memberof ResponseMessage
     */
    'id'?: string;
    /**
     * 遷移先リンク
     * @type {string}
     * @memberof ResponseMessage
     */
    'link'?: string;
    /**
     * 既読フラグ
     * @type {boolean}
     * @memberof ResponseMessage
     */
    'read'?: boolean;
    /**
     * 受信日時
     * @type {number}
     * @memberof ResponseMessage
     */
    'receivedAt'?: number;
    /**
     * メッセージ件名
     * @type {string}
     * @memberof ResponseMessage
     */
    'title'?: string;
    /**
     * メッセージ種別
     * @type {number}
     * @memberof ResponseMessage
     */
    'type'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseMessage
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseMessageResponse
 */
export interface ResponseMessageResponse {
    /**
     * 
     * @type {ResponseMessage}
     * @memberof ResponseMessageResponse
     */
    'message'?: ResponseMessage;
}
/**
 * 
 * @export
 * @interface ResponseMessagesResponse
 */
export interface ResponseMessagesResponse {
    /**
     * メッセージ一覧
     * @type {Array<ResponseMessage>}
     * @memberof ResponseMessagesResponse
     */
    'messages'?: Array<ResponseMessage>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseMessagesResponse
     */
    'total'?: number;
}
/**
 * お知らせ情報
 * @export
 * @interface ResponseNotification
 */
export interface ResponseNotification {
    /**
     * 本文
     * @type {string}
     * @memberof ResponseNotification
     */
    'body'?: string;
    /**
     * 作成日時
     * @type {number}
     * @memberof ResponseNotification
     */
    'createdAt'?: number;
    /**
     * 登録者ID
     * @type {string}
     * @memberof ResponseNotification
     */
    'createdBy'?: string;
    /**
     * お知らせID
     * @type {string}
     * @memberof ResponseNotification
     */
    'id'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof ResponseNotification
     */
    'note'?: string;
    /**
     * プロモーションID
     * @type {string}
     * @memberof ResponseNotification
     */
    'promotionId'?: string;
    /**
     * 掲載開始日時
     * @type {number}
     * @memberof ResponseNotification
     */
    'publishedAt'?: number;
    /**
     * お知らせ状態
     * @type {number}
     * @memberof ResponseNotification
     */
    'status'?: number;
    /**
     * 掲載対象一覧
     * @type {Array<number>}
     * @memberof ResponseNotification
     */
    'targets'?: Array<number>;
    /**
     * タイトル
     * @type {string}
     * @memberof ResponseNotification
     */
    'title'?: string;
    /**
     * お知らせ種別
     * @type {number}
     * @memberof ResponseNotification
     */
    'type'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseNotification
     */
    'updatedAt'?: number;
    /**
     * 更新者ID
     * @type {string}
     * @memberof ResponseNotification
     */
    'updatedBy'?: string;
}
/**
 * 
 * @export
 * @interface ResponseNotificationResponse
 */
export interface ResponseNotificationResponse {
    /**
     * 
     * @type {ResponseAdmin}
     * @memberof ResponseNotificationResponse
     */
    'admin'?: ResponseAdmin;
    /**
     * 
     * @type {ResponseNotification}
     * @memberof ResponseNotificationResponse
     */
    'notification'?: ResponseNotification;
}
/**
 * 
 * @export
 * @interface ResponseNotificationsResponse
 */
export interface ResponseNotificationsResponse {
    /**
     * 登録者情報一覧
     * @type {Array<ResponseAdmin>}
     * @memberof ResponseNotificationsResponse
     */
    'admins'?: Array<ResponseAdmin>;
    /**
     * お知らせ一覧
     * @type {Array<ResponseNotification>}
     * @memberof ResponseNotificationsResponse
     */
    'notifications'?: Array<ResponseNotification>;
    /**
     * お知らせ合計数
     * @type {number}
     * @memberof ResponseNotificationsResponse
     */
    'total'?: number;
}
/**
 * 注文履歴情報
 * @export
 * @interface ResponseOrder
 */
export interface ResponseOrder {
    /**
     * 対応完了日時
     * @type {number}
     * @memberof ResponseOrder
     */
    'completedAt'?: number;
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseOrder
     */
    'coordinatorId'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseOrder
     */
    'createdAt'?: number;
    /**
     * 
     * @type {ResponseOrderExperience}
     * @memberof ResponseOrder
     */
    'experience'?: ResponseOrderExperience;
    /**
     * 配送情報一覧
     * @type {Array<ResponseOrderFulfillment>}
     * @memberof ResponseOrder
     */
    'fulfillments'?: Array<ResponseOrderFulfillment>;
    /**
     * 注文履歴ID
     * @type {string}
     * @memberof ResponseOrder
     */
    'id'?: string;
    /**
     * 注文商品一覧
     * @type {Array<ResponseOrderItem>}
     * @memberof ResponseOrder
     */
    'items'?: Array<ResponseOrderItem>;
    /**
     * 注文管理用ID
     * @type {number}
     * @memberof ResponseOrder
     */
    'managementId'?: number;
    /**
     * 
     * @type {ResponseOrderMetadata}
     * @memberof ResponseOrder
     */
    'metadata'?: ResponseOrderMetadata;
    /**
     * 
     * @type {ResponseOrderPayment}
     * @memberof ResponseOrder
     */
    'payment'?: ResponseOrderPayment;
    /**
     * プロモーションID
     * @type {string}
     * @memberof ResponseOrder
     */
    'promotionId'?: string;
    /**
     * 
     * @type {ResponseOrderRefund}
     * @memberof ResponseOrder
     */
    'refund'?: ResponseOrderRefund;
    /**
     * 発送連絡時のメッセージ
     * @type {string}
     * @memberof ResponseOrder
     */
    'shippingMessage'?: string;
    /**
     * 発送方法
     * @type {number}
     * @memberof ResponseOrder
     */
    'shippingType'?: number;
    /**
     * 注文ステータス
     * @type {number}
     * @memberof ResponseOrder
     */
    'status'?: number;
    /**
     * 注文種別
     * @type {number}
     * @memberof ResponseOrder
     */
    'type'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseOrder
     */
    'updatedAt'?: number;
    /**
     * ユーザーID
     * @type {string}
     * @memberof ResponseOrder
     */
    'userId'?: string;
}
/**
 * 注文体験情報
 * @export
 * @interface ResponseOrderExperience
 */
export interface ResponseOrderExperience {
    /**
     * 大人人数
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'adultCount'?: number;
    /**
     * 大人価格
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'adultPrice'?: number;
    /**
     * 小学生人数
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'elementarySchoolCount'?: number;
    /**
     * 小学生価格
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'elementarySchoolPrice'?: number;
    /**
     * 体験ID
     * @type {string}
     * @memberof ResponseOrderExperience
     */
    'experienceId'?: string;
    /**
     * 中学生人数
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'juniorHighSchoolCount'?: number;
    /**
     * 中学生価格
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'juniorHighSchoolPrice'?: number;
    /**
     * 幼児人数
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'preschoolCount'?: number;
    /**
     * 幼児価格
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'preschoolPrice'?: number;
    /**
     * 
     * @type {ResponseOrderExperienceRemarks}
     * @memberof ResponseOrderExperience
     */
    'remarks'?: ResponseOrderExperienceRemarks;
    /**
     * シニア人数
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'seniorCount'?: number;
    /**
     * シニア価格
     * @type {number}
     * @memberof ResponseOrderExperience
     */
    'seniorPrice'?: number;
}
/**
 * 備考
 * @export
 * @interface ResponseOrderExperienceRemarks
 */
export interface ResponseOrderExperienceRemarks {
    /**
     * 体験希望日
     * @type {string}
     * @memberof ResponseOrderExperienceRemarks
     */
    'requestedDate'?: string;
    /**
     * 体験希望時間
     * @type {string}
     * @memberof ResponseOrderExperienceRemarks
     */
    'requestedTime'?: string;
    /**
     * 交通手段
     * @type {string}
     * @memberof ResponseOrderExperienceRemarks
     */
    'transportation'?: string;
}
/**
 * 
 * @export
 * @interface ResponseOrderFulfillment
 */
export interface ResponseOrderFulfillment {
    /**
     * 住所ID
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'addressId'?: string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'addressLine2'?: string;
    /**
     * 箱の通番
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'boxNumber'?: number;
    /**
     * 箱の占有率
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'boxRate'?: number;
    /**
     * 箱の大きさ
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'boxSize'?: number;
    /**
     * 市区町村
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'city'?: string;
    /**
     * 氏名（名）
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'firstname'?: string;
    /**
     * 氏名(名:かな)
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'firstnameKana'?: string;
    /**
     * 配送情報ID
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'fulfillmentId'?: string;
    /**
     * 氏名（姓）
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'lastname'?: string;
    /**
     * 氏名(姓:かな)
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'prefecture'?: string;
    /**
     * 都道府県コード
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'prefectureCode'?: number;
    /**
     * 配送日時
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'shippedAt'?: number;
    /**
     * 配送会社
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'shippingCarrier'?: number;
    /**
     * 配送方法
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'shippingType'?: number;
    /**
     * 配送状況
     * @type {number}
     * @memberof ResponseOrderFulfillment
     */
    'status'?: number;
    /**
     * 伝票番号
     * @type {string}
     * @memberof ResponseOrderFulfillment
     */
    'trackingNumber'?: string;
}
/**
 * 
 * @export
 * @interface ResponseOrderItem
 */
export interface ResponseOrderItem {
    /**
     * 配送情報ID
     * @type {string}
     * @memberof ResponseOrderItem
     */
    'fulfillmentId'?: string;
    /**
     * 購入価格(税込)
     * @type {number}
     * @memberof ResponseOrderItem
     */
    'price'?: number;
    /**
     * 商品ID
     * @type {string}
     * @memberof ResponseOrderItem
     */
    'productId'?: string;
    /**
     * 購入数量
     * @type {number}
     * @memberof ResponseOrderItem
     */
    'quantity'?: number;
}
/**
 * 注文付加情報
 * @export
 * @interface ResponseOrderMetadata
 */
export interface ResponseOrderMetadata {
    /**
     * 受け取り日時
     * @type {number}
     * @memberof ResponseOrderMetadata
     */
    'pickupAt'?: number;
    /**
     * 受け取り場所
     * @type {string}
     * @memberof ResponseOrderMetadata
     */
    'pickupLocation'?: string;
}
/**
 * 支払い情報
 * @export
 * @interface ResponseOrderPayment
 */
export interface ResponseOrderPayment {
    /**
     * 住所ID
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'addressId'?: string;
    /**
     * 町名・番地
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'addressLine2'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'city'?: string;
    /**
     * 割引金額(税込)
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'discount'?: number;
    /**
     * 氏名（名）
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'firstname'?: string;
    /**
     * 氏名(名:かな)
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'firstnameKana'?: string;
    /**
     * 氏名（姓）
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'lastname'?: string;
    /**
     * 氏名(姓:かな)
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'lastnameKana'?: string;
    /**
     * 決済手段種別
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'methodType'?: number;
    /**
     * 注文日時
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'orderedAt'?: number;
    /**
     * 支払日時
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'paidAt'?: number;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'prefecture'?: string;
    /**
     * 都道府県コード
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'prefectureCode'?: number;
    /**
     * 配送手数料(税込)
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'shippingFee'?: number;
    /**
     * 支払い状況
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'status'?: number;
    /**
     * 購入金額(税込)
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'subtotal'?: number;
    /**
     * 合計金額(税込)
     * @type {number}
     * @memberof ResponseOrderPayment
     */
    'total'?: number;
    /**
     * 取引ID
     * @type {string}
     * @memberof ResponseOrderPayment
     */
    'transactionId'?: string;
}
/**
 * 注文キャンセル情報
 * @export
 * @interface ResponseOrderRefund
 */
export interface ResponseOrderRefund {
    /**
     * 注文キャンセルフラグ
     * @type {boolean}
     * @memberof ResponseOrderRefund
     */
    'canceled'?: boolean;
    /**
     * 注文キャンセル日時
     * @type {number}
     * @memberof ResponseOrderRefund
     */
    'canceledAt'?: number;
    /**
     * 注文キャンセル理由
     * @type {string}
     * @memberof ResponseOrderRefund
     */
    'reason'?: string;
    /**
     * 返金金額
     * @type {number}
     * @memberof ResponseOrderRefund
     */
    'total'?: number;
    /**
     * 注文キャンセル種別
     * @type {number}
     * @memberof ResponseOrderRefund
     */
    'type'?: number;
}
/**
 * 
 * @export
 * @interface ResponseOrderResponse
 */
export interface ResponseOrderResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseOrderResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseExperience}
     * @memberof ResponseOrderResponse
     */
    'experience'?: ResponseExperience;
    /**
     * 
     * @type {ResponseOrder}
     * @memberof ResponseOrderResponse
     */
    'order'?: ResponseOrder;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseOrderResponse
     */
    'products'?: Array<ResponseProduct>;
    /**
     * 
     * @type {ResponsePromotion}
     * @memberof ResponseOrderResponse
     */
    'promotion'?: ResponsePromotion;
    /**
     * 
     * @type {ResponseUser}
     * @memberof ResponseOrderResponse
     */
    'user'?: ResponseUser;
}
/**
 * 
 * @export
 * @interface ResponseOrdersResponse
 */
export interface ResponseOrdersResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseOrdersResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 注文履歴一覧
     * @type {Array<ResponseOrder>}
     * @memberof ResponseOrdersResponse
     */
    'orders'?: Array<ResponseOrder>;
    /**
     * プロモーション一覧
     * @type {Array<ResponsePromotion>}
     * @memberof ResponseOrdersResponse
     */
    'promotions'?: Array<ResponsePromotion>;
    /**
     * 注文履歴合計数
     * @type {number}
     * @memberof ResponseOrdersResponse
     */
    'total'?: number;
    /**
     * 購入者一覧
     * @type {Array<ResponseUser>}
     * @memberof ResponseOrdersResponse
     */
    'users'?: Array<ResponseUser>;
}
/**
 * 
 * @export
 * @interface ResponsePaymentSystem
 */
export interface ResponsePaymentSystem {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponsePaymentSystem
     */
    'createdAt'?: number;
    /**
     * 決済システム種別
     * @type {number}
     * @memberof ResponsePaymentSystem
     */
    'methodType'?: number;
    /**
     * 決済システム状態
     * @type {number}
     * @memberof ResponsePaymentSystem
     */
    'status'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponsePaymentSystem
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponsePaymentSystemsResponse
 */
export interface ResponsePaymentSystemsResponse {
    /**
     * 決済システム一覧
     * @type {Array<ResponsePaymentSystem>}
     * @memberof ResponsePaymentSystemsResponse
     */
    'systems'?: Array<ResponsePaymentSystem>;
}
/**
 * 
 * @export
 * @interface ResponsePostalCodeResponse
 */
export interface ResponsePostalCodeResponse {
    /**
     * 市区町村名
     * @type {string}
     * @memberof ResponsePostalCodeResponse
     */
    'city'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof ResponsePostalCodeResponse
     */
    'postalCode'?: string;
    /**
     * 都道府県名
     * @type {string}
     * @memberof ResponsePostalCodeResponse
     */
    'prefecture'?: string;
    /**
     * 都道府県コード
     * @type {number}
     * @memberof ResponsePostalCodeResponse
     */
    'prefectureCode'?: number;
    /**
     * 町域名
     * @type {string}
     * @memberof ResponsePostalCodeResponse
     */
    'town'?: string;
}
/**
 * 生産者情報
 * @export
 * @interface ResponseProducer
 */
export interface ResponseProducer {
    /**
     * 町名・番地
     * @type {string}
     * @memberof ResponseProducer
     */
    'addressLine1'?: string;
    /**
     * ビル名・号室など
     * @type {string}
     * @memberof ResponseProducer
     */
    'addressLine2'?: string;
    /**
     * 購入特典映像URL
     * @type {string}
     * @memberof ResponseProducer
     */
    'bonusVideoUrl'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof ResponseProducer
     */
    'city'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseProducer
     */
    'createdAt'?: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseProducer
     */
    'email'?: string;
    /**
     * Facebookアカウント
     * @type {string}
     * @memberof ResponseProducer
     */
    'facebookId'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ResponseProducer
     */
    'firstname'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ResponseProducer
     */
    'firstnameKana'?: string;
    /**
     * ヘッダー画像URL
     * @type {string}
     * @memberof ResponseProducer
     */
    'headerUrl'?: string;
    /**
     * 生産者ID
     * @type {string}
     * @memberof ResponseProducer
     */
    'id'?: string;
    /**
     * Instagramアカウント
     * @type {string}
     * @memberof ResponseProducer
     */
    'instagramId'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ResponseProducer
     */
    'lastname'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ResponseProducer
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseProducer
     */
    'phoneNumber'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof ResponseProducer
     */
    'postalCode'?: string;
    /**
     * 都道府県
     * @type {number}
     * @memberof ResponseProducer
     */
    'prefectureCode'?: number;
    /**
     * 紹介文
     * @type {string}
     * @memberof ResponseProducer
     */
    'profile'?: string;
    /**
     * 紹介映像URL
     * @type {string}
     * @memberof ResponseProducer
     */
    'promotionVideoUrl'?: string;
    /**
     * 生産者の状態
     * @type {number}
     * @memberof ResponseProducer
     */
    'status'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseProducer
     */
    'thumbnailUrl'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseProducer
     */
    'updatedAt'?: number;
    /**
     * 生産者名
     * @type {string}
     * @memberof ResponseProducer
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseProducerResponse
 */
export interface ResponseProducerResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseProducerResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 
     * @type {ResponseProducer}
     * @memberof ResponseProducerResponse
     */
    'producer'?: ResponseProducer;
    /**
     * 店舗情報
     * @type {Array<ResponseShop>}
     * @memberof ResponseProducerResponse
     */
    'shops'?: Array<ResponseShop>;
}
/**
 * 
 * @export
 * @interface ResponseProducersResponse
 */
export interface ResponseProducersResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseProducersResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 生産者一覧
     * @type {Array<ResponseProducer>}
     * @memberof ResponseProducersResponse
     */
    'producers'?: Array<ResponseProducer>;
    /**
     * 店舗一覧
     * @type {Array<ResponseShop>}
     * @memberof ResponseProducersResponse
     */
    'shops'?: Array<ResponseShop>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseProducersResponse
     */
    'total'?: number;
}
/**
 * 商品情報
 * @export
 * @interface ResponseProduct
 */
export interface ResponseProduct {
    /**
     * 箱の占有率(サイズ:60)
     * @type {number}
     * @memberof ResponseProduct
     */
    'box60Rate'?: number;
    /**
     * 箱の占有率(サイズ:80)
     * @type {number}
     * @memberof ResponseProduct
     */
    'box80Rate'?: number;
    /**
     * 箱の占有率(サイズ:100)
     * @type {number}
     * @memberof ResponseProduct
     */
    'box100Rate'?: number;
    /**
     * 商品種別ID
     * @type {string}
     * @memberof ResponseProduct
     */
    'categoryId'?: string;
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseProduct
     */
    'coordinatorId'?: string;
    /**
     * 原価
     * @type {number}
     * @memberof ResponseProduct
     */
    'cost'?: number;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseProduct
     */
    'createdAt'?: number;
    /**
     * 配送方法
     * @type {number}
     * @memberof ResponseProduct
     */
    'deliveryType'?: number;
    /**
     * 商品説明
     * @type {string}
     * @memberof ResponseProduct
     */
    'description'?: string;
    /**
     * 販売終了日時
     * @type {number}
     * @memberof ResponseProduct
     */
    'endAt'?: number;
    /**
     * 賞味期限(単位:日)
     * @type {number}
     * @memberof ResponseProduct
     */
    'expirationDate'?: number;
    /**
     * 商品ID
     * @type {string}
     * @memberof ResponseProduct
     */
    'id'?: string;
    /**
     * 在庫数
     * @type {number}
     * @memberof ResponseProduct
     */
    'inventory'?: number;
    /**
     * 数量単位説明
     * @type {string}
     * @memberof ResponseProduct
     */
    'itemDescription'?: string;
    /**
     * 数量単位
     * @type {string}
     * @memberof ResponseProduct
     */
    'itemUnit'?: string;
    /**
     * メディア一覧
     * @type {Array<ResponseProductMedia>}
     * @memberof ResponseProduct
     */
    'media'?: Array<ResponseProductMedia>;
    /**
     * 商品名
     * @type {string}
     * @memberof ResponseProduct
     */
    'name'?: string;
    /**
     * 原産地(市区町村)
     * @type {string}
     * @memberof ResponseProduct
     */
    'originCity'?: string;
    /**
     * 原産地(都道府県)
     * @type {number}
     * @memberof ResponseProduct
     */
    'originPrefectureCode'?: number;
    /**
     * 販売価格(税込)
     * @type {number}
     * @memberof ResponseProduct
     */
    'price'?: number;
    /**
     * 生産者ID
     * @type {string}
     * @memberof ResponseProduct
     */
    'producerId'?: string;
    /**
     * 商品タグID一覧
     * @type {Array<string>}
     * @memberof ResponseProduct
     */
    'productTagIds'?: Array<string>;
    /**
     * 品目ID
     * @type {string}
     * @memberof ResponseProduct
     */
    'productTypeId'?: string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof ResponseProduct
     */
    'public'?: boolean;
    /**
     * おすすめポイント1
     * @type {string}
     * @memberof ResponseProduct
     */
    'recommendedPoint1'?: string;
    /**
     * おすすめポイント2
     * @type {string}
     * @memberof ResponseProduct
     */
    'recommendedPoint2'?: string;
    /**
     * おすすめポイント3
     * @type {string}
     * @memberof ResponseProduct
     */
    'recommendedPoint3'?: string;
    /**
     * 販売開始日時
     * @type {number}
     * @memberof ResponseProduct
     */
    'startAt'?: number;
    /**
     * 販売状況
     * @type {number}
     * @memberof ResponseProduct
     */
    'status'?: number;
    /**
     * 保存方法
     * @type {number}
     * @memberof ResponseProduct
     */
    'storageMethodType'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseProduct
     */
    'updatedAt'?: number;
    /**
     * 重量(kg,少数第一位まで)
     * @type {number}
     * @memberof ResponseProduct
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface ResponseProductMedia
 */
export interface ResponseProductMedia {
    /**
     * サムネイルとして使用
     * @type {boolean}
     * @memberof ResponseProductMedia
     */
    'isThumbnail'?: boolean;
    /**
     * メディアURL
     * @type {string}
     * @memberof ResponseProductMedia
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ResponseProductResponse
 */
export interface ResponseProductResponse {
    /**
     * 
     * @type {ResponseCategory}
     * @memberof ResponseProductResponse
     */
    'category'?: ResponseCategory;
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseProductResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseProducer}
     * @memberof ResponseProductResponse
     */
    'producer'?: ResponseProducer;
    /**
     * 
     * @type {ResponseProduct}
     * @memberof ResponseProductResponse
     */
    'product'?: ResponseProduct;
    /**
     * 商品タグ一覧
     * @type {Array<ResponseProductTag>}
     * @memberof ResponseProductResponse
     */
    'productTags'?: Array<ResponseProductTag>;
    /**
     * 
     * @type {ResponseProductType}
     * @memberof ResponseProductResponse
     */
    'productType'?: ResponseProductType;
}
/**
 * 商品タグ情報
 * @export
 * @interface ResponseProductTag
 */
export interface ResponseProductTag {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseProductTag
     */
    'createdAt'?: number;
    /**
     * 商品タグID
     * @type {string}
     * @memberof ResponseProductTag
     */
    'id'?: string;
    /**
     * 商品タグ名
     * @type {string}
     * @memberof ResponseProductTag
     */
    'name'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseProductTag
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseProductTagResponse
 */
export interface ResponseProductTagResponse {
    /**
     * 
     * @type {ResponseProductTag}
     * @memberof ResponseProductTagResponse
     */
    'productTag'?: ResponseProductTag;
}
/**
 * 
 * @export
 * @interface ResponseProductTagsResponse
 */
export interface ResponseProductTagsResponse {
    /**
     * 商品タグ一覧
     * @type {Array<ResponseProductTag>}
     * @memberof ResponseProductTagsResponse
     */
    'productTags'?: Array<ResponseProductTag>;
    /**
     * 商品タグ合計数
     * @type {number}
     * @memberof ResponseProductTagsResponse
     */
    'total'?: number;
}
/**
 * 品目情報
 * @export
 * @interface ResponseProductType
 */
export interface ResponseProductType {
    /**
     * 商品種別ID
     * @type {string}
     * @memberof ResponseProductType
     */
    'categoryId'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseProductType
     */
    'createdAt'?: number;
    /**
     * アイコンURL
     * @type {string}
     * @memberof ResponseProductType
     */
    'iconUrl'?: string;
    /**
     * 品目ID
     * @type {string}
     * @memberof ResponseProductType
     */
    'id'?: string;
    /**
     * 品目名
     * @type {string}
     * @memberof ResponseProductType
     */
    'name'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseProductType
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseProductTypeResponse
 */
export interface ResponseProductTypeResponse {
    /**
     * 
     * @type {ResponseCategory}
     * @memberof ResponseProductTypeResponse
     */
    'category'?: ResponseCategory;
    /**
     * 
     * @type {ResponseProductType}
     * @memberof ResponseProductTypeResponse
     */
    'productType'?: ResponseProductType;
}
/**
 * 
 * @export
 * @interface ResponseProductTypesResponse
 */
export interface ResponseProductTypesResponse {
    /**
     * 商品種別一覧
     * @type {Array<ResponseCategory>}
     * @memberof ResponseProductTypesResponse
     */
    'categories'?: Array<ResponseCategory>;
    /**
     * 品目一覧
     * @type {Array<ResponseProductType>}
     * @memberof ResponseProductTypesResponse
     */
    'productTypes'?: Array<ResponseProductType>;
    /**
     * 品目合計数
     * @type {number}
     * @memberof ResponseProductTypesResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResponseProductsResponse
 */
export interface ResponseProductsResponse {
    /**
     * 商品種別一覧
     * @type {Array<ResponseCategory>}
     * @memberof ResponseProductsResponse
     */
    'categories'?: Array<ResponseCategory>;
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseProductsResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 生産者一覧
     * @type {Array<ResponseProducer>}
     * @memberof ResponseProductsResponse
     */
    'producers'?: Array<ResponseProducer>;
    /**
     * 商品タグ一覧
     * @type {Array<ResponseProductTag>}
     * @memberof ResponseProductsResponse
     */
    'productTags'?: Array<ResponseProductTag>;
    /**
     * 品目一覧
     * @type {Array<ResponseProductType>}
     * @memberof ResponseProductsResponse
     */
    'productTypes'?: Array<ResponseProductType>;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseProductsResponse
     */
    'products'?: Array<ResponseProduct>;
    /**
     * 商品合計数
     * @type {number}
     * @memberof ResponseProductsResponse
     */
    'total'?: number;
}
/**
 * プロモーション情報
 * @export
 * @interface ResponsePromotion
 */
export interface ResponsePromotion {
    /**
     * クーポンコード
     * @type {string}
     * @memberof ResponsePromotion
     */
    'code'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponsePromotion
     */
    'createdAt'?: number;
    /**
     * 詳細説明
     * @type {string}
     * @memberof ResponsePromotion
     */
    'description'?: string;
    /**
     * 割引額(%/円)
     * @type {number}
     * @memberof ResponsePromotion
     */
    'discountRate'?: number;
    /**
     * 割引計算方法
     * @type {number}
     * @memberof ResponsePromotion
     */
    'discountType'?: number;
    /**
     * クーポン使用可能日時(終了)
     * @type {number}
     * @memberof ResponsePromotion
     */
    'endAt'?: number;
    /**
     * プロモーションID
     * @type {string}
     * @memberof ResponsePromotion
     */
    'id'?: string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof ResponsePromotion
     */
    'public'?: boolean;
    /**
     * 店舗ID
     * @type {string}
     * @memberof ResponsePromotion
     */
    'shopId'?: string;
    /**
     * クーポン使用可能日時(開始)
     * @type {number}
     * @memberof ResponsePromotion
     */
    'startAt'?: number;
    /**
     * ステータス
     * @type {number}
     * @memberof ResponsePromotion
     */
    'status'?: number;
    /**
     * 対象商品
     * @type {number}
     * @memberof ResponsePromotion
     */
    'targetType'?: number;
    /**
     * タイトル
     * @type {string}
     * @memberof ResponsePromotion
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponsePromotion
     */
    'updatedAt'?: number;
    /**
     * 使用による割引合計額
     * @type {number}
     * @memberof ResponsePromotion
     */
    'usedAmount'?: number;
    /**
     * 使用回数
     * @type {number}
     * @memberof ResponsePromotion
     */
    'usedCount'?: number;
}
/**
 * 
 * @export
 * @interface ResponsePromotionResponse
 */
export interface ResponsePromotionResponse {
    /**
     * 
     * @type {ResponsePromotion}
     * @memberof ResponsePromotionResponse
     */
    'promotion'?: ResponsePromotion;
    /**
     * 
     * @type {ResponseShop}
     * @memberof ResponsePromotionResponse
     */
    'shop'?: ResponseShop;
}
/**
 * 
 * @export
 * @interface ResponsePromotionsResponse
 */
export interface ResponsePromotionsResponse {
    /**
     * プロモーション情報一覧
     * @type {Array<ResponsePromotion>}
     * @memberof ResponsePromotionsResponse
     */
    'promotions'?: Array<ResponsePromotion>;
    /**
     * 店舗情報一覧
     * @type {Array<ResponseShop>}
     * @memberof ResponsePromotionsResponse
     */
    'shops'?: Array<ResponseShop>;
    /**
     * プロモーション合計数
     * @type {number}
     * @memberof ResponsePromotionsResponse
     */
    'total'?: number;
}
/**
 * マルシェ開催情報
 * @export
 * @interface ResponseSchedule
 */
export interface ResponseSchedule {
    /**
     * 承認フラグ
     * @type {boolean}
     * @memberof ResponseSchedule
     */
    'approved'?: boolean;
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseSchedule
     */
    'coordinatorId'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseSchedule
     */
    'createdAt'?: number;
    /**
     * 説明
     * @type {string}
     * @memberof ResponseSchedule
     */
    'description'?: string;
    /**
     * 配信終了日時
     * @type {number}
     * @memberof ResponseSchedule
     */
    'endAt'?: number;
    /**
     * スケジュールID
     * @type {string}
     * @memberof ResponseSchedule
     */
    'id'?: string;
    /**
     * 蓋絵URL
     * @type {string}
     * @memberof ResponseSchedule
     */
    'imageUrl'?: string;
    /**
     * オープニング動画URL
     * @type {string}
     * @memberof ResponseSchedule
     */
    'openingVideoUrl'?: string;
    /**
     * 公開フラグ
     * @type {boolean}
     * @memberof ResponseSchedule
     */
    'public'?: boolean;
    /**
     * 店舗ID
     * @type {string}
     * @memberof ResponseSchedule
     */
    'shopId'?: string;
    /**
     * 配信開始日時
     * @type {number}
     * @memberof ResponseSchedule
     */
    'startAt'?: number;
    /**
     * 開催状況
     * @type {number}
     * @memberof ResponseSchedule
     */
    'status'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseSchedule
     */
    'thumbnailUrl'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof ResponseSchedule
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseSchedule
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseScheduleResponse
 */
export interface ResponseScheduleResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseScheduleResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseSchedule}
     * @memberof ResponseScheduleResponse
     */
    'schedule'?: ResponseSchedule;
}
/**
 * 
 * @export
 * @interface ResponseSchedulesResponse
 */
export interface ResponseSchedulesResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseSchedulesResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * マルシェ開催一覧
     * @type {Array<ResponseSchedule>}
     * @memberof ResponseSchedulesResponse
     */
    'schedules'?: Array<ResponseSchedule>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseSchedulesResponse
     */
    'total'?: number;
}
/**
 * 配送設定情報
 * @export
 * @interface ResponseShipping
 */
export interface ResponseShipping {
    /**
     * 箱サイズ60の追加（冷凍便）追加配送料(税込)
     * @type {number}
     * @memberof ResponseShipping
     */
    'box60Frozen'?: number;
    /**
     * 箱サイズ60の通常（常温・冷蔵便）配送料一覧
     * @type {Array<ResponseShippingRate>}
     * @memberof ResponseShipping
     */
    'box60Rates'?: Array<ResponseShippingRate>;
    /**
     * 箱サイズ80の追加（冷凍便）追加配送料(税込)
     * @type {number}
     * @memberof ResponseShipping
     */
    'box80Frozen'?: number;
    /**
     * 箱サイズ80の通常（常温・冷蔵便）配送料一覧
     * @type {Array<ResponseShippingRate>}
     * @memberof ResponseShipping
     */
    'box80Rates'?: Array<ResponseShippingRate>;
    /**
     * 箱サイズ100の追加（冷凍便）追加配送料(税込)
     * @type {number}
     * @memberof ResponseShipping
     */
    'box100Frozen'?: number;
    /**
     * 箱サイズ100の通常（常温・冷蔵便）配送料一覧
     * @type {Array<ResponseShippingRate>}
     * @memberof ResponseShipping
     */
    'box100Rates'?: Array<ResponseShippingRate>;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseShipping
     */
    'createdAt'?: number;
    /**
     * 送料無料になる金額(税込)
     * @type {number}
     * @memberof ResponseShipping
     */
    'freeShippingRates'?: number;
    /**
     * 送料無料オプションの有無
     * @type {boolean}
     * @memberof ResponseShipping
     */
    'hasFreeShipping'?: boolean;
    /**
     * 配送設定ID
     * @type {string}
     * @memberof ResponseShipping
     */
    'id'?: string;
    /**
     * デフォルト設定フラグ
     * @type {boolean}
     * @memberof ResponseShipping
     */
    'isDefault'?: boolean;
    /**
     * 配送設定名
     * @type {string}
     * @memberof ResponseShipping
     */
    'name'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseShipping
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseShippingRate
 */
export interface ResponseShippingRate {
    /**
     * 配送料金設定名
     * @type {string}
     * @memberof ResponseShippingRate
     */
    'name'?: string;
    /**
     * No.
     * @type {number}
     * @memberof ResponseShippingRate
     */
    'number'?: number;
    /**
     * 対象都道府県一覧
     * @type {Array<number>}
     * @memberof ResponseShippingRate
     */
    'prefectureCodes'?: Array<number>;
    /**
     * 配送料金(税込)
     * @type {number}
     * @memberof ResponseShippingRate
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ResponseShippingResponse
 */
export interface ResponseShippingResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseShippingResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseShipping}
     * @memberof ResponseShippingResponse
     */
    'shipping'?: ResponseShipping;
}
/**
 * 
 * @export
 * @interface ResponseShippingsResponse
 */
export interface ResponseShippingsResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseShippingsResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 配送設定一覧
     * @type {Array<ResponseShipping>}
     * @memberof ResponseShippingsResponse
     */
    'shippings'?: Array<ResponseShipping>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseShippingsResponse
     */
    'total'?: number;
}
/**
 * 店舗情報
 * @export
 * @interface ResponseShop
 */
export interface ResponseShop {
    /**
     * 営業曜日(発送可能日)
     * @type {Array<number>}
     * @memberof ResponseShop
     */
    'businessDays'?: Array<number>;
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseShop
     */
    'coordinatorId'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseShop
     */
    'createdAt'?: number;
    /**
     * 店舗ID
     * @type {string}
     * @memberof ResponseShop
     */
    'id'?: string;
    /**
     * 店舗名
     * @type {string}
     * @memberof ResponseShop
     */
    'name'?: string;
    /**
     * 生産者ID一覧
     * @type {Array<string>}
     * @memberof ResponseShop
     */
    'producerIds'?: Array<string>;
    /**
     * 取り扱い品目一覧
     * @type {Array<string>}
     * @memberof ResponseShop
     */
    'productTypeIds'?: Array<string>;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseShop
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseShopResponse
 */
export interface ResponseShopResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseShopResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 生産者一覧
     * @type {Array<ResponseProducer>}
     * @memberof ResponseShopResponse
     */
    'producers'?: Array<ResponseProducer>;
    /**
     * 品目一覧
     * @type {Array<ResponseProductType>}
     * @memberof ResponseShopResponse
     */
    'productTypes'?: Array<ResponseProductType>;
    /**
     * 
     * @type {ResponseShop}
     * @memberof ResponseShopResponse
     */
    'shop'?: ResponseShop;
}
/**
 * スポット情報
 * @export
 * @interface ResponseSpot
 */
export interface ResponseSpot {
    /**
     * 承認フラグ
     * @type {boolean}
     * @memberof ResponseSpot
     */
    'approved'?: boolean;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseSpot
     */
    'createdAt'?: number;
    /**
     * 説明
     * @type {string}
     * @memberof ResponseSpot
     */
    'description'?: string;
    /**
     * スポットID
     * @type {string}
     * @memberof ResponseSpot
     */
    'id'?: string;
    /**
     * 座標情報:緯度
     * @type {number}
     * @memberof ResponseSpot
     */
    'latitude'?: number;
    /**
     * 座標情報:経度
     * @type {number}
     * @memberof ResponseSpot
     */
    'longitude'?: number;
    /**
     * スポット名
     * @type {string}
     * @memberof ResponseSpot
     */
    'name'?: string;
    /**
     * スポット種別ID
     * @type {string}
     * @memberof ResponseSpot
     */
    'spotTypeId'?: string;
    /**
     * サムネイル画像URL
     * @type {string}
     * @memberof ResponseSpot
     */
    'thumbnailUrl'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseSpot
     */
    'updatedAt'?: number;
    /**
     * ユーザーID
     * @type {string}
     * @memberof ResponseSpot
     */
    'userId'?: string;
    /**
     * 投稿者の種別
     * @type {number}
     * @memberof ResponseSpot
     */
    'userType'?: number;
}
/**
 * 
 * @export
 * @interface ResponseSpotResponse
 */
export interface ResponseSpotResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseSpotResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 
     * @type {ResponseProducer}
     * @memberof ResponseSpotResponse
     */
    'producer'?: ResponseProducer;
    /**
     * 
     * @type {ResponseSpot}
     * @memberof ResponseSpotResponse
     */
    'spot'?: ResponseSpot;
    /**
     * 
     * @type {ResponseSpotType}
     * @memberof ResponseSpotResponse
     */
    'spotType'?: ResponseSpotType;
    /**
     * 
     * @type {ResponseUser}
     * @memberof ResponseSpotResponse
     */
    'user'?: ResponseUser;
}
/**
 * スポット種別情報
 * @export
 * @interface ResponseSpotType
 */
export interface ResponseSpotType {
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseSpotType
     */
    'createdAt'?: number;
    /**
     * スポット種別ID
     * @type {string}
     * @memberof ResponseSpotType
     */
    'id'?: string;
    /**
     * スポット種別名
     * @type {string}
     * @memberof ResponseSpotType
     */
    'name'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseSpotType
     */
    'updatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ResponseSpotTypeResponse
 */
export interface ResponseSpotTypeResponse {
    /**
     * 
     * @type {ResponseSpotType}
     * @memberof ResponseSpotTypeResponse
     */
    'spotType'?: ResponseSpotType;
}
/**
 * 
 * @export
 * @interface ResponseSpotTypesResponse
 */
export interface ResponseSpotTypesResponse {
    /**
     * 体験種別一覧
     * @type {Array<ResponseSpotType>}
     * @memberof ResponseSpotTypesResponse
     */
    'spotTypes'?: Array<ResponseSpotType>;
    /**
     * 体験種別合計数
     * @type {number}
     * @memberof ResponseSpotTypesResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResponseSpotsResponse
 */
export interface ResponseSpotsResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseSpotsResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 生産者一覧
     * @type {Array<ResponseProducer>}
     * @memberof ResponseSpotsResponse
     */
    'producers'?: Array<ResponseProducer>;
    /**
     * スポット種別一覧
     * @type {Array<ResponseSpotType>}
     * @memberof ResponseSpotsResponse
     */
    'spotTypes'?: Array<ResponseSpotType>;
    /**
     * スポット一覧
     * @type {Array<ResponseSpot>}
     * @memberof ResponseSpotsResponse
     */
    'spots'?: Array<ResponseSpot>;
    /**
     * 合計数
     * @type {number}
     * @memberof ResponseSpotsResponse
     */
    'total'?: number;
    /**
     * ユーザ一覧
     * @type {Array<ResponseUser>}
     * @memberof ResponseSpotsResponse
     */
    'users'?: Array<ResponseUser>;
}
/**
 * お問い合わせ会話履歴
 * @export
 * @interface ResponseThread
 */
export interface ResponseThread {
    /**
     * お問い合わせID
     * @type {string}
     * @memberof ResponseThread
     */
    'contactId'?: string;
    /**
     * 会話内容
     * @type {string}
     * @memberof ResponseThread
     */
    'content'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseThread
     */
    'createdAt'?: number;
    /**
     * お問い合わせ会話履歴ID
     * @type {string}
     * @memberof ResponseThread
     */
    'id'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseThread
     */
    'updatedAt'?: number;
    /**
     * 送信者ID
     * @type {string}
     * @memberof ResponseThread
     */
    'userId'?: string;
    /**
     * 送信者タイプ
     * @type {number}
     * @memberof ResponseThread
     */
    'userType'?: number;
}
/**
 * 
 * @export
 * @interface ResponseThreadResponse
 */
export interface ResponseThreadResponse {
    /**
     * 
     * @type {ResponseAdmin}
     * @memberof ResponseThreadResponse
     */
    'admin'?: ResponseAdmin;
    /**
     * 
     * @type {ResponseThread}
     * @memberof ResponseThreadResponse
     */
    'thread'?: ResponseThread;
    /**
     * 
     * @type {ResponseUser}
     * @memberof ResponseThreadResponse
     */
    'user'?: ResponseUser;
}
/**
 * 
 * @export
 * @interface ResponseThreadsResponse
 */
export interface ResponseThreadsResponse {
    /**
     * 送信者一覧
     * @type {Array<ResponseAdmin>}
     * @memberof ResponseThreadsResponse
     */
    'admins'?: Array<ResponseAdmin>;
    /**
     * お問い合わせ会話履歴一覧
     * @type {Array<ResponseThread>}
     * @memberof ResponseThreadsResponse
     */
    'threads'?: Array<ResponseThread>;
    /**
     * 会話履歴合計
     * @type {number}
     * @memberof ResponseThreadsResponse
     */
    'total'?: number;
    /**
     * 送信者一覧
     * @type {Array<ResponseUser>}
     * @memberof ResponseThreadsResponse
     */
    'users'?: Array<ResponseUser>;
}
/**
 * 
 * @export
 * @interface ResponseTopOrderPayment
 */
export interface ResponseTopOrderPayment {
    /**
     * 注文数
     * @type {number}
     * @memberof ResponseTopOrderPayment
     */
    'orderCount'?: number;
    /**
     * 支払い方法
     * @type {number}
     * @memberof ResponseTopOrderPayment
     */
    'paymentMethodType'?: number;
    /**
     * 割合（支払い方法別注文数 / 注文数）
     * @type {number}
     * @memberof ResponseTopOrderPayment
     */
    'rate'?: number;
    /**
     * 売上合計
     * @type {number}
     * @memberof ResponseTopOrderPayment
     */
    'salesTotal'?: number;
    /**
     * ユーザー数
     * @type {number}
     * @memberof ResponseTopOrderPayment
     */
    'userCount'?: number;
}
/**
 * 
 * @export
 * @interface ResponseTopOrderSalesTrend
 */
export interface ResponseTopOrderSalesTrend {
    /**
     * 期間
     * @type {string}
     * @memberof ResponseTopOrderSalesTrend
     */
    'period'?: string;
    /**
     * 売上合計
     * @type {number}
     * @memberof ResponseTopOrderSalesTrend
     */
    'salesTotal'?: number;
}
/**
 * 注文数
 * @export
 * @interface ResponseTopOrderValue
 */
export interface ResponseTopOrderValue {
    /**
     * 比較値（％：前日比など）
     * @type {number}
     * @memberof ResponseTopOrderValue
     */
    'comparison'?: number;
    /**
     * 値
     * @type {number}
     * @memberof ResponseTopOrderValue
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface ResponseTopOrdersResponse
 */
export interface ResponseTopOrdersResponse {
    /**
     * 終了日時
     * @type {number}
     * @memberof ResponseTopOrdersResponse
     */
    'endAt'?: number;
    /**
     * 
     * @type {ResponseTopOrderValue}
     * @memberof ResponseTopOrdersResponse
     */
    'orders'?: ResponseTopOrderValue;
    /**
     * 支払い方法別情報
     * @type {Array<ResponseTopOrderPayment>}
     * @memberof ResponseTopOrdersResponse
     */
    'payments'?: Array<ResponseTopOrderPayment>;
    /**
     * 期間種別
     * @type {string}
     * @memberof ResponseTopOrdersResponse
     */
    'periodType'?: string;
    /**
     * 
     * @type {ResponseTopOrderValue}
     * @memberof ResponseTopOrdersResponse
     */
    'sales'?: ResponseTopOrderValue;
    /**
     * 売上推移（グラフ描画用）
     * @type {Array<ResponseTopOrderSalesTrend>}
     * @memberof ResponseTopOrdersResponse
     */
    'salesTrends'?: Array<ResponseTopOrderSalesTrend>;
    /**
     * 開始日時
     * @type {number}
     * @memberof ResponseTopOrdersResponse
     */
    'startAt'?: number;
    /**
     * 
     * @type {ResponseTopOrderValue}
     * @memberof ResponseTopOrdersResponse
     */
    'users'?: ResponseTopOrderValue;
}
/**
 * 
 * @export
 * @interface ResponseUploadStateResponse
 */
export interface ResponseUploadStateResponse {
    /**
     * アップロード結果
     * @type {number}
     * @memberof ResponseUploadStateResponse
     */
    'status'?: number;
    /**
     * 参照先URL
     * @type {string}
     * @memberof ResponseUploadStateResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ResponseUploadURLResponse
 */
export interface ResponseUploadURLResponse {
    /**
     * アップロード後の状態参照用キー
     * @type {string}
     * @memberof ResponseUploadURLResponse
     */
    'key'?: string;
    /**
     * アップロード用の署名付きURL
     * @type {string}
     * @memberof ResponseUploadURLResponse
     */
    'url'?: string;
}
/**
 * ユーザー情報
 * @export
 * @interface ResponseUser
 */
export interface ResponseUser {
    /**
     * ユーザー名（検索用）
     * @type {string}
     * @memberof ResponseUser
     */
    'accountId'?: string;
    /**
     * 登録日時
     * @type {number}
     * @memberof ResponseUser
     */
    'createdAt'?: number;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseUser
     */
    'email'?: string;
    /**
     * 氏名（名）
     * @type {string}
     * @memberof ResponseUser
     */
    'firstname'?: string;
    /**
     * 氏名(名:かな)
     * @type {string}
     * @memberof ResponseUser
     */
    'firstnameKana'?: string;
    /**
     * 購入者ID
     * @type {string}
     * @memberof ResponseUser
     */
    'id'?: string;
    /**
     * 氏名（姓）
     * @type {string}
     * @memberof ResponseUser
     */
    'lastname'?: string;
    /**
     * 氏名(姓:かな)
     * @type {string}
     * @memberof ResponseUser
     */
    'lastnameKana'?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof ResponseUser
     */
    'phoneNumber'?: string;
    /**
     * 会員登録フラグ
     * @type {boolean}
     * @memberof ResponseUser
     */
    'registered'?: boolean;
    /**
     * 購入者ステータス
     * @type {number}
     * @memberof ResponseUser
     */
    'status'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseUser
     */
    'thumbnailUrl'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseUser
     */
    'updateAt'?: number;
    /**
     * ユーザー名（表示名）
     * @type {string}
     * @memberof ResponseUser
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseUserOrder
 */
export interface ResponseUserOrder {
    /**
     * 注文情報ID
     * @type {string}
     * @memberof ResponseUserOrder
     */
    'orderId'?: string;
    /**
     * 注文日時
     * @type {number}
     * @memberof ResponseUserOrder
     */
    'orderedAt'?: number;
    /**
     * 支払日時
     * @type {number}
     * @memberof ResponseUserOrder
     */
    'paidAt'?: number;
    /**
     * 支払い状況
     * @type {number}
     * @memberof ResponseUserOrder
     */
    'status'?: number;
    /**
     * 商品合計金額
     * @type {number}
     * @memberof ResponseUserOrder
     */
    'subtotal'?: number;
    /**
     * 支払い合計金額
     * @type {number}
     * @memberof ResponseUserOrder
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResponseUserOrdersResponse
 */
export interface ResponseUserOrdersResponse {
    /**
     * 注文合計回数
     * @type {number}
     * @memberof ResponseUserOrdersResponse
     */
    'orderTotalCount'?: number;
    /**
     * 注文履歴一覧
     * @type {Array<ResponseUserOrder>}
     * @memberof ResponseUserOrdersResponse
     */
    'orders'?: Array<ResponseUserOrder>;
    /**
     * 支払い合計金額
     * @type {number}
     * @memberof ResponseUserOrdersResponse
     */
    'paymentTotalAmount'?: number;
    /**
     * 支払い合計回数
     * @type {number}
     * @memberof ResponseUserOrdersResponse
     */
    'paymentTotalCount'?: number;
    /**
     * 購入商品合計金額
     * @type {number}
     * @memberof ResponseUserOrdersResponse
     */
    'productTotalAmount'?: number;
}
/**
 * 
 * @export
 * @interface ResponseUserResponse
 */
export interface ResponseUserResponse {
    /**
     * 
     * @type {ResponseAddress}
     * @memberof ResponseUserResponse
     */
    'address'?: ResponseAddress;
    /**
     * 
     * @type {ResponseUser}
     * @memberof ResponseUserResponse
     */
    'user'?: ResponseUser;
}
/**
 * 
 * @export
 * @interface ResponseUserToList
 */
export interface ResponseUserToList {
    /**
     * 市区町村
     * @type {string}
     * @memberof ResponseUserToList
     */
    'city'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResponseUserToList
     */
    'email'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ResponseUserToList
     */
    'firstname'?: string;
    /**
     * 購入者ID
     * @type {string}
     * @memberof ResponseUserToList
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ResponseUserToList
     */
    'lastname'?: string;
    /**
     * 支払い回数
     * @type {number}
     * @memberof ResponseUserToList
     */
    'paymentTotalCount'?: number;
    /**
     * 都道府県
     * @type {number}
     * @memberof ResponseUserToList
     */
    'prefectureCode'?: number;
    /**
     * 会員登録フラグ
     * @type {boolean}
     * @memberof ResponseUserToList
     */
    'registered'?: boolean;
    /**
     * 購入者ステータス
     * @type {number}
     * @memberof ResponseUserToList
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface ResponseUsersResponse
 */
export interface ResponseUsersResponse {
    /**
     * 購入者合計数
     * @type {number}
     * @memberof ResponseUsersResponse
     */
    'total'?: number;
    /**
     * 購入者一覧
     * @type {Array<ResponseUserToList>}
     * @memberof ResponseUsersResponse
     */
    'users'?: Array<ResponseUserToList>;
}
/**
 * オンデマンド動画情報
 * @export
 * @interface ResponseVideo
 */
export interface ResponseVideo {
    /**
     * コーディネータID
     * @type {string}
     * @memberof ResponseVideo
     */
    'coordinatorId'?: string;
    /**
     * 作成日時
     * @type {number}
     * @memberof ResponseVideo
     */
    'createdAt'?: number;
    /**
     * 説明
     * @type {string}
     * @memberof ResponseVideo
     */
    'description'?: string;
    /**
     * 体験への表示設定
     * @type {boolean}
     * @memberof ResponseVideo
     */
    'displayExperience'?: boolean;
    /**
     * 商品への表示設定
     * @type {boolean}
     * @memberof ResponseVideo
     */
    'displayProduct'?: boolean;
    /**
     * 体験ID一覧
     * @type {Array<string>}
     * @memberof ResponseVideo
     */
    'experienceIds'?: Array<string>;
    /**
     * オンデマンド動画ID
     * @type {string}
     * @memberof ResponseVideo
     */
    'id'?: string;
    /**
     * 限定公開設定
     * @type {boolean}
     * @memberof ResponseVideo
     */
    'limited'?: boolean;
    /**
     * 商品ID一覧
     * @type {Array<string>}
     * @memberof ResponseVideo
     */
    'productIds'?: Array<string>;
    /**
     * 公開設定
     * @type {boolean}
     * @memberof ResponseVideo
     */
    'public'?: boolean;
    /**
     * 公開日時
     * @type {number}
     * @memberof ResponseVideo
     */
    'publishedAt'?: number;
    /**
     * 配信状況
     * @type {number}
     * @memberof ResponseVideo
     */
    'status'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseVideo
     */
    'thumbnailUrl'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof ResponseVideo
     */
    'title'?: string;
    /**
     * 更新日時
     * @type {number}
     * @memberof ResponseVideo
     */
    'updatedAt'?: number;
    /**
     * 動画URL
     * @type {string}
     * @memberof ResponseVideo
     */
    'videoUrl'?: string;
}
/**
 * 
 * @export
 * @interface ResponseVideoComment
 */
export interface ResponseVideoComment {
    /**
     * アカウントID
     * @type {string}
     * @memberof ResponseVideoComment
     */
    'accountId'?: string;
    /**
     * コメント
     * @type {string}
     * @memberof ResponseVideoComment
     */
    'comment'?: string;
    /**
     * コメント無効フラグ
     * @type {boolean}
     * @memberof ResponseVideoComment
     */
    'disabled'?: boolean;
    /**
     * コメントID
     * @type {string}
     * @memberof ResponseVideoComment
     */
    'id'?: string;
    /**
     * 投稿日時
     * @type {number}
     * @memberof ResponseVideoComment
     */
    'publishedAt'?: number;
    /**
     * サムネイルURL
     * @type {string}
     * @memberof ResponseVideoComment
     */
    'thumbnailUrl'?: string;
    /**
     * ユーザーID
     * @type {string}
     * @memberof ResponseVideoComment
     */
    'userId'?: string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof ResponseVideoComment
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ResponseVideoCommentsResponse
 */
export interface ResponseVideoCommentsResponse {
    /**
     * コメント一覧
     * @type {Array<ResponseVideoComment>}
     * @memberof ResponseVideoCommentsResponse
     */
    'comments'?: Array<ResponseVideoComment>;
    /**
     * 次の取得開始位置
     * @type {string}
     * @memberof ResponseVideoCommentsResponse
     */
    'nextToken'?: string;
}
/**
 * 
 * @export
 * @interface ResponseVideoResponse
 */
export interface ResponseVideoResponse {
    /**
     * 
     * @type {ResponseCoordinator}
     * @memberof ResponseVideoResponse
     */
    'coordinator'?: ResponseCoordinator;
    /**
     * 体験一覧
     * @type {Array<ResponseExperience>}
     * @memberof ResponseVideoResponse
     */
    'experiences'?: Array<ResponseExperience>;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseVideoResponse
     */
    'products'?: Array<ResponseProduct>;
    /**
     * 
     * @type {ResponseVideo}
     * @memberof ResponseVideoResponse
     */
    'video'?: ResponseVideo;
}
/**
 * 
 * @export
 * @interface ResponseVideoViewerLog
 */
export interface ResponseVideoViewerLog {
    /**
     * 集計終了日時
     * @type {number}
     * @memberof ResponseVideoViewerLog
     */
    'endAt'?: number;
    /**
     * 集計開始日時
     * @type {number}
     * @memberof ResponseVideoViewerLog
     */
    'startAt'?: number;
    /**
     * 合計視聴者数
     * @type {number}
     * @memberof ResponseVideoViewerLog
     */
    'total'?: number;
    /**
     * オンデマンド動画ID
     * @type {string}
     * @memberof ResponseVideoViewerLog
     */
    'videoId'?: string;
}
/**
 * 
 * @export
 * @interface ResponseVideosResponse
 */
export interface ResponseVideosResponse {
    /**
     * コーディネータ一覧
     * @type {Array<ResponseCoordinator>}
     * @memberof ResponseVideosResponse
     */
    'coordinators'?: Array<ResponseCoordinator>;
    /**
     * 体験一覧
     * @type {Array<ResponseExperience>}
     * @memberof ResponseVideosResponse
     */
    'experiences'?: Array<ResponseExperience>;
    /**
     * 商品一覧
     * @type {Array<ResponseProduct>}
     * @memberof ResponseVideosResponse
     */
    'products'?: Array<ResponseProduct>;
    /**
     * オンデマンド動画合計数
     * @type {number}
     * @memberof ResponseVideosResponse
     */
    'total'?: number;
    /**
     * オンデマンド動画一覧
     * @type {Array<ResponseVideo>}
     * @memberof ResponseVideosResponse
     */
    'videos'?: Array<ResponseVideo>;
}
/**
 * 
 * @export
 * @interface UtilErrorResponse
 */
export interface UtilErrorResponse {
    /**
     * エラー詳細
     * @type {string}
     * @memberof UtilErrorResponse
     */
    'detail'?: string;
    /**
     * エラー概要
     * @type {string}
     * @memberof UtilErrorResponse
     */
    'message'?: string;
    /**
     * ステータスコード
     * @type {number}
     * @memberof UtilErrorResponse
     */
    'status'?: number;
}

/**
 * AdministratorApi - axios parameter creator
 * @export
 */
export const AdministratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * システム管理者を削除します。
         * @summary システム管理者退会
         * @param {string} adminId システム管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdDelete: async (adminId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdDelete', 'adminId', adminId)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * システム管理者のメールアドレスを更新します。
         * @summary システム管理者メールアドレス更新
         * @param {string} adminId システム管理者ID
         * @param {RequestUpdateAdministratorEmailRequest} requestUpdateAdministratorEmailRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdEmailPatch: async (adminId: string, requestUpdateAdministratorEmailRequest: RequestUpdateAdministratorEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdEmailPatch', 'adminId', adminId)
            // verify required parameter 'requestUpdateAdministratorEmailRequest' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdEmailPatch', 'requestUpdateAdministratorEmailRequest', requestUpdateAdministratorEmailRequest)
            const localVarPath = `/v1/administrators/{adminId}/email`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateAdministratorEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * システム管理者の詳細情報を取得します。
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdGet: async (adminId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdGet', 'adminId', adminId)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * システム管理者のパスワードをランダムに生成して更新します。
         * @summary システム管理者パスワード更新(ランダム生成)
         * @param {string} adminId システム管理者ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdPasswordPatch: async (adminId: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdPasswordPatch', 'adminId', adminId)
            const localVarPath = `/v1/administrators/{adminId}/password`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * システム管理者の情報を更新します。
         * @summary システム管理者更新
         * @param {string} adminId システム管理者ID
         * @param {RequestUpdateAdministratorRequest} requestUpdateAdministratorRequest システム管理者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdPatch: async (adminId: string, requestUpdateAdministratorRequest: RequestUpdateAdministratorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdPatch', 'adminId', adminId)
            // verify required parameter 'requestUpdateAdministratorRequest' is not null or undefined
            assertParamExists('v1AdministratorsAdminIdPatch', 'requestUpdateAdministratorRequest', requestUpdateAdministratorRequest)
            const localVarPath = `/v1/administrators/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateAdministratorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * システム管理者の一覧を取得します。
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいシステム管理者を登録します。
         * @summary システム管理者登録
         * @param {RequestCreateAdministratorRequest} requestCreateAdministratorRequest システム管理者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsPost: async (requestCreateAdministratorRequest: RequestCreateAdministratorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateAdministratorRequest' is not null or undefined
            assertParamExists('v1AdministratorsPost', 'requestCreateAdministratorRequest', requestCreateAdministratorRequest)
            const localVarPath = `/v1/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateAdministratorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdministratorApi - functional programming interface
 * @export
 */
export const AdministratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdministratorApiAxiosParamCreator(configuration)
    return {
        /**
         * システム管理者を削除します。
         * @summary システム管理者退会
         * @param {string} adminId システム管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsAdminIdDelete(adminId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsAdminIdDelete(adminId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsAdminIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * システム管理者のメールアドレスを更新します。
         * @summary システム管理者メールアドレス更新
         * @param {string} adminId システム管理者ID
         * @param {RequestUpdateAdministratorEmailRequest} requestUpdateAdministratorEmailRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsAdminIdEmailPatch(adminId: string, requestUpdateAdministratorEmailRequest: RequestUpdateAdministratorEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsAdminIdEmailPatch(adminId, requestUpdateAdministratorEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsAdminIdEmailPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * システム管理者の詳細情報を取得します。
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsAdminIdGet(adminId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAdministratorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsAdminIdGet(adminId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsAdminIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * システム管理者のパスワードをランダムに生成して更新します。
         * @summary システム管理者パスワード更新(ランダム生成)
         * @param {string} adminId システム管理者ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsAdminIdPasswordPatch(adminId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsAdminIdPasswordPatch(adminId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsAdminIdPasswordPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * システム管理者の情報を更新します。
         * @summary システム管理者更新
         * @param {string} adminId システム管理者ID
         * @param {RequestUpdateAdministratorRequest} requestUpdateAdministratorRequest システム管理者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsAdminIdPatch(adminId: string, requestUpdateAdministratorRequest: RequestUpdateAdministratorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsAdminIdPatch(adminId, requestUpdateAdministratorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsAdminIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * システム管理者の一覧を取得します。
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAdministratorsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいシステム管理者を登録します。
         * @summary システム管理者登録
         * @param {RequestCreateAdministratorRequest} requestCreateAdministratorRequest システム管理者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdministratorsPost(requestCreateAdministratorRequest: RequestCreateAdministratorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAdministratorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdministratorsPost(requestCreateAdministratorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdministratorApi.v1AdministratorsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdministratorApi - factory interface
 * @export
 */
export const AdministratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdministratorApiFp(configuration)
    return {
        /**
         * システム管理者を削除します。
         * @summary システム管理者退会
         * @param {string} adminId システム管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdDelete(adminId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AdministratorsAdminIdDelete(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * システム管理者のメールアドレスを更新します。
         * @summary システム管理者メールアドレス更新
         * @param {string} adminId システム管理者ID
         * @param {RequestUpdateAdministratorEmailRequest} requestUpdateAdministratorEmailRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdEmailPatch(adminId: string, requestUpdateAdministratorEmailRequest: RequestUpdateAdministratorEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AdministratorsAdminIdEmailPatch(adminId, requestUpdateAdministratorEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * システム管理者の詳細情報を取得します。
         * @summary システム管理者取得
         * @param {string} adminId 管理者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdGet(adminId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAdministratorResponse> {
            return localVarFp.v1AdministratorsAdminIdGet(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * システム管理者のパスワードをランダムに生成して更新します。
         * @summary システム管理者パスワード更新(ランダム生成)
         * @param {string} adminId システム管理者ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdPasswordPatch(adminId: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AdministratorsAdminIdPasswordPatch(adminId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * システム管理者の情報を更新します。
         * @summary システム管理者更新
         * @param {string} adminId システム管理者ID
         * @param {RequestUpdateAdministratorRequest} requestUpdateAdministratorRequest システム管理者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsAdminIdPatch(adminId: string, requestUpdateAdministratorRequest: RequestUpdateAdministratorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AdministratorsAdminIdPatch(adminId, requestUpdateAdministratorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * システム管理者の一覧を取得します。
         * @summary システム管理者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAdministratorsResponse> {
            return localVarFp.v1AdministratorsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいシステム管理者を登録します。
         * @summary システム管理者登録
         * @param {RequestCreateAdministratorRequest} requestCreateAdministratorRequest システム管理者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdministratorsPost(requestCreateAdministratorRequest: RequestCreateAdministratorRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAdministratorResponse> {
            return localVarFp.v1AdministratorsPost(requestCreateAdministratorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdministratorApi - object-oriented interface
 * @export
 * @class AdministratorApi
 * @extends {BaseAPI}
 */
export class AdministratorApi extends BaseAPI {
    /**
     * システム管理者を削除します。
     * @summary システム管理者退会
     * @param {string} adminId システム管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsAdminIdDelete(adminId: string, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsAdminIdDelete(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * システム管理者のメールアドレスを更新します。
     * @summary システム管理者メールアドレス更新
     * @param {string} adminId システム管理者ID
     * @param {RequestUpdateAdministratorEmailRequest} requestUpdateAdministratorEmailRequest メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsAdminIdEmailPatch(adminId: string, requestUpdateAdministratorEmailRequest: RequestUpdateAdministratorEmailRequest, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsAdminIdEmailPatch(adminId, requestUpdateAdministratorEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * システム管理者の詳細情報を取得します。
     * @summary システム管理者取得
     * @param {string} adminId 管理者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsAdminIdGet(adminId: string, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsAdminIdGet(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * システム管理者のパスワードをランダムに生成して更新します。
     * @summary システム管理者パスワード更新(ランダム生成)
     * @param {string} adminId システム管理者ID
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsAdminIdPasswordPatch(adminId: string, body?: object, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsAdminIdPasswordPatch(adminId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * システム管理者の情報を更新します。
     * @summary システム管理者更新
     * @param {string} adminId システム管理者ID
     * @param {RequestUpdateAdministratorRequest} requestUpdateAdministratorRequest システム管理者情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsAdminIdPatch(adminId: string, requestUpdateAdministratorRequest: RequestUpdateAdministratorRequest, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsAdminIdPatch(adminId, requestUpdateAdministratorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * システム管理者の一覧を取得します。
     * @summary システム管理者一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいシステム管理者を登録します。
     * @summary システム管理者登録
     * @param {RequestCreateAdministratorRequest} requestCreateAdministratorRequest システム管理者情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public v1AdministratorsPost(requestCreateAdministratorRequest: RequestCreateAdministratorRequest, options?: RawAxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).v1AdministratorsPost(requestCreateAdministratorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン中のコーディネータの詳細情報を取得します。
         * @summary 自身のコーディネータ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/coordinator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中のコーディネータの情報を更新します。
         * @summary 自身のコーディネータ情報更新
         * @param {RequestUpdateCoordinatorRequest} requestUpdateCoordinatorRequest コーディネータ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorPatch: async (requestUpdateCoordinatorRequest: RequestUpdateCoordinatorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestUpdateCoordinatorRequest' is not null or undefined
            assertParamExists('v1AuthCoordinatorPatch', 'requestUpdateCoordinatorRequest', requestUpdateCoordinatorRequest)
            const localVarPath = `/v1/auth/coordinator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateCoordinatorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中のコーディネータの配送設定を取得します。
         * @summary 自身の配送設定取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorShippingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/coordinator/shippings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中のコーディネータの配送設定を更新します。
         * @summary 自身の配送設定更新
         * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorShippingsPatch: async (requestUpsertShippingRequest: RequestUpsertShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestUpsertShippingRequest' is not null or undefined
            assertParamExists('v1AuthCoordinatorShippingsPatch', 'requestUpsertShippingRequest', requestUpsertShippingRequest)
            const localVarPath = `/v1/auth/coordinator/shippings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpsertShippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サインアウトします。
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プッシュ通知用のデバイストークンを登録します。
         * @summary デバイストークン登録
         * @param {RequestRegisterAuthDeviceRequest} requestRegisterAuthDeviceRequest デバイストークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthDevicePost: async (requestRegisterAuthDeviceRequest: RequestRegisterAuthDeviceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestRegisterAuthDeviceRequest' is not null or undefined
            assertParamExists('v1AuthDevicePost', 'requestRegisterAuthDeviceRequest', requestRegisterAuthDeviceRequest)
            const localVarPath = `/v1/auth/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestRegisterAuthDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中のユーザーのメールアドレスを更新します。
         * @summary メールアドレス更新
         * @param {RequestUpdateAuthEmailRequest} requestUpdateAuthEmailRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthEmailPatch: async (requestUpdateAuthEmailRequest: RequestUpdateAuthEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestUpdateAuthEmailRequest' is not null or undefined
            assertParamExists('v1AuthEmailPatch', 'requestUpdateAuthEmailRequest', requestUpdateAuthEmailRequest)
            const localVarPath = `/v1/auth/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateAuthEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールアドレス更新用の検証コードを確認します。
         * @summary メールアドレス更新 - コード検証
         * @param {RequestVerifyAuthEmailRequest} requestVerifyAuthEmailRequest 検証コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthEmailVerifiedPost: async (requestVerifyAuthEmailRequest: RequestVerifyAuthEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestVerifyAuthEmailRequest' is not null or undefined
            assertParamExists('v1AuthEmailVerifiedPost', 'requestVerifyAuthEmailRequest', requestVerifyAuthEmailRequest)
            const localVarPath = `/v1/auth/email/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestVerifyAuthEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パスワードリセット用のメールを送信します。
         * @summary パスワードリセット
         * @param {RequestForgotAuthPasswordRequest} requestForgotAuthPasswordRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthForgotPasswordPost: async (requestForgotAuthPasswordRequest: RequestForgotAuthPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestForgotAuthPasswordRequest' is not null or undefined
            assertParamExists('v1AuthForgotPasswordPost', 'requestForgotAuthPasswordRequest', requestForgotAuthPasswordRequest)
            const localVarPath = `/v1/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestForgotAuthPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パスワードリセット用の検証コードを確認し、新しいパスワードを設定します。
         * @summary パスワードリセット - コード検証
         * @param {RequestResetAuthPasswordRequest} requestResetAuthPasswordRequest パスワードリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthForgotPasswordVerifiedPost: async (requestResetAuthPasswordRequest: RequestResetAuthPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestResetAuthPasswordRequest' is not null or undefined
            assertParamExists('v1AuthForgotPasswordVerifiedPost', 'requestResetAuthPasswordRequest', requestResetAuthPasswordRequest)
            const localVarPath = `/v1/auth/forgot-password/verified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestResetAuthPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証トークンを検証し、認証情報を取得します。
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Googleアカウント連携用の認証URLを発行します。
         * @summary Google認証用URLの発行
         * @param {string} state CSRF対策用のstate
         * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGoogleGet: async (state: string, redirectUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('v1AuthGoogleGet', 'state', state)
            const localVarPath = `/v1/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Googleアカウントを連携します。
         * @summary Googleアカウントの連携
         * @param {RequestConnectGoogleAccountRequest} requestConnectGoogleAccountRequest 連携リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGooglePost: async (requestConnectGoogleAccountRequest: RequestConnectGoogleAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestConnectGoogleAccountRequest' is not null or undefined
            assertParamExists('v1AuthGooglePost', 'requestConnectGoogleAccountRequest', requestConnectGoogleAccountRequest)
            const localVarPath = `/v1/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestConnectGoogleAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * LINEアカウント連携用の認証URLを発行します。
         * @summary LINE認証用URLの発行
         * @param {string} state CSRF対策用のstate
         * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLineGet: async (state: string, redirectUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('v1AuthLineGet', 'state', state)
            const localVarPath = `/v1/auth/line`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * LINEアカウントを連携します。
         * @summary LINEアカウントの連携
         * @param {RequestConnectLINEAccountRequest} requestConnectLINEAccountRequest 連携リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLinePost: async (requestConnectLINEAccountRequest: RequestConnectLINEAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestConnectLINEAccountRequest' is not null or undefined
            assertParamExists('v1AuthLinePost', 'requestConnectLINEAccountRequest', requestConnectLINEAccountRequest)
            const localVarPath = `/v1/auth/line`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestConnectLINEAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中のユーザーのパスワードを更新します。
         * @summary パスワード更新
         * @param {RequestUpdateAuthPasswordRequest} requestUpdateAuthPasswordRequest パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthPasswordPatch: async (requestUpdateAuthPasswordRequest: RequestUpdateAuthPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestUpdateAuthPasswordRequest' is not null or undefined
            assertParamExists('v1AuthPasswordPatch', 'requestUpdateAuthPasswordRequest', requestUpdateAuthPasswordRequest)
            const localVarPath = `/v1/auth/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateAuthPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールアドレスとパスワードでサインインします。
         * @summary サインイン
         * @param {RequestSignInRequest} requestSignInRequest サインイン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthPost: async (requestSignInRequest: RequestSignInRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestSignInRequest' is not null or undefined
            assertParamExists('v1AuthPost', 'requestSignInRequest', requestSignInRequest)
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSignInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 連携済みの外部認証プロバイダ一覧を取得します。
         * @summary 認証済みプロバイダ一覧の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthProvidersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リフレッシュトークンを使用してアクセストークンを更新します。
         * @summary トークン更新
         * @param {RequestRefreshAuthTokenRequest} requestRefreshAuthTokenRequest トークン更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthRefreshTokenPost: async (requestRefreshAuthTokenRequest: RequestRefreshAuthTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestRefreshAuthTokenRequest' is not null or undefined
            assertParamExists('v1AuthRefreshTokenPost', 'requestRefreshAuthTokenRequest', requestRefreshAuthTokenRequest)
            const localVarPath = `/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestRefreshAuthTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中の管理者情報を取得します。
         * @summary 管理者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * ログイン中のコーディネータの詳細情報を取得します。
         * @summary 自身のコーディネータ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthCoordinatorGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCoordinatorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthCoordinatorGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthCoordinatorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中のコーディネータの情報を更新します。
         * @summary 自身のコーディネータ情報更新
         * @param {RequestUpdateCoordinatorRequest} requestUpdateCoordinatorRequest コーディネータ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthCoordinatorPatch(requestUpdateCoordinatorRequest: RequestUpdateCoordinatorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthCoordinatorPatch(requestUpdateCoordinatorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthCoordinatorPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中のコーディネータの配送設定を取得します。
         * @summary 自身の配送設定取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthCoordinatorShippingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthCoordinatorShippingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthCoordinatorShippingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中のコーディネータの配送設定を更新します。
         * @summary 自身の配送設定更新
         * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthCoordinatorShippingsPatch(requestUpsertShippingRequest: RequestUpsertShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthCoordinatorShippingsPatch(requestUpsertShippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthCoordinatorShippingsPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * サインアウトします。
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * プッシュ通知用のデバイストークンを登録します。
         * @summary デバイストークン登録
         * @param {RequestRegisterAuthDeviceRequest} requestRegisterAuthDeviceRequest デバイストークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthDevicePost(requestRegisterAuthDeviceRequest: RequestRegisterAuthDeviceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthDevicePost(requestRegisterAuthDeviceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthDevicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中のユーザーのメールアドレスを更新します。
         * @summary メールアドレス更新
         * @param {RequestUpdateAuthEmailRequest} requestUpdateAuthEmailRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthEmailPatch(requestUpdateAuthEmailRequest: RequestUpdateAuthEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthEmailPatch(requestUpdateAuthEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthEmailPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * メールアドレス更新用の検証コードを確認します。
         * @summary メールアドレス更新 - コード検証
         * @param {RequestVerifyAuthEmailRequest} requestVerifyAuthEmailRequest 検証コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthEmailVerifiedPost(requestVerifyAuthEmailRequest: RequestVerifyAuthEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthEmailVerifiedPost(requestVerifyAuthEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthEmailVerifiedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パスワードリセット用のメールを送信します。
         * @summary パスワードリセット
         * @param {RequestForgotAuthPasswordRequest} requestForgotAuthPasswordRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthForgotPasswordPost(requestForgotAuthPasswordRequest: RequestForgotAuthPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthForgotPasswordPost(requestForgotAuthPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パスワードリセット用の検証コードを確認し、新しいパスワードを設定します。
         * @summary パスワードリセット - コード検証
         * @param {RequestResetAuthPasswordRequest} requestResetAuthPasswordRequest パスワードリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthForgotPasswordVerifiedPost(requestResetAuthPasswordRequest: RequestResetAuthPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthForgotPasswordVerifiedPost(requestResetAuthPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthForgotPasswordVerifiedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 認証トークンを検証し、認証情報を取得します。
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Googleアカウント連携用の認証URLを発行します。
         * @summary Google認証用URLの発行
         * @param {string} state CSRF対策用のstate
         * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthGoogleGet(state: string, redirectUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthGoogleAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthGoogleGet(state, redirectUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthGoogleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Googleアカウントを連携します。
         * @summary Googleアカウントの連携
         * @param {RequestConnectGoogleAccountRequest} requestConnectGoogleAccountRequest 連携リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthGooglePost(requestConnectGoogleAccountRequest: RequestConnectGoogleAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthGooglePost(requestConnectGoogleAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthGooglePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * LINEアカウント連携用の認証URLを発行します。
         * @summary LINE認証用URLの発行
         * @param {string} state CSRF対策用のstate
         * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthLineGet(state: string, redirectUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthLINEAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthLineGet(state, redirectUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthLineGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * LINEアカウントを連携します。
         * @summary LINEアカウントの連携
         * @param {RequestConnectLINEAccountRequest} requestConnectLINEAccountRequest 連携リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthLinePost(requestConnectLINEAccountRequest: RequestConnectLINEAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthLinePost(requestConnectLINEAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthLinePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中のユーザーのパスワードを更新します。
         * @summary パスワード更新
         * @param {RequestUpdateAuthPasswordRequest} requestUpdateAuthPasswordRequest パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthPasswordPatch(requestUpdateAuthPasswordRequest: RequestUpdateAuthPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthPasswordPatch(requestUpdateAuthPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthPasswordPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * メールアドレスとパスワードでサインインします。
         * @summary サインイン
         * @param {RequestSignInRequest} requestSignInRequest サインイン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthPost(requestSignInRequest: RequestSignInRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthPost(requestSignInRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 連携済みの外部認証プロバイダ一覧を取得します。
         * @summary 認証済みプロバイダ一覧の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthProvidersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthProvidersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthProvidersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthProvidersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * リフレッシュトークンを使用してアクセストークンを更新します。
         * @summary トークン更新
         * @param {RequestRefreshAuthTokenRequest} requestRefreshAuthTokenRequest トークン更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthRefreshTokenPost(requestRefreshAuthTokenRequest: RequestRefreshAuthTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthRefreshTokenPost(requestRefreshAuthTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中の管理者情報を取得します。
         * @summary 管理者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.v1AuthUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * ログイン中のコーディネータの詳細情報を取得します。
         * @summary 自身のコーディネータ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseCoordinatorResponse> {
            return localVarFp.v1AuthCoordinatorGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中のコーディネータの情報を更新します。
         * @summary 自身のコーディネータ情報更新
         * @param {RequestUpdateCoordinatorRequest} requestUpdateCoordinatorRequest コーディネータ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorPatch(requestUpdateCoordinatorRequest: RequestUpdateCoordinatorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthCoordinatorPatch(requestUpdateCoordinatorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中のコーディネータの配送設定を取得します。
         * @summary 自身の配送設定取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorShippingsGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseShippingResponse> {
            return localVarFp.v1AuthCoordinatorShippingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中のコーディネータの配送設定を更新します。
         * @summary 自身の配送設定更新
         * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthCoordinatorShippingsPatch(requestUpsertShippingRequest: RequestUpsertShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthCoordinatorShippingsPatch(requestUpsertShippingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * サインアウトします。
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * プッシュ通知用のデバイストークンを登録します。
         * @summary デバイストークン登録
         * @param {RequestRegisterAuthDeviceRequest} requestRegisterAuthDeviceRequest デバイストークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthDevicePost(requestRegisterAuthDeviceRequest: RequestRegisterAuthDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthDevicePost(requestRegisterAuthDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中のユーザーのメールアドレスを更新します。
         * @summary メールアドレス更新
         * @param {RequestUpdateAuthEmailRequest} requestUpdateAuthEmailRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthEmailPatch(requestUpdateAuthEmailRequest: RequestUpdateAuthEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthEmailPatch(requestUpdateAuthEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * メールアドレス更新用の検証コードを確認します。
         * @summary メールアドレス更新 - コード検証
         * @param {RequestVerifyAuthEmailRequest} requestVerifyAuthEmailRequest 検証コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthEmailVerifiedPost(requestVerifyAuthEmailRequest: RequestVerifyAuthEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthEmailVerifiedPost(requestVerifyAuthEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * パスワードリセット用のメールを送信します。
         * @summary パスワードリセット
         * @param {RequestForgotAuthPasswordRequest} requestForgotAuthPasswordRequest メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthForgotPasswordPost(requestForgotAuthPasswordRequest: RequestForgotAuthPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthForgotPasswordPost(requestForgotAuthPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * パスワードリセット用の検証コードを確認し、新しいパスワードを設定します。
         * @summary パスワードリセット - コード検証
         * @param {RequestResetAuthPasswordRequest} requestResetAuthPasswordRequest パスワードリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthForgotPasswordVerifiedPost(requestResetAuthPasswordRequest: RequestResetAuthPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthForgotPasswordVerifiedPost(requestResetAuthPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証トークンを検証し、認証情報を取得します。
         * @summary トークン検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthResponse> {
            return localVarFp.v1AuthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Googleアカウント連携用の認証URLを発行します。
         * @summary Google認証用URLの発行
         * @param {string} state CSRF対策用のstate
         * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGoogleGet(state: string, redirectUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthGoogleAccountResponse> {
            return localVarFp.v1AuthGoogleGet(state, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * Googleアカウントを連携します。
         * @summary Googleアカウントの連携
         * @param {RequestConnectGoogleAccountRequest} requestConnectGoogleAccountRequest 連携リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGooglePost(requestConnectGoogleAccountRequest: RequestConnectGoogleAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthResponse> {
            return localVarFp.v1AuthGooglePost(requestConnectGoogleAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * LINEアカウント連携用の認証URLを発行します。
         * @summary LINE認証用URLの発行
         * @param {string} state CSRF対策用のstate
         * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLineGet(state: string, redirectUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthLINEAccountResponse> {
            return localVarFp.v1AuthLineGet(state, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * LINEアカウントを連携します。
         * @summary LINEアカウントの連携
         * @param {RequestConnectLINEAccountRequest} requestConnectLINEAccountRequest 連携リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLinePost(requestConnectLINEAccountRequest: RequestConnectLINEAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthResponse> {
            return localVarFp.v1AuthLinePost(requestConnectLINEAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中のユーザーのパスワードを更新します。
         * @summary パスワード更新
         * @param {RequestUpdateAuthPasswordRequest} requestUpdateAuthPasswordRequest パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthPasswordPatch(requestUpdateAuthPasswordRequest: RequestUpdateAuthPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1AuthPasswordPatch(requestUpdateAuthPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * メールアドレスとパスワードでサインインします。
         * @summary サインイン
         * @param {RequestSignInRequest} requestSignInRequest サインイン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthPost(requestSignInRequest: RequestSignInRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthResponse> {
            return localVarFp.v1AuthPost(requestSignInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 連携済みの外部認証プロバイダ一覧を取得します。
         * @summary 認証済みプロバイダ一覧の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthProvidersGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthProvidersResponse> {
            return localVarFp.v1AuthProvidersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * リフレッシュトークンを使用してアクセストークンを更新します。
         * @summary トークン更新
         * @param {RequestRefreshAuthTokenRequest} requestRefreshAuthTokenRequest トークン更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthRefreshTokenPost(requestRefreshAuthTokenRequest: RequestRefreshAuthTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthResponse> {
            return localVarFp.v1AuthRefreshTokenPost(requestRefreshAuthTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中の管理者情報を取得します。
         * @summary 管理者情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthUserGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthUserResponse> {
            return localVarFp.v1AuthUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * ログイン中のコーディネータの詳細情報を取得します。
     * @summary 自身のコーディネータ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthCoordinatorGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthCoordinatorGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中のコーディネータの情報を更新します。
     * @summary 自身のコーディネータ情報更新
     * @param {RequestUpdateCoordinatorRequest} requestUpdateCoordinatorRequest コーディネータ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthCoordinatorPatch(requestUpdateCoordinatorRequest: RequestUpdateCoordinatorRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthCoordinatorPatch(requestUpdateCoordinatorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中のコーディネータの配送設定を取得します。
     * @summary 自身の配送設定取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthCoordinatorShippingsGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthCoordinatorShippingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中のコーディネータの配送設定を更新します。
     * @summary 自身の配送設定更新
     * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthCoordinatorShippingsPatch(requestUpsertShippingRequest: RequestUpsertShippingRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthCoordinatorShippingsPatch(requestUpsertShippingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サインアウトします。
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthDelete(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プッシュ通知用のデバイストークンを登録します。
     * @summary デバイストークン登録
     * @param {RequestRegisterAuthDeviceRequest} requestRegisterAuthDeviceRequest デバイストークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthDevicePost(requestRegisterAuthDeviceRequest: RequestRegisterAuthDeviceRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthDevicePost(requestRegisterAuthDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中のユーザーのメールアドレスを更新します。
     * @summary メールアドレス更新
     * @param {RequestUpdateAuthEmailRequest} requestUpdateAuthEmailRequest メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthEmailPatch(requestUpdateAuthEmailRequest: RequestUpdateAuthEmailRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthEmailPatch(requestUpdateAuthEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールアドレス更新用の検証コードを確認します。
     * @summary メールアドレス更新 - コード検証
     * @param {RequestVerifyAuthEmailRequest} requestVerifyAuthEmailRequest 検証コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthEmailVerifiedPost(requestVerifyAuthEmailRequest: RequestVerifyAuthEmailRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthEmailVerifiedPost(requestVerifyAuthEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パスワードリセット用のメールを送信します。
     * @summary パスワードリセット
     * @param {RequestForgotAuthPasswordRequest} requestForgotAuthPasswordRequest メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthForgotPasswordPost(requestForgotAuthPasswordRequest: RequestForgotAuthPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthForgotPasswordPost(requestForgotAuthPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パスワードリセット用の検証コードを確認し、新しいパスワードを設定します。
     * @summary パスワードリセット - コード検証
     * @param {RequestResetAuthPasswordRequest} requestResetAuthPasswordRequest パスワードリセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthForgotPasswordVerifiedPost(requestResetAuthPasswordRequest: RequestResetAuthPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthForgotPasswordVerifiedPost(requestResetAuthPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Googleアカウント連携用の認証URLを発行します。
     * @summary Google認証用URLの発行
     * @param {string} state CSRF対策用のstate
     * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthGoogleGet(state: string, redirectUri?: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthGoogleGet(state, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Googleアカウントを連携します。
     * @summary Googleアカウントの連携
     * @param {RequestConnectGoogleAccountRequest} requestConnectGoogleAccountRequest 連携リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthGooglePost(requestConnectGoogleAccountRequest: RequestConnectGoogleAccountRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthGooglePost(requestConnectGoogleAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * LINEアカウント連携用の認証URLを発行します。
     * @summary LINE認証用URLの発行
     * @param {string} state CSRF対策用のstate
     * @param {string} [redirectUri] 認証後のリダイレクト先（変更したいときのみ指定）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthLineGet(state: string, redirectUri?: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthLineGet(state, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * LINEアカウントを連携します。
     * @summary LINEアカウントの連携
     * @param {RequestConnectLINEAccountRequest} requestConnectLINEAccountRequest 連携リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthLinePost(requestConnectLINEAccountRequest: RequestConnectLINEAccountRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthLinePost(requestConnectLINEAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中のユーザーのパスワードを更新します。
     * @summary パスワード更新
     * @param {RequestUpdateAuthPasswordRequest} requestUpdateAuthPasswordRequest パスワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthPasswordPatch(requestUpdateAuthPasswordRequest: RequestUpdateAuthPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthPasswordPatch(requestUpdateAuthPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールアドレスとパスワードでサインインします。
     * @summary サインイン
     * @param {RequestSignInRequest} requestSignInRequest サインイン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthPost(requestSignInRequest: RequestSignInRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthPost(requestSignInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 連携済みの外部認証プロバイダ一覧を取得します。
     * @summary 認証済みプロバイダ一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthProvidersGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthProvidersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * @summary トークン更新
     * @param {RequestRefreshAuthTokenRequest} requestRefreshAuthTokenRequest トークン更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthRefreshTokenPost(requestRefreshAuthTokenRequest: RequestRefreshAuthTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthRefreshTokenPost(requestRefreshAuthTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中の管理者情報を取得します。
     * @summary 管理者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthUserGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BroadcastApi - axios parameter creator
 * @export
 */
export const BroadcastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
         * @summary ゲスト用ライブ配信情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/guests/schedules/-/broadcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieauth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Youtube認証完了後のコールバック処理を行います。
         * @summary マルシェライブ配信のYoutube認証後処理
         * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost: async (requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCallbackAuthYoutubeBroadcastRequest' is not null or undefined
            assertParamExists('v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost', 'requestCallbackAuthYoutubeBroadcastRequest', requestCallbackAuthYoutubeBroadcastRequest)
            const localVarPath = `/v1/guests/schedules/-/broadcasts/youtube/auth/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCallbackAuthYoutubeBroadcastRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Youtube側でライブ配信を作成します。
         * @summary マルシェライブ配信のYoutube連携
         * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubePost: async (requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateYoutubeBroadcastRequest' is not null or undefined
            assertParamExists('v1GuestsSchedulesBroadcastsYoutubePost', 'requestCreateYoutubeBroadcastRequest', requestCreateYoutubeBroadcastRequest)
            const localVarPath = `/v1/guests/schedules/-/broadcasts/youtube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieauth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateYoutubeBroadcastRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信終了後にオンデマンド配信用の映像をアップロードします。
         * @summary オンデマンド配信用の映像をアップロード
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestUpdateBroadcastArchiveRequest} requestUpdateBroadcastArchiveRequest アーカイブURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsArchiveVideoPost: async (scheduleId: string, requestUpdateBroadcastArchiveRequest: RequestUpdateBroadcastArchiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsArchiveVideoPost', 'scheduleId', scheduleId)
            // verify required parameter 'requestUpdateBroadcastArchiveRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsArchiveVideoPost', 'requestUpdateBroadcastArchiveRequest', requestUpdateBroadcastArchiveRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts/archive-video`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateBroadcastArchiveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信を一時停止します。
         * @summary マルシェライブ配信一時停止
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsDelete: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsDelete', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたスケジュールのライブ配信情報を取得します。
         * @summary マルシェライブ配信取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsGet: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsGet', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信の入力ソースをMP4ファイルに切り替えます。
         * @summary ライブ配信中の入力をMP4へ切り替え
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestActivateBroadcastMP4Request} requestActivateBroadcastMP4Request MP4ファイルURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsMp4Post: async (scheduleId: string, requestActivateBroadcastMP4Request: RequestActivateBroadcastMP4Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsMp4Post', 'scheduleId', scheduleId)
            // verify required parameter 'requestActivateBroadcastMP4Request' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsMp4Post', 'requestActivateBroadcastMP4Request', requestActivateBroadcastMP4Request)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts/mp4`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestActivateBroadcastMP4Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信の一時停止を解除します。
         * @summary マルシェライブ配信一時停止解除
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsPost: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsPost', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信の入力ソースをRTMPに切り替えます。
         * @summary ライブ配信中の入力をRTMPへ切り替え
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsRtmpPost: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsRtmpPost', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts/rtmp`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信中のふた絵（静止画）を無効化して通常配信に戻します。
         * @summary ライブ配信のふた絵を無効化
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsStaticImageDelete: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsStaticImageDelete', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts/static-image`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信中にふた絵（静止画）を表示します。
         * @summary ライブ配信のふた絵を有効化
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsStaticImagePost: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsStaticImagePost', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts/static-image`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Youtube配信用の認証URLを取得します。
         * @summary マルシェライブ配信のYoutube連携を認証
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestAuthYoutubeBroadcastRequest} requestAuthYoutubeBroadcastRequest Youtubeハンドル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsYoutubeAuthPost: async (scheduleId: string, requestAuthYoutubeBroadcastRequest: RequestAuthYoutubeBroadcastRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsYoutubeAuthPost', 'scheduleId', scheduleId)
            // verify required parameter 'requestAuthYoutubeBroadcastRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdBroadcastsYoutubeAuthPost', 'requestAuthYoutubeBroadcastRequest', requestAuthYoutubeBroadcastRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/broadcasts/youtube/auth`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestAuthYoutubeBroadcastRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcastApi - functional programming interface
 * @export
 */
export const BroadcastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BroadcastApiAxiosParamCreator(configuration)
    return {
        /**
         * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
         * @summary ゲスト用ライブ配信情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GuestsSchedulesBroadcastsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGuestBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GuestsSchedulesBroadcastsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1GuestsSchedulesBroadcastsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Youtube認証完了後のコールバック処理を行います。
         * @summary マルシェライブ配信のYoutube認証後処理
         * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGuestBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Youtube側でライブ配信を作成します。
         * @summary マルシェライブ配信のYoutube連携
         * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1GuestsSchedulesBroadcastsYoutubePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信終了後にオンデマンド配信用の映像をアップロードします。
         * @summary オンデマンド配信用の映像をアップロード
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestUpdateBroadcastArchiveRequest} requestUpdateBroadcastArchiveRequest アーカイブURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsArchiveVideoPost(scheduleId: string, requestUpdateBroadcastArchiveRequest: RequestUpdateBroadcastArchiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsArchiveVideoPost(scheduleId, requestUpdateBroadcastArchiveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsArchiveVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信を一時停止します。
         * @summary マルシェライブ配信一時停止
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsDelete(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsDelete(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたスケジュールのライブ配信情報を取得します。
         * @summary マルシェライブ配信取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsGet(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsGet(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信の入力ソースをMP4ファイルに切り替えます。
         * @summary ライブ配信中の入力をMP4へ切り替え
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestActivateBroadcastMP4Request} requestActivateBroadcastMP4Request MP4ファイルURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsMp4Post(scheduleId: string, requestActivateBroadcastMP4Request: RequestActivateBroadcastMP4Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsMp4Post(scheduleId, requestActivateBroadcastMP4Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsMp4Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信の一時停止を解除します。
         * @summary マルシェライブ配信一時停止解除
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsPost(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsPost(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信の入力ソースをRTMPに切り替えます。
         * @summary ライブ配信中の入力をRTMPへ切り替え
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsRtmpPost(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsRtmpPost(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsRtmpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信中のふた絵（静止画）を無効化して通常配信に戻します。
         * @summary ライブ配信のふた絵を無効化
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsStaticImageDelete(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsStaticImageDelete(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsStaticImageDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信中にふた絵（静止画）を表示します。
         * @summary ライブ配信のふた絵を有効化
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsStaticImagePost(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsStaticImagePost(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsStaticImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Youtube配信用の認証URLを取得します。
         * @summary マルシェライブ配信のYoutube連携を認証
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestAuthYoutubeBroadcastRequest} requestAuthYoutubeBroadcastRequest Youtubeハンドル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(scheduleId: string, requestAuthYoutubeBroadcastRequest: RequestAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAuthYoutubeBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(scheduleId, requestAuthYoutubeBroadcastRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.v1SchedulesScheduleIdBroadcastsYoutubeAuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BroadcastApi - factory interface
 * @export
 */
export const BroadcastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BroadcastApiFp(configuration)
    return {
        /**
         * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
         * @summary ゲスト用ライブ配信情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseGuestBroadcastResponse> {
            return localVarFp.v1GuestsSchedulesBroadcastsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Youtube認証完了後のコールバック処理を行います。
         * @summary マルシェライブ配信のYoutube認証後処理
         * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGuestBroadcastResponse> {
            return localVarFp.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Youtube側でライブ配信を作成します。
         * @summary マルシェライブ配信のYoutube連携
         * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信終了後にオンデマンド配信用の映像をアップロードします。
         * @summary オンデマンド配信用の映像をアップロード
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestUpdateBroadcastArchiveRequest} requestUpdateBroadcastArchiveRequest アーカイブURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsArchiveVideoPost(scheduleId: string, requestUpdateBroadcastArchiveRequest: RequestUpdateBroadcastArchiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsArchiveVideoPost(scheduleId, requestUpdateBroadcastArchiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信を一時停止します。
         * @summary マルシェライブ配信一時停止
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsDelete(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsDelete(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたスケジュールのライブ配信情報を取得します。
         * @summary マルシェライブ配信取得
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsGet(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseBroadcastResponse> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsGet(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信の入力ソースをMP4ファイルに切り替えます。
         * @summary ライブ配信中の入力をMP4へ切り替え
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestActivateBroadcastMP4Request} requestActivateBroadcastMP4Request MP4ファイルURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsMp4Post(scheduleId: string, requestActivateBroadcastMP4Request: RequestActivateBroadcastMP4Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsMp4Post(scheduleId, requestActivateBroadcastMP4Request, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信の一時停止を解除します。
         * @summary マルシェライブ配信一時停止解除
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsPost(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsPost(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信の入力ソースをRTMPに切り替えます。
         * @summary ライブ配信中の入力をRTMPへ切り替え
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsRtmpPost(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsRtmpPost(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信中のふた絵（静止画）を無効化して通常配信に戻します。
         * @summary ライブ配信のふた絵を無効化
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsStaticImageDelete(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsStaticImageDelete(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信中にふた絵（静止画）を表示します。
         * @summary ライブ配信のふた絵を有効化
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsStaticImagePost(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsStaticImagePost(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Youtube配信用の認証URLを取得します。
         * @summary マルシェライブ配信のYoutube連携を認証
         * @param {string} scheduleId マルシェ開催スケジュールID
         * @param {RequestAuthYoutubeBroadcastRequest} requestAuthYoutubeBroadcastRequest Youtubeハンドル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(scheduleId: string, requestAuthYoutubeBroadcastRequest: RequestAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAuthYoutubeBroadcastResponse> {
            return localVarFp.v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(scheduleId, requestAuthYoutubeBroadcastRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
export class BroadcastApi extends BaseAPI {
    /**
     * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
     * @summary ゲスト用ライブ配信情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1GuestsSchedulesBroadcastsGet(options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1GuestsSchedulesBroadcastsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Youtube認証完了後のコールバック処理を行います。
     * @summary マルシェライブ配信のYoutube認証後処理
     * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Youtube側でライブ配信を作成します。
     * @summary マルシェライブ配信のYoutube連携
     * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信終了後にオンデマンド配信用の映像をアップロードします。
     * @summary オンデマンド配信用の映像をアップロード
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {RequestUpdateBroadcastArchiveRequest} requestUpdateBroadcastArchiveRequest アーカイブURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsArchiveVideoPost(scheduleId: string, requestUpdateBroadcastArchiveRequest: RequestUpdateBroadcastArchiveRequest, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsArchiveVideoPost(scheduleId, requestUpdateBroadcastArchiveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信を一時停止します。
     * @summary マルシェライブ配信一時停止
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsDelete(scheduleId: string, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsDelete(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたスケジュールのライブ配信情報を取得します。
     * @summary マルシェライブ配信取得
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsGet(scheduleId: string, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsGet(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信の入力ソースをMP4ファイルに切り替えます。
     * @summary ライブ配信中の入力をMP4へ切り替え
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {RequestActivateBroadcastMP4Request} requestActivateBroadcastMP4Request MP4ファイルURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsMp4Post(scheduleId: string, requestActivateBroadcastMP4Request: RequestActivateBroadcastMP4Request, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsMp4Post(scheduleId, requestActivateBroadcastMP4Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信の一時停止を解除します。
     * @summary マルシェライブ配信一時停止解除
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsPost(scheduleId: string, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsPost(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信の入力ソースをRTMPに切り替えます。
     * @summary ライブ配信中の入力をRTMPへ切り替え
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsRtmpPost(scheduleId: string, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsRtmpPost(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信中のふた絵（静止画）を無効化して通常配信に戻します。
     * @summary ライブ配信のふた絵を無効化
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsStaticImageDelete(scheduleId: string, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsStaticImageDelete(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信中にふた絵（静止画）を表示します。
     * @summary ライブ配信のふた絵を有効化
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsStaticImagePost(scheduleId: string, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsStaticImagePost(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Youtube配信用の認証URLを取得します。
     * @summary マルシェライブ配信のYoutube連携を認証
     * @param {string} scheduleId マルシェ開催スケジュールID
     * @param {RequestAuthYoutubeBroadcastRequest} requestAuthYoutubeBroadcastRequest Youtubeハンドル
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(scheduleId: string, requestAuthYoutubeBroadcastRequest: RequestAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(scheduleId, requestAuthYoutubeBroadcastRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 商品種別を削除します。
         * @summary 商品種別削除
         * @param {string} categoryId 商品種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdDelete: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdDelete', 'categoryId', categoryId)
            const localVarPath = `/v1/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品種別の情報を更新します。
         * @summary 商品種別更新
         * @param {string} categoryId 商品種別ID
         * @param {RequestUpdateCategoryRequest} requestUpdateCategoryRequest 商品種別情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdPatch: async (categoryId: string, requestUpdateCategoryRequest: RequestUpdateCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdPatch', 'categoryId', categoryId)
            // verify required parameter 'requestUpdateCategoryRequest' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdPatch', 'requestUpdateCategoryRequest', requestUpdateCategoryRequest)
            const localVarPath = `/v1/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品種別の一覧を取得します。
         * @summary 商品種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesGet: async (limit?: number, offset?: number, name?: string, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい商品種別を登録します。
         * @summary 商品種別登録
         * @param {RequestCreateCategoryRequest} requestCreateCategoryRequest 商品種別情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesPost: async (requestCreateCategoryRequest: RequestCreateCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateCategoryRequest' is not null or undefined
            assertParamExists('v1CategoriesPost', 'requestCreateCategoryRequest', requestCreateCategoryRequest)
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 商品種別を削除します。
         * @summary 商品種別削除
         * @param {string} categoryId 商品種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesCategoryIdDelete(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesCategoryIdDelete(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.v1CategoriesCategoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品種別の情報を更新します。
         * @summary 商品種別更新
         * @param {string} categoryId 商品種別ID
         * @param {RequestUpdateCategoryRequest} requestUpdateCategoryRequest 商品種別情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesCategoryIdPatch(categoryId: string, requestUpdateCategoryRequest: RequestUpdateCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesCategoryIdPatch(categoryId, requestUpdateCategoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.v1CategoriesCategoryIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品種別の一覧を取得します。
         * @summary 商品種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesGet(limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesGet(limit, offset, name, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.v1CategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい商品種別を登録します。
         * @summary 商品種別登録
         * @param {RequestCreateCategoryRequest} requestCreateCategoryRequest 商品種別情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesPost(requestCreateCategoryRequest: RequestCreateCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesPost(requestCreateCategoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.v1CategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 商品種別を削除します。
         * @summary 商品種別削除
         * @param {string} categoryId 商品種別ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdDelete(categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CategoriesCategoryIdDelete(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品種別の情報を更新します。
         * @summary 商品種別更新
         * @param {string} categoryId 商品種別ID
         * @param {RequestUpdateCategoryRequest} requestUpdateCategoryRequest 商品種別情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdPatch(categoryId: string, requestUpdateCategoryRequest: RequestUpdateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CategoriesCategoryIdPatch(categoryId, requestUpdateCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品種別の一覧を取得します。
         * @summary 商品種別一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesGet(limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseCategoriesResponse> {
            return localVarFp.v1CategoriesGet(limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい商品種別を登録します。
         * @summary 商品種別登録
         * @param {RequestCreateCategoryRequest} requestCreateCategoryRequest 商品種別情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesPost(requestCreateCategoryRequest: RequestCreateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseCategoryResponse> {
            return localVarFp.v1CategoriesPost(requestCreateCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 商品種別を削除します。
     * @summary 商品種別削除
     * @param {string} categoryId 商品種別ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1CategoriesCategoryIdDelete(categoryId: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1CategoriesCategoryIdDelete(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品種別の情報を更新します。
     * @summary 商品種別更新
     * @param {string} categoryId 商品種別ID
     * @param {RequestUpdateCategoryRequest} requestUpdateCategoryRequest 商品種別情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1CategoriesCategoryIdPatch(categoryId: string, requestUpdateCategoryRequest: RequestUpdateCategoryRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1CategoriesCategoryIdPatch(categoryId, requestUpdateCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品種別の一覧を取得します。
     * @summary 商品種別一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 商品種別名(あいまい検索)(32文字以内)
     * @param {string} [orders] ソート(name,-name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1CategoriesGet(limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1CategoriesGet(limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい商品種別を登録します。
     * @summary 商品種別登録
     * @param {RequestCreateCategoryRequest} requestCreateCategoryRequest 商品種別情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public v1CategoriesPost(requestCreateCategoryRequest: RequestCreateCategoryRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).v1CategoriesPost(requestCreateCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * お問い合わせを削除します。
         * @summary お問い合わせ削除
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdDelete: async (contactId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdDelete', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたお問い合わせの詳細情報を取得します。
         * @summary お問い合わせ取得
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdGet: async (contactId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdGet', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お問い合わせの情報を更新します。
         * @summary お問い合わせ更新
         * @param {string} contactId お問い合わせID
         * @param {RequestUpdateContactRequest} requestUpdateContactRequest お問い合わせ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdPatch: async (contactId: string, requestUpdateContactRequest: RequestUpdateContactRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdPatch', 'contactId', contactId)
            // verify required parameter 'requestUpdateContactRequest' is not null or undefined
            assertParamExists('v1ContactsContactIdPatch', 'requestUpdateContactRequest', requestUpdateContactRequest)
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateContactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お問い合わせの一覧を取得します。
         * @summary お問い合わせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいお問い合わせを登録します。
         * @summary お問い合わせ登録
         * @param {RequestCreateContactRequest} requestCreateContactRequest お問い合わせ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsPost: async (requestCreateContactRequest: RequestCreateContactRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateContactRequest' is not null or undefined
            assertParamExists('v1ContactsPost', 'requestCreateContactRequest', requestCreateContactRequest)
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateContactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * お問い合わせを削除します。
         * @summary お問い合わせ削除
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdDelete(contactId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdDelete(contactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.v1ContactsContactIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたお問い合わせの詳細情報を取得します。
         * @summary お問い合わせ取得
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdGet(contactId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdGet(contactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.v1ContactsContactIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * お問い合わせの情報を更新します。
         * @summary お問い合わせ更新
         * @param {string} contactId お問い合わせID
         * @param {RequestUpdateContactRequest} requestUpdateContactRequest お問い合わせ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdPatch(contactId: string, requestUpdateContactRequest: RequestUpdateContactRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdPatch(contactId, requestUpdateContactRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.v1ContactsContactIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * お問い合わせの一覧を取得します。
         * @summary お問い合わせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseContactsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.v1ContactsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいお問い合わせを登録します。
         * @summary お問い合わせ登録
         * @param {RequestCreateContactRequest} requestCreateContactRequest お問い合わせ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsPost(requestCreateContactRequest: RequestCreateContactRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsPost(requestCreateContactRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.v1ContactsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * お問い合わせを削除します。
         * @summary お問い合わせ削除
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdDelete(contactId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ContactsContactIdDelete(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたお問い合わせの詳細情報を取得します。
         * @summary お問い合わせ取得
         * @param {string} contactId お問い合わせID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdGet(contactId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseContactResponse> {
            return localVarFp.v1ContactsContactIdGet(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * お問い合わせの情報を更新します。
         * @summary お問い合わせ更新
         * @param {string} contactId お問い合わせID
         * @param {RequestUpdateContactRequest} requestUpdateContactRequest お問い合わせ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdPatch(contactId: string, requestUpdateContactRequest: RequestUpdateContactRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ContactsContactIdPatch(contactId, requestUpdateContactRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * お問い合わせの一覧を取得します。
         * @summary お問い合わせ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseContactsResponse> {
            return localVarFp.v1ContactsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいお問い合わせを登録します。
         * @summary お問い合わせ登録
         * @param {RequestCreateContactRequest} requestCreateContactRequest お問い合わせ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsPost(requestCreateContactRequest: RequestCreateContactRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseContactResponse> {
            return localVarFp.v1ContactsPost(requestCreateContactRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * お問い合わせを削除します。
     * @summary お問い合わせ削除
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1ContactsContactIdDelete(contactId: string, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1ContactsContactIdDelete(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたお問い合わせの詳細情報を取得します。
     * @summary お問い合わせ取得
     * @param {string} contactId お問い合わせID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1ContactsContactIdGet(contactId: string, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1ContactsContactIdGet(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お問い合わせの情報を更新します。
     * @summary お問い合わせ更新
     * @param {string} contactId お問い合わせID
     * @param {RequestUpdateContactRequest} requestUpdateContactRequest お問い合わせ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1ContactsContactIdPatch(contactId: string, requestUpdateContactRequest: RequestUpdateContactRequest, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1ContactsContactIdPatch(contactId, requestUpdateContactRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お問い合わせの一覧を取得します。
     * @summary お問い合わせ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1ContactsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1ContactsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいお問い合わせを登録します。
     * @summary お問い合わせ登録
     * @param {RequestCreateContactRequest} requestCreateContactRequest お問い合わせ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public v1ContactsPost(requestCreateContactRequest: RequestCreateContactRequest, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).v1ContactsPost(requestCreateContactRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactCategoryApi - axios parameter creator
 * @export
 */
export const ContactCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定されたお問い合わせカテゴリの詳細情報を取得します。
         * @summary お問い合わせカテゴリ取得
         * @param {string} contactCategoryId お問い合わせカテゴリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactCategoriesContactCategoryIdGet: async (contactCategoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactCategoryId' is not null or undefined
            assertParamExists('v1ContactCategoriesContactCategoryIdGet', 'contactCategoryId', contactCategoryId)
            const localVarPath = `/v1/contact-categories/{contactCategoryId}`
                .replace(`{${"contactCategoryId"}}`, encodeURIComponent(String(contactCategoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お問い合わせカテゴリの一覧を取得します。
         * @summary お問い合わせカテゴリ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactCategoriesGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contact-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactCategoryApi - functional programming interface
 * @export
 */
export const ContactCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定されたお問い合わせカテゴリの詳細情報を取得します。
         * @summary お問い合わせカテゴリ取得
         * @param {string} contactCategoryId お問い合わせカテゴリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactCategoriesContactCategoryIdGet(contactCategoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseContactCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactCategoriesContactCategoryIdGet(contactCategoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactCategoryApi.v1ContactCategoriesContactCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * お問い合わせカテゴリの一覧を取得します。
         * @summary お問い合わせカテゴリ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactCategoriesGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseContactCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactCategoriesGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactCategoryApi.v1ContactCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactCategoryApi - factory interface
 * @export
 */
export const ContactCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactCategoryApiFp(configuration)
    return {
        /**
         * 指定されたお問い合わせカテゴリの詳細情報を取得します。
         * @summary お問い合わせカテゴリ取得
         * @param {string} contactCategoryId お問い合わせカテゴリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactCategoriesContactCategoryIdGet(contactCategoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseContactCategoryResponse> {
            return localVarFp.v1ContactCategoriesContactCategoryIdGet(contactCategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * お問い合わせカテゴリの一覧を取得します。
         * @summary お問い合わせカテゴリ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactCategoriesGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseContactCategoriesResponse> {
            return localVarFp.v1ContactCategoriesGet(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactCategoryApi - object-oriented interface
 * @export
 * @class ContactCategoryApi
 * @extends {BaseAPI}
 */
export class ContactCategoryApi extends BaseAPI {
    /**
     * 指定されたお問い合わせカテゴリの詳細情報を取得します。
     * @summary お問い合わせカテゴリ取得
     * @param {string} contactCategoryId お問い合わせカテゴリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactCategoryApi
     */
    public v1ContactCategoriesContactCategoryIdGet(contactCategoryId: string, options?: RawAxiosRequestConfig) {
        return ContactCategoryApiFp(this.configuration).v1ContactCategoriesContactCategoryIdGet(contactCategoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お問い合わせカテゴリの一覧を取得します。
     * @summary お問い合わせカテゴリ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactCategoryApi
     */
    public v1ContactCategoriesGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ContactCategoryApiFp(this.configuration).v1ContactCategoriesGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactReadApi - axios parameter creator
 * @export
 */
export const ContactReadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * お問い合わせの既読状態を登録します。
         * @summary お問い合わせ既読登録
         * @param {RequestCreateContactReadRequest} requestCreateContactReadRequest 既読情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactReadsPost: async (requestCreateContactReadRequest: RequestCreateContactReadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateContactReadRequest' is not null or undefined
            assertParamExists('v1ContactReadsPost', 'requestCreateContactReadRequest', requestCreateContactReadRequest)
            const localVarPath = `/v1/contact-reads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateContactReadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactReadApi - functional programming interface
 * @export
 */
export const ContactReadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactReadApiAxiosParamCreator(configuration)
    return {
        /**
         * お問い合わせの既読状態を登録します。
         * @summary お問い合わせ既読登録
         * @param {RequestCreateContactReadRequest} requestCreateContactReadRequest 既読情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactReadsPost(requestCreateContactReadRequest: RequestCreateContactReadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseContactReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactReadsPost(requestCreateContactReadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactReadApi.v1ContactReadsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactReadApi - factory interface
 * @export
 */
export const ContactReadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactReadApiFp(configuration)
    return {
        /**
         * お問い合わせの既読状態を登録します。
         * @summary お問い合わせ既読登録
         * @param {RequestCreateContactReadRequest} requestCreateContactReadRequest 既読情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactReadsPost(requestCreateContactReadRequest: RequestCreateContactReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseContactReadResponse> {
            return localVarFp.v1ContactReadsPost(requestCreateContactReadRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactReadApi - object-oriented interface
 * @export
 * @class ContactReadApi
 * @extends {BaseAPI}
 */
export class ContactReadApi extends BaseAPI {
    /**
     * お問い合わせの既読状態を登録します。
     * @summary お問い合わせ既読登録
     * @param {RequestCreateContactReadRequest} requestCreateContactReadRequest 既読情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactReadApi
     */
    public v1ContactReadsPost(requestCreateContactReadRequest: RequestCreateContactReadRequest, options?: RawAxiosRequestConfig) {
        return ContactReadApiFp(this.configuration).v1ContactReadsPost(requestCreateContactReadRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoordinatorApi - axios parameter creator
 * @export
 */
export const CoordinatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * コーディネータの一覧を取得します。
         * @summary コーディネータ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsGet: async (limit?: number, offset?: number, username?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/coordinators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoordinatorApi - functional programming interface
 * @export
 */
export const CoordinatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoordinatorApiAxiosParamCreator(configuration)
    return {
        /**
         * コーディネータの一覧を取得します。
         * @summary コーディネータ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsGet(limit?: number, offset?: number, username?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCoordinatorsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsGet(limit, offset, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoordinatorApi.v1CoordinatorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoordinatorApi - factory interface
 * @export
 */
export const CoordinatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoordinatorApiFp(configuration)
    return {
        /**
         * コーディネータの一覧を取得します。
         * @summary コーディネータ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsGet(limit?: number, offset?: number, username?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseCoordinatorsResponse> {
            return localVarFp.v1CoordinatorsGet(limit, offset, username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoordinatorApi - object-oriented interface
 * @export
 * @class CoordinatorApi
 * @extends {BaseAPI}
 */
export class CoordinatorApi extends BaseAPI {
    /**
     * コーディネータの一覧を取得します。
     * @summary コーディネータ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [username] コーディネータ名(あいまい検索)(64文字以内)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordinatorApi
     */
    public v1CoordinatorsGet(limit?: number, offset?: number, username?: string, options?: RawAxiosRequestConfig) {
        return CoordinatorApiFp(this.configuration).v1CoordinatorsGet(limit, offset, username, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperienceApi - axios parameter creator
 * @export
 */
export const ExperienceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 体験を削除します。
         * @summary 体験削除
         * @param {string} experienceId 体験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesExperienceIdDelete: async (experienceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experienceId' is not null or undefined
            assertParamExists('v1ExperiencesExperienceIdDelete', 'experienceId', experienceId)
            const localVarPath = `/v1/experiences/{experienceId}`
                .replace(`{${"experienceId"}}`, encodeURIComponent(String(experienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された体験の詳細情報を取得します。
         * @summary 体験取得
         * @param {string} experienceId 体験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesExperienceIdGet: async (experienceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experienceId' is not null or undefined
            assertParamExists('v1ExperiencesExperienceIdGet', 'experienceId', experienceId)
            const localVarPath = `/v1/experiences/{experienceId}`
                .replace(`{${"experienceId"}}`, encodeURIComponent(String(experienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験の情報を更新します。
         * @summary 体験更新
         * @param {string} experienceId 体験ID
         * @param {RequestUpdateExperienceRequest} requestUpdateExperienceRequest 体験情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesExperienceIdPatch: async (experienceId: string, requestUpdateExperienceRequest: RequestUpdateExperienceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experienceId' is not null or undefined
            assertParamExists('v1ExperiencesExperienceIdPatch', 'experienceId', experienceId)
            // verify required parameter 'requestUpdateExperienceRequest' is not null or undefined
            assertParamExists('v1ExperiencesExperienceIdPatch', 'requestUpdateExperienceRequest', requestUpdateExperienceRequest)
            const localVarPath = `/v1/experiences/{experienceId}`
                .replace(`{${"experienceId"}}`, encodeURIComponent(String(experienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateExperienceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験の一覧を取得します。店舗、生産者、名前でのフィルタリングが可能です。
         * @summary 体験一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 体験名(あいまい検索)
         * @param {string} [producerId] 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesGet: async (limit?: number, offset?: number, name?: string, producerId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/experiences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (producerId !== undefined) {
                localVarQueryParameter['producerId'] = producerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい体験を登録します。コーディネーターは管理店舗の生産者の体験のみ登録可能です。
         * @summary 体験登録
         * @param {RequestCreateExperienceRequest} requestCreateExperienceRequest 体験情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesPost: async (requestCreateExperienceRequest: RequestCreateExperienceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateExperienceRequest' is not null or undefined
            assertParamExists('v1ExperiencesPost', 'requestCreateExperienceRequest', requestCreateExperienceRequest)
            const localVarPath = `/v1/experiences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateExperienceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperienceApi - functional programming interface
 * @export
 */
export const ExperienceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperienceApiAxiosParamCreator(configuration)
    return {
        /**
         * 体験を削除します。
         * @summary 体験削除
         * @param {string} experienceId 体験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperiencesExperienceIdDelete(experienceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperiencesExperienceIdDelete(experienceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceApi.v1ExperiencesExperienceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された体験の詳細情報を取得します。
         * @summary 体験取得
         * @param {string} experienceId 体験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperiencesExperienceIdGet(experienceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseExperienceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperiencesExperienceIdGet(experienceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceApi.v1ExperiencesExperienceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験の情報を更新します。
         * @summary 体験更新
         * @param {string} experienceId 体験ID
         * @param {RequestUpdateExperienceRequest} requestUpdateExperienceRequest 体験情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperiencesExperienceIdPatch(experienceId: string, requestUpdateExperienceRequest: RequestUpdateExperienceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperiencesExperienceIdPatch(experienceId, requestUpdateExperienceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceApi.v1ExperiencesExperienceIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験の一覧を取得します。店舗、生産者、名前でのフィルタリングが可能です。
         * @summary 体験一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 体験名(あいまい検索)
         * @param {string} [producerId] 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperiencesGet(limit?: number, offset?: number, name?: string, producerId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseExperiencesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperiencesGet(limit, offset, name, producerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceApi.v1ExperiencesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい体験を登録します。コーディネーターは管理店舗の生産者の体験のみ登録可能です。
         * @summary 体験登録
         * @param {RequestCreateExperienceRequest} requestCreateExperienceRequest 体験情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperiencesPost(requestCreateExperienceRequest: RequestCreateExperienceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseExperienceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperiencesPost(requestCreateExperienceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceApi.v1ExperiencesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperienceApi - factory interface
 * @export
 */
export const ExperienceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperienceApiFp(configuration)
    return {
        /**
         * 体験を削除します。
         * @summary 体験削除
         * @param {string} experienceId 体験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesExperienceIdDelete(experienceId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ExperiencesExperienceIdDelete(experienceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された体験の詳細情報を取得します。
         * @summary 体験取得
         * @param {string} experienceId 体験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesExperienceIdGet(experienceId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseExperienceResponse> {
            return localVarFp.v1ExperiencesExperienceIdGet(experienceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験の情報を更新します。
         * @summary 体験更新
         * @param {string} experienceId 体験ID
         * @param {RequestUpdateExperienceRequest} requestUpdateExperienceRequest 体験情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesExperienceIdPatch(experienceId: string, requestUpdateExperienceRequest: RequestUpdateExperienceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ExperiencesExperienceIdPatch(experienceId, requestUpdateExperienceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験の一覧を取得します。店舗、生産者、名前でのフィルタリングが可能です。
         * @summary 体験一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 体験名(あいまい検索)
         * @param {string} [producerId] 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesGet(limit?: number, offset?: number, name?: string, producerId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseExperiencesResponse> {
            return localVarFp.v1ExperiencesGet(limit, offset, name, producerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい体験を登録します。コーディネーターは管理店舗の生産者の体験のみ登録可能です。
         * @summary 体験登録
         * @param {RequestCreateExperienceRequest} requestCreateExperienceRequest 体験情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperiencesPost(requestCreateExperienceRequest: RequestCreateExperienceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseExperienceResponse> {
            return localVarFp.v1ExperiencesPost(requestCreateExperienceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperienceApi - object-oriented interface
 * @export
 * @class ExperienceApi
 * @extends {BaseAPI}
 */
export class ExperienceApi extends BaseAPI {
    /**
     * 体験を削除します。
     * @summary 体験削除
     * @param {string} experienceId 体験ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public v1ExperiencesExperienceIdDelete(experienceId: string, options?: RawAxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).v1ExperiencesExperienceIdDelete(experienceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された体験の詳細情報を取得します。
     * @summary 体験取得
     * @param {string} experienceId 体験ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public v1ExperiencesExperienceIdGet(experienceId: string, options?: RawAxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).v1ExperiencesExperienceIdGet(experienceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験の情報を更新します。
     * @summary 体験更新
     * @param {string} experienceId 体験ID
     * @param {RequestUpdateExperienceRequest} requestUpdateExperienceRequest 体験情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public v1ExperiencesExperienceIdPatch(experienceId: string, requestUpdateExperienceRequest: RequestUpdateExperienceRequest, options?: RawAxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).v1ExperiencesExperienceIdPatch(experienceId, requestUpdateExperienceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験の一覧を取得します。店舗、生産者、名前でのフィルタリングが可能です。
     * @summary 体験一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 体験名(あいまい検索)
     * @param {string} [producerId] 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public v1ExperiencesGet(limit?: number, offset?: number, name?: string, producerId?: string, options?: RawAxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).v1ExperiencesGet(limit, offset, name, producerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい体験を登録します。コーディネーターは管理店舗の生産者の体験のみ登録可能です。
     * @summary 体験登録
     * @param {RequestCreateExperienceRequest} requestCreateExperienceRequest 体験情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public v1ExperiencesPost(requestCreateExperienceRequest: RequestCreateExperienceRequest, options?: RawAxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).v1ExperiencesPost(requestCreateExperienceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperienceTypeApi - axios parameter creator
 * @export
 */
export const ExperienceTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 体験タイプを削除します。
         * @summary 体験タイプ削除
         * @param {string} experienceTypeId 体験タイプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesExperienceTypeIdDelete: async (experienceTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experienceTypeId' is not null or undefined
            assertParamExists('v1ExperienceTypesExperienceTypeIdDelete', 'experienceTypeId', experienceTypeId)
            const localVarPath = `/v1/experience-types/{experienceTypeId}`
                .replace(`{${"experienceTypeId"}}`, encodeURIComponent(String(experienceTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験タイプの情報を更新します。
         * @summary 体験タイプ更新
         * @param {string} experienceTypeId 体験タイプID
         * @param {RequestUpdateExperienceTypeRequest} requestUpdateExperienceTypeRequest 体験タイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesExperienceTypeIdPatch: async (experienceTypeId: string, requestUpdateExperienceTypeRequest: RequestUpdateExperienceTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experienceTypeId' is not null or undefined
            assertParamExists('v1ExperienceTypesExperienceTypeIdPatch', 'experienceTypeId', experienceTypeId)
            // verify required parameter 'requestUpdateExperienceTypeRequest' is not null or undefined
            assertParamExists('v1ExperienceTypesExperienceTypeIdPatch', 'requestUpdateExperienceTypeRequest', requestUpdateExperienceTypeRequest)
            const localVarPath = `/v1/experience-types/{experienceTypeId}`
                .replace(`{${"experienceTypeId"}}`, encodeURIComponent(String(experienceTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateExperienceTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験タイプの一覧を取得します。名前でのフィルタリングが可能です。
         * @summary 体験タイプ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 体験タイプ名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesGet: async (limit?: number, offset?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/experience-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい体験タイプを登録します。
         * @summary 体験タイプ登録
         * @param {RequestCreateExperienceTypeRequest} requestCreateExperienceTypeRequest 体験タイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesPost: async (requestCreateExperienceTypeRequest: RequestCreateExperienceTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateExperienceTypeRequest' is not null or undefined
            assertParamExists('v1ExperienceTypesPost', 'requestCreateExperienceTypeRequest', requestCreateExperienceTypeRequest)
            const localVarPath = `/v1/experience-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateExperienceTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperienceTypeApi - functional programming interface
 * @export
 */
export const ExperienceTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperienceTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 体験タイプを削除します。
         * @summary 体験タイプ削除
         * @param {string} experienceTypeId 体験タイプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperienceTypesExperienceTypeIdDelete(experienceTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperienceTypesExperienceTypeIdDelete(experienceTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceTypeApi.v1ExperienceTypesExperienceTypeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験タイプの情報を更新します。
         * @summary 体験タイプ更新
         * @param {string} experienceTypeId 体験タイプID
         * @param {RequestUpdateExperienceTypeRequest} requestUpdateExperienceTypeRequest 体験タイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperienceTypesExperienceTypeIdPatch(experienceTypeId: string, requestUpdateExperienceTypeRequest: RequestUpdateExperienceTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperienceTypesExperienceTypeIdPatch(experienceTypeId, requestUpdateExperienceTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceTypeApi.v1ExperienceTypesExperienceTypeIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験タイプの一覧を取得します。名前でのフィルタリングが可能です。
         * @summary 体験タイプ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 体験タイプ名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperienceTypesGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseExperienceTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperienceTypesGet(limit, offset, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceTypeApi.v1ExperienceTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい体験タイプを登録します。
         * @summary 体験タイプ登録
         * @param {RequestCreateExperienceTypeRequest} requestCreateExperienceTypeRequest 体験タイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExperienceTypesPost(requestCreateExperienceTypeRequest: RequestCreateExperienceTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseExperienceTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ExperienceTypesPost(requestCreateExperienceTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceTypeApi.v1ExperienceTypesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperienceTypeApi - factory interface
 * @export
 */
export const ExperienceTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperienceTypeApiFp(configuration)
    return {
        /**
         * 体験タイプを削除します。
         * @summary 体験タイプ削除
         * @param {string} experienceTypeId 体験タイプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesExperienceTypeIdDelete(experienceTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ExperienceTypesExperienceTypeIdDelete(experienceTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験タイプの情報を更新します。
         * @summary 体験タイプ更新
         * @param {string} experienceTypeId 体験タイプID
         * @param {RequestUpdateExperienceTypeRequest} requestUpdateExperienceTypeRequest 体験タイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesExperienceTypeIdPatch(experienceTypeId: string, requestUpdateExperienceTypeRequest: RequestUpdateExperienceTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ExperienceTypesExperienceTypeIdPatch(experienceTypeId, requestUpdateExperienceTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験タイプの一覧を取得します。名前でのフィルタリングが可能です。
         * @summary 体験タイプ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 体験タイプ名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseExperienceTypesResponse> {
            return localVarFp.v1ExperienceTypesGet(limit, offset, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい体験タイプを登録します。
         * @summary 体験タイプ登録
         * @param {RequestCreateExperienceTypeRequest} requestCreateExperienceTypeRequest 体験タイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExperienceTypesPost(requestCreateExperienceTypeRequest: RequestCreateExperienceTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseExperienceTypeResponse> {
            return localVarFp.v1ExperienceTypesPost(requestCreateExperienceTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperienceTypeApi - object-oriented interface
 * @export
 * @class ExperienceTypeApi
 * @extends {BaseAPI}
 */
export class ExperienceTypeApi extends BaseAPI {
    /**
     * 体験タイプを削除します。
     * @summary 体験タイプ削除
     * @param {string} experienceTypeId 体験タイプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceTypeApi
     */
    public v1ExperienceTypesExperienceTypeIdDelete(experienceTypeId: string, options?: RawAxiosRequestConfig) {
        return ExperienceTypeApiFp(this.configuration).v1ExperienceTypesExperienceTypeIdDelete(experienceTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験タイプの情報を更新します。
     * @summary 体験タイプ更新
     * @param {string} experienceTypeId 体験タイプID
     * @param {RequestUpdateExperienceTypeRequest} requestUpdateExperienceTypeRequest 体験タイプ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceTypeApi
     */
    public v1ExperienceTypesExperienceTypeIdPatch(experienceTypeId: string, requestUpdateExperienceTypeRequest: RequestUpdateExperienceTypeRequest, options?: RawAxiosRequestConfig) {
        return ExperienceTypeApiFp(this.configuration).v1ExperienceTypesExperienceTypeIdPatch(experienceTypeId, requestUpdateExperienceTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験タイプの一覧を取得します。名前でのフィルタリングが可能です。
     * @summary 体験タイプ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 体験タイプ名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceTypeApi
     */
    public v1ExperienceTypesGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig) {
        return ExperienceTypeApiFp(this.configuration).v1ExperienceTypesGet(limit, offset, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい体験タイプを登録します。
     * @summary 体験タイプ登録
     * @param {RequestCreateExperienceTypeRequest} requestCreateExperienceTypeRequest 体験タイプ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceTypeApi
     */
    public v1ExperienceTypesPost(requestCreateExperienceTypeRequest: RequestCreateExperienceTypeRequest, options?: RawAxiosRequestConfig) {
        return ExperienceTypeApiFp(this.configuration).v1ExperienceTypesPost(requestCreateExperienceTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GuestApi - axios parameter creator
 * @export
 */
export const GuestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
         * @summary ゲスト用ライブ配信情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/guests/schedules/-/broadcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieauth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Youtube認証完了後のコールバック処理を行います。
         * @summary マルシェライブ配信のYoutube認証後処理
         * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost: async (requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCallbackAuthYoutubeBroadcastRequest' is not null or undefined
            assertParamExists('v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost', 'requestCallbackAuthYoutubeBroadcastRequest', requestCallbackAuthYoutubeBroadcastRequest)
            const localVarPath = `/v1/guests/schedules/-/broadcasts/youtube/auth/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCallbackAuthYoutubeBroadcastRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Youtube側でライブ配信を作成します。
         * @summary マルシェライブ配信のYoutube連携
         * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubePost: async (requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateYoutubeBroadcastRequest' is not null or undefined
            assertParamExists('v1GuestsSchedulesBroadcastsYoutubePost', 'requestCreateYoutubeBroadcastRequest', requestCreateYoutubeBroadcastRequest)
            const localVarPath = `/v1/guests/schedules/-/broadcasts/youtube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieauth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateYoutubeBroadcastRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestApi - functional programming interface
 * @export
 */
export const GuestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestApiAxiosParamCreator(configuration)
    return {
        /**
         * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
         * @summary ゲスト用ライブ配信情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GuestsSchedulesBroadcastsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGuestBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GuestsSchedulesBroadcastsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.v1GuestsSchedulesBroadcastsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Youtube認証完了後のコールバック処理を行います。
         * @summary マルシェライブ配信のYoutube認証後処理
         * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGuestBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Youtube側でライブ配信を作成します。
         * @summary マルシェライブ配信のYoutube連携
         * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.v1GuestsSchedulesBroadcastsYoutubePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GuestApi - factory interface
 * @export
 */
export const GuestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestApiFp(configuration)
    return {
        /**
         * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
         * @summary ゲスト用ライブ配信情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseGuestBroadcastResponse> {
            return localVarFp.v1GuestsSchedulesBroadcastsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Youtube認証完了後のコールバック処理を行います。
         * @summary マルシェライブ配信のYoutube認証後処理
         * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGuestBroadcastResponse> {
            return localVarFp.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Youtube側でライブ配信を作成します。
         * @summary マルシェライブ配信のYoutube連携
         * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestApi - object-oriented interface
 * @export
 * @class GuestApi
 * @extends {BaseAPI}
 */
export class GuestApi extends BaseAPI {
    /**
     * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
     * @summary ゲスト用ライブ配信情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public v1GuestsSchedulesBroadcastsGet(options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).v1GuestsSchedulesBroadcastsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Youtube認証完了後のコールバック処理を行います。
     * @summary マルシェライブ配信のYoutube認証後処理
     * @param {RequestCallbackAuthYoutubeBroadcastRequest} requestCallbackAuthYoutubeBroadcastRequest 認証コールバック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest: RequestCallbackAuthYoutubeBroadcastRequest, options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestCallbackAuthYoutubeBroadcastRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Youtube側でライブ配信を作成します。
     * @summary マルシェライブ配信のYoutube連携
     * @param {RequestCreateYoutubeBroadcastRequest} requestCreateYoutubeBroadcastRequest Youtube配信設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest: RequestCreateYoutubeBroadcastRequest, options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).v1GuestsSchedulesBroadcastsYoutubePost(requestCreateYoutubeBroadcastRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LiveApi - axios parameter creator
 * @export
 */
export const LiveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定されたスケジュールのライブ配信一覧を取得します。
         * @summary ライブ配信一覧取得
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesGet: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesGet', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/lives`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信を削除します。
         * @summary ライブ配信削除
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesLiveIdDelete: async (scheduleId: string, liveId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdDelete', 'scheduleId', scheduleId)
            // verify required parameter 'liveId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdDelete', 'liveId', liveId)
            const localVarPath = `/v1/schedules/{scheduleId}/lives/{liveId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)))
                .replace(`{${"liveId"}}`, encodeURIComponent(String(liveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたライブ配信の詳細情報を取得します。
         * @summary ライブ配信取得
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesLiveIdGet: async (scheduleId: string, liveId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdGet', 'scheduleId', scheduleId)
            // verify required parameter 'liveId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdGet', 'liveId', liveId)
            const localVarPath = `/v1/schedules/{scheduleId}/lives/{liveId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)))
                .replace(`{${"liveId"}}`, encodeURIComponent(String(liveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信の情報を更新します。
         * @summary ライブ配信更新
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {RequestUpdateLiveRequest} requestUpdateLiveRequest ライブ配信情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesLiveIdPatch: async (scheduleId: string, liveId: string, requestUpdateLiveRequest: RequestUpdateLiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdPatch', 'scheduleId', scheduleId)
            // verify required parameter 'liveId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdPatch', 'liveId', liveId)
            // verify required parameter 'requestUpdateLiveRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesLiveIdPatch', 'requestUpdateLiveRequest', requestUpdateLiveRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/lives/{liveId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)))
                .replace(`{${"liveId"}}`, encodeURIComponent(String(liveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateLiveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいライブ配信を登録します。
         * @summary ライブ配信登録
         * @param {string} scheduleId スケジュールID
         * @param {RequestCreateLiveRequest} requestCreateLiveRequest ライブ配信情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesPost: async (scheduleId: string, requestCreateLiveRequest: RequestCreateLiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesPost', 'scheduleId', scheduleId)
            // verify required parameter 'requestCreateLiveRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdLivesPost', 'requestCreateLiveRequest', requestCreateLiveRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/lives`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateLiveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveApi - functional programming interface
 * @export
 */
export const LiveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定されたスケジュールのライブ配信一覧を取得します。
         * @summary ライブ配信一覧取得
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdLivesGet(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseLivesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdLivesGet(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveApi.v1SchedulesScheduleIdLivesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信を削除します。
         * @summary ライブ配信削除
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdLivesLiveIdDelete(scheduleId: string, liveId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdLivesLiveIdDelete(scheduleId, liveId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveApi.v1SchedulesScheduleIdLivesLiveIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたライブ配信の詳細情報を取得します。
         * @summary ライブ配信取得
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdLivesLiveIdGet(scheduleId: string, liveId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseLiveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdLivesLiveIdGet(scheduleId, liveId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveApi.v1SchedulesScheduleIdLivesLiveIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信の情報を更新します。
         * @summary ライブ配信更新
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {RequestUpdateLiveRequest} requestUpdateLiveRequest ライブ配信情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdLivesLiveIdPatch(scheduleId: string, liveId: string, requestUpdateLiveRequest: RequestUpdateLiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdLivesLiveIdPatch(scheduleId, liveId, requestUpdateLiveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveApi.v1SchedulesScheduleIdLivesLiveIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいライブ配信を登録します。
         * @summary ライブ配信登録
         * @param {string} scheduleId スケジュールID
         * @param {RequestCreateLiveRequest} requestCreateLiveRequest ライブ配信情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdLivesPost(scheduleId: string, requestCreateLiveRequest: RequestCreateLiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseLiveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdLivesPost(scheduleId, requestCreateLiveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveApi.v1SchedulesScheduleIdLivesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LiveApi - factory interface
 * @export
 */
export const LiveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveApiFp(configuration)
    return {
        /**
         * 指定されたスケジュールのライブ配信一覧を取得します。
         * @summary ライブ配信一覧取得
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesGet(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseLivesResponse> {
            return localVarFp.v1SchedulesScheduleIdLivesGet(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信を削除します。
         * @summary ライブ配信削除
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesLiveIdDelete(scheduleId: string, liveId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdLivesLiveIdDelete(scheduleId, liveId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたライブ配信の詳細情報を取得します。
         * @summary ライブ配信取得
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesLiveIdGet(scheduleId: string, liveId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseLiveResponse> {
            return localVarFp.v1SchedulesScheduleIdLivesLiveIdGet(scheduleId, liveId, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信の情報を更新します。
         * @summary ライブ配信更新
         * @param {string} scheduleId スケジュールID
         * @param {string} liveId ライブ配信ID
         * @param {RequestUpdateLiveRequest} requestUpdateLiveRequest ライブ配信情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesLiveIdPatch(scheduleId: string, liveId: string, requestUpdateLiveRequest: RequestUpdateLiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdLivesLiveIdPatch(scheduleId, liveId, requestUpdateLiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいライブ配信を登録します。
         * @summary ライブ配信登録
         * @param {string} scheduleId スケジュールID
         * @param {RequestCreateLiveRequest} requestCreateLiveRequest ライブ配信情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdLivesPost(scheduleId: string, requestCreateLiveRequest: RequestCreateLiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseLiveResponse> {
            return localVarFp.v1SchedulesScheduleIdLivesPost(scheduleId, requestCreateLiveRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiveApi - object-oriented interface
 * @export
 * @class LiveApi
 * @extends {BaseAPI}
 */
export class LiveApi extends BaseAPI {
    /**
     * 指定されたスケジュールのライブ配信一覧を取得します。
     * @summary ライブ配信一覧取得
     * @param {string} scheduleId スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1SchedulesScheduleIdLivesGet(scheduleId: string, options?: RawAxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1SchedulesScheduleIdLivesGet(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信を削除します。
     * @summary ライブ配信削除
     * @param {string} scheduleId スケジュールID
     * @param {string} liveId ライブ配信ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1SchedulesScheduleIdLivesLiveIdDelete(scheduleId: string, liveId: string, options?: RawAxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1SchedulesScheduleIdLivesLiveIdDelete(scheduleId, liveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたライブ配信の詳細情報を取得します。
     * @summary ライブ配信取得
     * @param {string} scheduleId スケジュールID
     * @param {string} liveId ライブ配信ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1SchedulesScheduleIdLivesLiveIdGet(scheduleId: string, liveId: string, options?: RawAxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1SchedulesScheduleIdLivesLiveIdGet(scheduleId, liveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信の情報を更新します。
     * @summary ライブ配信更新
     * @param {string} scheduleId スケジュールID
     * @param {string} liveId ライブ配信ID
     * @param {RequestUpdateLiveRequest} requestUpdateLiveRequest ライブ配信情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1SchedulesScheduleIdLivesLiveIdPatch(scheduleId: string, liveId: string, requestUpdateLiveRequest: RequestUpdateLiveRequest, options?: RawAxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1SchedulesScheduleIdLivesLiveIdPatch(scheduleId, liveId, requestUpdateLiveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいライブ配信を登録します。
     * @summary ライブ配信登録
     * @param {string} scheduleId スケジュールID
     * @param {RequestCreateLiveRequest} requestCreateLiveRequest ライブ配信情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    public v1SchedulesScheduleIdLivesPost(scheduleId: string, requestCreateLiveRequest: RequestCreateLiveRequest, options?: RawAxiosRequestConfig) {
        return LiveApiFp(this.configuration).v1SchedulesScheduleIdLivesPost(scheduleId, requestCreateLiveRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LiveCommentApi - axios parameter creator
 * @export
 */
export const LiveCommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ライブコメントの状態（無効/有効）を更新します。
         * @summary ライブコメント更新
         * @param {string} scheduleId スケジュールID
         * @param {string} commentId コメントID
         * @param {RequestUpdateLiveCommentRequest} requestUpdateLiveCommentRequest コメント情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdCommentsCommentIdPatch: async (scheduleId: string, commentId: string, requestUpdateLiveCommentRequest: RequestUpdateLiveCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdCommentsCommentIdPatch', 'scheduleId', scheduleId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdCommentsCommentIdPatch', 'commentId', commentId)
            // verify required parameter 'requestUpdateLiveCommentRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdCommentsCommentIdPatch', 'requestUpdateLiveCommentRequest', requestUpdateLiveCommentRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/comments/{commentId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateLiveCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたスケジュールのライブコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
         * @summary ライブコメント一覧取得
         * @param {string} scheduleId スケジュールID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [start] 検索開始日時（unixtime）
         * @param {number} [end] 検索終了日時（unixtime）
         * @param {string} [next] 次ページトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdCommentsGet: async (scheduleId: string, limit?: number, start?: number, end?: number, next?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdCommentsGet', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/comments`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveCommentApi - functional programming interface
 * @export
 */
export const LiveCommentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveCommentApiAxiosParamCreator(configuration)
    return {
        /**
         * ライブコメントの状態（無効/有効）を更新します。
         * @summary ライブコメント更新
         * @param {string} scheduleId スケジュールID
         * @param {string} commentId コメントID
         * @param {RequestUpdateLiveCommentRequest} requestUpdateLiveCommentRequest コメント情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdCommentsCommentIdPatch(scheduleId: string, commentId: string, requestUpdateLiveCommentRequest: RequestUpdateLiveCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdCommentsCommentIdPatch(scheduleId, commentId, requestUpdateLiveCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveCommentApi.v1SchedulesScheduleIdCommentsCommentIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたスケジュールのライブコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
         * @summary ライブコメント一覧取得
         * @param {string} scheduleId スケジュールID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [start] 検索開始日時（unixtime）
         * @param {number} [end] 検索終了日時（unixtime）
         * @param {string} [next] 次ページトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdCommentsGet(scheduleId: string, limit?: number, start?: number, end?: number, next?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseLiveCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdCommentsGet(scheduleId, limit, start, end, next, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveCommentApi.v1SchedulesScheduleIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LiveCommentApi - factory interface
 * @export
 */
export const LiveCommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveCommentApiFp(configuration)
    return {
        /**
         * ライブコメントの状態（無効/有効）を更新します。
         * @summary ライブコメント更新
         * @param {string} scheduleId スケジュールID
         * @param {string} commentId コメントID
         * @param {RequestUpdateLiveCommentRequest} requestUpdateLiveCommentRequest コメント情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdCommentsCommentIdPatch(scheduleId: string, commentId: string, requestUpdateLiveCommentRequest: RequestUpdateLiveCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdCommentsCommentIdPatch(scheduleId, commentId, requestUpdateLiveCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたスケジュールのライブコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
         * @summary ライブコメント一覧取得
         * @param {string} scheduleId スケジュールID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [start] 検索開始日時（unixtime）
         * @param {number} [end] 検索終了日時（unixtime）
         * @param {string} [next] 次ページトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdCommentsGet(scheduleId: string, limit?: number, start?: number, end?: number, next?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseLiveCommentsResponse> {
            return localVarFp.v1SchedulesScheduleIdCommentsGet(scheduleId, limit, start, end, next, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiveCommentApi - object-oriented interface
 * @export
 * @class LiveCommentApi
 * @extends {BaseAPI}
 */
export class LiveCommentApi extends BaseAPI {
    /**
     * ライブコメントの状態（無効/有効）を更新します。
     * @summary ライブコメント更新
     * @param {string} scheduleId スケジュールID
     * @param {string} commentId コメントID
     * @param {RequestUpdateLiveCommentRequest} requestUpdateLiveCommentRequest コメント情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveCommentApi
     */
    public v1SchedulesScheduleIdCommentsCommentIdPatch(scheduleId: string, commentId: string, requestUpdateLiveCommentRequest: RequestUpdateLiveCommentRequest, options?: RawAxiosRequestConfig) {
        return LiveCommentApiFp(this.configuration).v1SchedulesScheduleIdCommentsCommentIdPatch(scheduleId, commentId, requestUpdateLiveCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたスケジュールのライブコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
     * @summary ライブコメント一覧取得
     * @param {string} scheduleId スケジュールID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [start] 検索開始日時（unixtime）
     * @param {number} [end] 検索終了日時（unixtime）
     * @param {string} [next] 次ページトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveCommentApi
     */
    public v1SchedulesScheduleIdCommentsGet(scheduleId: string, limit?: number, start?: number, end?: number, next?: string, options?: RawAxiosRequestConfig) {
        return LiveCommentApiFp(this.configuration).v1SchedulesScheduleIdCommentsGet(scheduleId, limit, start, end, next, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 管理者あてのメッセージ一覧を取得します。ソート順指定が可能です。
         * @summary メッセージ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート(type,-type,read,-read,receivedAt,-receivedAt)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesGet: async (limit?: number, offset?: number, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたメッセージの詳細情報を取得します。
         * @summary メッセージ取得
         * @param {string} messageId メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesMessageIdGet: async (messageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('v1MessagesMessageIdGet', 'messageId', messageId)
            const localVarPath = `/v1/messages/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 管理者あてのメッセージ一覧を取得します。ソート順指定が可能です。
         * @summary メッセージ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート(type,-type,read,-read,receivedAt,-receivedAt)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MessagesGet(limit?: number, offset?: number, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MessagesGet(limit, offset, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageApi.v1MessagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたメッセージの詳細情報を取得します。
         * @summary メッセージ取得
         * @param {string} messageId メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MessagesMessageIdGet(messageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MessagesMessageIdGet(messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageApi.v1MessagesMessageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         * 管理者あてのメッセージ一覧を取得します。ソート順指定が可能です。
         * @summary メッセージ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [orders] ソート(type,-type,read,-read,receivedAt,-receivedAt)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesGet(limit?: number, offset?: number, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessagesResponse> {
            return localVarFp.v1MessagesGet(limit, offset, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたメッセージの詳細情報を取得します。
         * @summary メッセージ取得
         * @param {string} messageId メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesMessageIdGet(messageId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessageResponse> {
            return localVarFp.v1MessagesMessageIdGet(messageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 管理者あてのメッセージ一覧を取得します。ソート順指定が可能です。
     * @summary メッセージ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [orders] ソート(type,-type,read,-read,receivedAt,-receivedAt)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public v1MessagesGet(limit?: number, offset?: number, orders?: string, options?: RawAxiosRequestConfig) {
        return MessageApiFp(this.configuration).v1MessagesGet(limit, offset, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたメッセージの詳細情報を取得します。
     * @summary メッセージ取得
     * @param {string} messageId メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public v1MessagesMessageIdGet(messageId: string, options?: RawAxiosRequestConfig) {
        return MessageApiFp(this.configuration).v1MessagesMessageIdGet(messageId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 通知の一覧を取得します。期間や配信日時でのフィルタリング、ソート順指定が可能です。
         * @summary 通知一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {number} [since] 検索開始日時（unixtime）
         * @param {number} [until] 検索終了日時（unixtime）
         * @param {string} [orders] ソート(title,-title,publishedAt,-publishedAt)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsGet: async (limit?: number, offset?: number, since?: number, until?: number, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通知を削除します。
         * @summary 通知削除
         * @param {string} notificationId 通知ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsNotificationIdDelete: async (notificationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('v1NotificationsNotificationIdDelete', 'notificationId', notificationId)
            const localVarPath = `/v1/notifications/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された通知の詳細情報を取得します。
         * @summary 通知取得
         * @param {string} notificationId 通知ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsNotificationIdGet: async (notificationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('v1NotificationsNotificationIdGet', 'notificationId', notificationId)
            const localVarPath = `/v1/notifications/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通知の情報を更新します。
         * @summary 通知更新
         * @param {string} notificationId 通知ID
         * @param {RequestUpdateNotificationRequest} requestUpdateNotificationRequest 通知情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsNotificationIdPatch: async (notificationId: string, requestUpdateNotificationRequest: RequestUpdateNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('v1NotificationsNotificationIdPatch', 'notificationId', notificationId)
            // verify required parameter 'requestUpdateNotificationRequest' is not null or undefined
            assertParamExists('v1NotificationsNotificationIdPatch', 'requestUpdateNotificationRequest', requestUpdateNotificationRequest)
            const localVarPath = `/v1/notifications/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい通知を登録します。配信対象、配信日時などを指定できます。
         * @summary 通知登録
         * @param {RequestCreateNotificationRequest} requestCreateNotificationRequest 通知情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsPost: async (requestCreateNotificationRequest: RequestCreateNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateNotificationRequest' is not null or undefined
            assertParamExists('v1NotificationsPost', 'requestCreateNotificationRequest', requestCreateNotificationRequest)
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 通知の一覧を取得します。期間や配信日時でのフィルタリング、ソート順指定が可能です。
         * @summary 通知一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {number} [since] 検索開始日時（unixtime）
         * @param {number} [until] 検索終了日時（unixtime）
         * @param {string} [orders] ソート(title,-title,publishedAt,-publishedAt)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsGet(limit?: number, offset?: number, since?: number, until?: number, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNotificationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsGet(limit, offset, since, until, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.v1NotificationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 通知を削除します。
         * @summary 通知削除
         * @param {string} notificationId 通知ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsNotificationIdDelete(notificationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsNotificationIdDelete(notificationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.v1NotificationsNotificationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された通知の詳細情報を取得します。
         * @summary 通知取得
         * @param {string} notificationId 通知ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsNotificationIdGet(notificationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsNotificationIdGet(notificationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.v1NotificationsNotificationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 通知の情報を更新します。
         * @summary 通知更新
         * @param {string} notificationId 通知ID
         * @param {RequestUpdateNotificationRequest} requestUpdateNotificationRequest 通知情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsNotificationIdPatch(notificationId: string, requestUpdateNotificationRequest: RequestUpdateNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsNotificationIdPatch(notificationId, requestUpdateNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.v1NotificationsNotificationIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい通知を登録します。配信対象、配信日時などを指定できます。
         * @summary 通知登録
         * @param {RequestCreateNotificationRequest} requestCreateNotificationRequest 通知情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsPost(requestCreateNotificationRequest: RequestCreateNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsPost(requestCreateNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.v1NotificationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 通知の一覧を取得します。期間や配信日時でのフィルタリング、ソート順指定が可能です。
         * @summary 通知一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {number} [since] 検索開始日時（unixtime）
         * @param {number} [until] 検索終了日時（unixtime）
         * @param {string} [orders] ソート(title,-title,publishedAt,-publishedAt)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsGet(limit?: number, offset?: number, since?: number, until?: number, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseNotificationsResponse> {
            return localVarFp.v1NotificationsGet(limit, offset, since, until, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 通知を削除します。
         * @summary 通知削除
         * @param {string} notificationId 通知ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsNotificationIdDelete(notificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1NotificationsNotificationIdDelete(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された通知の詳細情報を取得します。
         * @summary 通知取得
         * @param {string} notificationId 通知ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsNotificationIdGet(notificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseNotificationResponse> {
            return localVarFp.v1NotificationsNotificationIdGet(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 通知の情報を更新します。
         * @summary 通知更新
         * @param {string} notificationId 通知ID
         * @param {RequestUpdateNotificationRequest} requestUpdateNotificationRequest 通知情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsNotificationIdPatch(notificationId: string, requestUpdateNotificationRequest: RequestUpdateNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1NotificationsNotificationIdPatch(notificationId, requestUpdateNotificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい通知を登録します。配信対象、配信日時などを指定できます。
         * @summary 通知登録
         * @param {RequestCreateNotificationRequest} requestCreateNotificationRequest 通知情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsPost(requestCreateNotificationRequest: RequestCreateNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseNotificationResponse> {
            return localVarFp.v1NotificationsPost(requestCreateNotificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 通知の一覧を取得します。期間や配信日時でのフィルタリング、ソート順指定が可能です。
     * @summary 通知一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {number} [since] 検索開始日時（unixtime）
     * @param {number} [until] 検索終了日時（unixtime）
     * @param {string} [orders] ソート(title,-title,publishedAt,-publishedAt)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1NotificationsGet(limit?: number, offset?: number, since?: number, until?: number, orders?: string, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1NotificationsGet(limit, offset, since, until, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 通知を削除します。
     * @summary 通知削除
     * @param {string} notificationId 通知ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1NotificationsNotificationIdDelete(notificationId: string, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1NotificationsNotificationIdDelete(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された通知の詳細情報を取得します。
     * @summary 通知取得
     * @param {string} notificationId 通知ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1NotificationsNotificationIdGet(notificationId: string, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1NotificationsNotificationIdGet(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 通知の情報を更新します。
     * @summary 通知更新
     * @param {string} notificationId 通知ID
     * @param {RequestUpdateNotificationRequest} requestUpdateNotificationRequest 通知情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1NotificationsNotificationIdPatch(notificationId: string, requestUpdateNotificationRequest: RequestUpdateNotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1NotificationsNotificationIdPatch(notificationId, requestUpdateNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい通知を登録します。配信対象、配信日時などを指定できます。
     * @summary 通知登録
     * @param {RequestCreateNotificationRequest} requestCreateNotificationRequest 通知情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public v1NotificationsPost(requestCreateNotificationRequest: RequestCreateNotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).v1NotificationsPost(requestCreateNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 注文履歴をCSV形式で出力します。
         * @summary 注文履歴のCSV出力
         * @param {RequestExportOrdersRequest} requestExportOrdersRequest 注文履歴のCSV出力
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersExportPost: async (requestExportOrdersRequest: RequestExportOrdersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestExportOrdersRequest' is not null or undefined
            assertParamExists('v1OrdersExportPost', 'requestExportOrdersRequest', requestExportOrdersRequest)
            const localVarPath = `/v1/orders/-/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestExportOrdersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文の一覧を取得します。コーディネータは自分の店舗の注文のみ取得できます。
         * @summary 注文一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {Array<number>} [statuses] 注文ステータスフィルタ
         * @param {Array<number>} [types] 注文タイプフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersGet: async (limit?: number, offset?: number, statuses?: Array<number>, types?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses;
            }

            if (types) {
                localVarQueryParameter['types'] = types;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文をキャンセルします。
         * @summary 注文キャンセル
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdCancelPost: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1OrdersOrderIdCancelPost', 'orderId', orderId)
            const localVarPath = `/v1/orders/{orderId}/cancel`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文を確定します。
         * @summary 注文確定
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdCapturePost: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1OrdersOrderIdCapturePost', 'orderId', orderId)
            const localVarPath = `/v1/orders/{orderId}/capture`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文対応を完了します。
         * @summary 注文対応完了
         * @param {string} orderId 注文ID
         * @param {RequestCompleteOrderRequest} requestCompleteOrderRequest 注文対応完了
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdCompletePost: async (orderId: string, requestCompleteOrderRequest: RequestCompleteOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1OrdersOrderIdCompletePost', 'orderId', orderId)
            // verify required parameter 'requestCompleteOrderRequest' is not null or undefined
            assertParamExists('v1OrdersOrderIdCompletePost', 'requestCompleteOrderRequest', requestCompleteOrderRequest)
            const localVarPath = `/v1/orders/{orderId}/complete`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCompleteOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文の下書きを保存します。
         * @summary 注文下書き保存
         * @param {string} orderId 注文ID
         * @param {RequestDraftOrderRequest} requestDraftOrderRequest 注文下書き保存
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdDraftPost: async (orderId: string, requestDraftOrderRequest: RequestDraftOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1OrdersOrderIdDraftPost', 'orderId', orderId)
            // verify required parameter 'requestDraftOrderRequest' is not null or undefined
            assertParamExists('v1OrdersOrderIdDraftPost', 'requestDraftOrderRequest', requestDraftOrderRequest)
            const localVarPath = `/v1/orders/{orderId}/draft`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDraftOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された注文の詳細情報を取得します。
         * @summary 注文取得
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1OrdersOrderIdGet', 'orderId', orderId)
            const localVarPath = `/v1/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文の返金を依頼します。
         * @summary 注文の返金依頼
         * @param {string} orderId 注文ID
         * @param {RequestRefundOrderRequest} requestRefundOrderRequest 注文の返金依頼
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdRefundPost: async (orderId: string, requestRefundOrderRequest: RequestRefundOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v1OrdersOrderIdRefundPost', 'orderId', orderId)
            // verify required parameter 'requestRefundOrderRequest' is not null or undefined
            assertParamExists('v1OrdersOrderIdRefundPost', 'requestRefundOrderRequest', requestRefundOrderRequest)
            const localVarPath = `/v1/orders/{orderId}/refund`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestRefundOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 注文履歴をCSV形式で出力します。
         * @summary 注文履歴のCSV出力
         * @param {RequestExportOrdersRequest} requestExportOrdersRequest 注文履歴のCSV出力
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersExportPost(requestExportOrdersRequest: RequestExportOrdersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersExportPost(requestExportOrdersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注文の一覧を取得します。コーディネータは自分の店舗の注文のみ取得できます。
         * @summary 注文一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {Array<number>} [statuses] 注文ステータスフィルタ
         * @param {Array<number>} [types] 注文タイプフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersGet(limit?: number, offset?: number, statuses?: Array<number>, types?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersGet(limit, offset, statuses, types, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注文をキャンセルします。
         * @summary 注文キャンセル
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersOrderIdCancelPost(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersOrderIdCancelPost(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersOrderIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注文を確定します。
         * @summary 注文確定
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersOrderIdCapturePost(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersOrderIdCapturePost(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersOrderIdCapturePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注文対応を完了します。
         * @summary 注文対応完了
         * @param {string} orderId 注文ID
         * @param {RequestCompleteOrderRequest} requestCompleteOrderRequest 注文対応完了
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersOrderIdCompletePost(orderId: string, requestCompleteOrderRequest: RequestCompleteOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersOrderIdCompletePost(orderId, requestCompleteOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersOrderIdCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注文の下書きを保存します。
         * @summary 注文下書き保存
         * @param {string} orderId 注文ID
         * @param {RequestDraftOrderRequest} requestDraftOrderRequest 注文下書き保存
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersOrderIdDraftPost(orderId: string, requestDraftOrderRequest: RequestDraftOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersOrderIdDraftPost(orderId, requestDraftOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersOrderIdDraftPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された注文の詳細情報を取得します。
         * @summary 注文取得
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersOrderIdGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersOrderIdGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersOrderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注文の返金を依頼します。
         * @summary 注文の返金依頼
         * @param {string} orderId 注文ID
         * @param {RequestRefundOrderRequest} requestRefundOrderRequest 注文の返金依頼
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrdersOrderIdRefundPost(orderId: string, requestRefundOrderRequest: RequestRefundOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrdersOrderIdRefundPost(orderId, requestRefundOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.v1OrdersOrderIdRefundPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 注文履歴をCSV形式で出力します。
         * @summary 注文履歴のCSV出力
         * @param {RequestExportOrdersRequest} requestExportOrdersRequest 注文履歴のCSV出力
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersExportPost(requestExportOrdersRequest: RequestExportOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrdersExportPost(requestExportOrdersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文の一覧を取得します。コーディネータは自分の店舗の注文のみ取得できます。
         * @summary 注文一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {Array<number>} [statuses] 注文ステータスフィルタ
         * @param {Array<number>} [types] 注文タイプフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersGet(limit?: number, offset?: number, statuses?: Array<number>, types?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<ResponseOrdersResponse> {
            return localVarFp.v1OrdersGet(limit, offset, statuses, types, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文をキャンセルします。
         * @summary 注文キャンセル
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdCancelPost(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrdersOrderIdCancelPost(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文を確定します。
         * @summary 注文確定
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdCapturePost(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrdersOrderIdCapturePost(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文対応を完了します。
         * @summary 注文対応完了
         * @param {string} orderId 注文ID
         * @param {RequestCompleteOrderRequest} requestCompleteOrderRequest 注文対応完了
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdCompletePost(orderId: string, requestCompleteOrderRequest: RequestCompleteOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrdersOrderIdCompletePost(orderId, requestCompleteOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文の下書きを保存します。
         * @summary 注文下書き保存
         * @param {string} orderId 注文ID
         * @param {RequestDraftOrderRequest} requestDraftOrderRequest 注文下書き保存
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdDraftPost(orderId: string, requestDraftOrderRequest: RequestDraftOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrdersOrderIdDraftPost(orderId, requestDraftOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された注文の詳細情報を取得します。
         * @summary 注文取得
         * @param {string} orderId 注文ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdGet(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseOrderResponse> {
            return localVarFp.v1OrdersOrderIdGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文の返金を依頼します。
         * @summary 注文の返金依頼
         * @param {string} orderId 注文ID
         * @param {RequestRefundOrderRequest} requestRefundOrderRequest 注文の返金依頼
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrdersOrderIdRefundPost(orderId: string, requestRefundOrderRequest: RequestRefundOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrdersOrderIdRefundPost(orderId, requestRefundOrderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 注文履歴をCSV形式で出力します。
     * @summary 注文履歴のCSV出力
     * @param {RequestExportOrdersRequest} requestExportOrdersRequest 注文履歴のCSV出力
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersExportPost(requestExportOrdersRequest: RequestExportOrdersRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersExportPost(requestExportOrdersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文の一覧を取得します。コーディネータは自分の店舗の注文のみ取得できます。
     * @summary 注文一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {Array<number>} [statuses] 注文ステータスフィルタ
     * @param {Array<number>} [types] 注文タイプフィルタ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersGet(limit?: number, offset?: number, statuses?: Array<number>, types?: Array<number>, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersGet(limit, offset, statuses, types, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文をキャンセルします。
     * @summary 注文キャンセル
     * @param {string} orderId 注文ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersOrderIdCancelPost(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersOrderIdCancelPost(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文を確定します。
     * @summary 注文確定
     * @param {string} orderId 注文ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersOrderIdCapturePost(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersOrderIdCapturePost(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文対応を完了します。
     * @summary 注文対応完了
     * @param {string} orderId 注文ID
     * @param {RequestCompleteOrderRequest} requestCompleteOrderRequest 注文対応完了
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersOrderIdCompletePost(orderId: string, requestCompleteOrderRequest: RequestCompleteOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersOrderIdCompletePost(orderId, requestCompleteOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文の下書きを保存します。
     * @summary 注文下書き保存
     * @param {string} orderId 注文ID
     * @param {RequestDraftOrderRequest} requestDraftOrderRequest 注文下書き保存
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersOrderIdDraftPost(orderId: string, requestDraftOrderRequest: RequestDraftOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersOrderIdDraftPost(orderId, requestDraftOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された注文の詳細情報を取得します。
     * @summary 注文取得
     * @param {string} orderId 注文ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersOrderIdGet(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersOrderIdGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文の返金を依頼します。
     * @summary 注文の返金依頼
     * @param {string} orderId 注文ID
     * @param {RequestRefundOrderRequest} requestRefundOrderRequest 注文の返金依頼
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public v1OrdersOrderIdRefundPost(orderId: string, requestRefundOrderRequest: RequestRefundOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).v1OrdersOrderIdRefundPost(orderId, requestRefundOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentSystemApi - axios parameter creator
 * @export
 */
export const PaymentSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 決済手段毎のシステム状態一覧を取得します。
         * @summary 決済システム一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PaymentSystemsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/payment-systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された決済手段のシステム状態を更新します。
         * @summary 決済システム更新
         * @param {number} methodType 決済手段タイプ
         * @param {RequestUpdatePaymentSystemRequest} requestUpdatePaymentSystemRequest 決済システム情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PaymentSystemsMethodTypePatch: async (methodType: number, requestUpdatePaymentSystemRequest: RequestUpdatePaymentSystemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'methodType' is not null or undefined
            assertParamExists('v1PaymentSystemsMethodTypePatch', 'methodType', methodType)
            // verify required parameter 'requestUpdatePaymentSystemRequest' is not null or undefined
            assertParamExists('v1PaymentSystemsMethodTypePatch', 'requestUpdatePaymentSystemRequest', requestUpdatePaymentSystemRequest)
            const localVarPath = `/v1/payment-systems/{methodType}`
                .replace(`{${"methodType"}}`, encodeURIComponent(String(methodType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdatePaymentSystemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentSystemApi - functional programming interface
 * @export
 */
export const PaymentSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * 決済手段毎のシステム状態一覧を取得します。
         * @summary 決済システム一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PaymentSystemsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePaymentSystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PaymentSystemsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentSystemApi.v1PaymentSystemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された決済手段のシステム状態を更新します。
         * @summary 決済システム更新
         * @param {number} methodType 決済手段タイプ
         * @param {RequestUpdatePaymentSystemRequest} requestUpdatePaymentSystemRequest 決済システム情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PaymentSystemsMethodTypePatch(methodType: number, requestUpdatePaymentSystemRequest: RequestUpdatePaymentSystemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PaymentSystemsMethodTypePatch(methodType, requestUpdatePaymentSystemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentSystemApi.v1PaymentSystemsMethodTypePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentSystemApi - factory interface
 * @export
 */
export const PaymentSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentSystemApiFp(configuration)
    return {
        /**
         * 決済手段毎のシステム状態一覧を取得します。
         * @summary 決済システム一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PaymentSystemsGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponsePaymentSystemsResponse> {
            return localVarFp.v1PaymentSystemsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された決済手段のシステム状態を更新します。
         * @summary 決済システム更新
         * @param {number} methodType 決済手段タイプ
         * @param {RequestUpdatePaymentSystemRequest} requestUpdatePaymentSystemRequest 決済システム情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PaymentSystemsMethodTypePatch(methodType: number, requestUpdatePaymentSystemRequest: RequestUpdatePaymentSystemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1PaymentSystemsMethodTypePatch(methodType, requestUpdatePaymentSystemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentSystemApi - object-oriented interface
 * @export
 * @class PaymentSystemApi
 * @extends {BaseAPI}
 */
export class PaymentSystemApi extends BaseAPI {
    /**
     * 決済手段毎のシステム状態一覧を取得します。
     * @summary 決済システム一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSystemApi
     */
    public v1PaymentSystemsGet(options?: RawAxiosRequestConfig) {
        return PaymentSystemApiFp(this.configuration).v1PaymentSystemsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された決済手段のシステム状態を更新します。
     * @summary 決済システム更新
     * @param {number} methodType 決済手段タイプ
     * @param {RequestUpdatePaymentSystemRequest} requestUpdatePaymentSystemRequest 決済システム情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSystemApi
     */
    public v1PaymentSystemsMethodTypePatch(methodType: number, requestUpdatePaymentSystemRequest: RequestUpdatePaymentSystemRequest, options?: RawAxiosRequestConfig) {
        return PaymentSystemApiFp(this.configuration).v1PaymentSystemsMethodTypePatch(methodType, requestUpdatePaymentSystemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostalCodeApi - axios parameter creator
 * @export
 */
export const PostalCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定された郵便番号から住所情報を検索します。
         * @summary 郵便番号検索
         * @param {string} postalCode 郵便番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PostalCodesPostalCodeGet: async (postalCode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postalCode' is not null or undefined
            assertParamExists('v1PostalCodesPostalCodeGet', 'postalCode', postalCode)
            const localVarPath = `/v1/postal-codes/{postalCode}`
                .replace(`{${"postalCode"}}`, encodeURIComponent(String(postalCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostalCodeApi - functional programming interface
 * @export
 */
export const PostalCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostalCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定された郵便番号から住所情報を検索します。
         * @summary 郵便番号検索
         * @param {string} postalCode 郵便番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PostalCodesPostalCodeGet(postalCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePostalCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PostalCodesPostalCodeGet(postalCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostalCodeApi.v1PostalCodesPostalCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PostalCodeApi - factory interface
 * @export
 */
export const PostalCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostalCodeApiFp(configuration)
    return {
        /**
         * 指定された郵便番号から住所情報を検索します。
         * @summary 郵便番号検索
         * @param {string} postalCode 郵便番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PostalCodesPostalCodeGet(postalCode: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponsePostalCodeResponse> {
            return localVarFp.v1PostalCodesPostalCodeGet(postalCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostalCodeApi - object-oriented interface
 * @export
 * @class PostalCodeApi
 * @extends {BaseAPI}
 */
export class PostalCodeApi extends BaseAPI {
    /**
     * 指定された郵便番号から住所情報を検索します。
     * @summary 郵便番号検索
     * @param {string} postalCode 郵便番号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostalCodeApi
     */
    public v1PostalCodesPostalCodeGet(postalCode: string, options?: RawAxiosRequestConfig) {
        return PostalCodeApiFp(this.configuration).v1PostalCodesPostalCodeGet(postalCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProducerApi - axios parameter creator
 * @export
 */
export const ProducerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 生産者の一覧を取得します。コーディネーターは管理店舗の生産者のみ取得可能です。
         * @summary 生産者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] 生産者名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersGet: async (limit?: number, offset?: number, username?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/producers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい生産者を登録します。コーディネーターは自身が管理する店舗の生産者のみ登録可能です。
         * @summary 生産者登録
         * @param {RequestCreateProducerRequest} requestCreateProducerRequest 生産者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersPost: async (requestCreateProducerRequest: RequestCreateProducerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateProducerRequest' is not null or undefined
            assertParamExists('v1ProducersPost', 'requestCreateProducerRequest', requestCreateProducerRequest)
            const localVarPath = `/v1/producers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateProducerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生産者を削除します。
         * @summary 生産者削除
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersProducerIdDelete: async (producerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1ProducersProducerIdDelete', 'producerId', producerId)
            const localVarPath = `/v1/producers/{producerId}`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された生産者の詳細情報を取得します。
         * @summary 生産者取得
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersProducerIdGet: async (producerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1ProducersProducerIdGet', 'producerId', producerId)
            const localVarPath = `/v1/producers/{producerId}`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生産者の情報を更新します。
         * @summary 生産者更新
         * @param {string} producerId 生産者ID
         * @param {RequestUpdateProducerRequest} requestUpdateProducerRequest 生産者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersProducerIdPatch: async (producerId: string, requestUpdateProducerRequest: RequestUpdateProducerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'producerId' is not null or undefined
            assertParamExists('v1ProducersProducerIdPatch', 'producerId', producerId)
            // verify required parameter 'requestUpdateProducerRequest' is not null or undefined
            assertParamExists('v1ProducersProducerIdPatch', 'requestUpdateProducerRequest', requestUpdateProducerRequest)
            const localVarPath = `/v1/producers/{producerId}`
                .replace(`{${"producerId"}}`, encodeURIComponent(String(producerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateProducerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProducerApi - functional programming interface
 * @export
 */
export const ProducerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProducerApiAxiosParamCreator(configuration)
    return {
        /**
         * 生産者の一覧を取得します。コーディネーターは管理店舗の生産者のみ取得可能です。
         * @summary 生産者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] 生産者名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProducersGet(limit?: number, offset?: number, username?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProducersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProducersGet(limit, offset, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProducerApi.v1ProducersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい生産者を登録します。コーディネーターは自身が管理する店舗の生産者のみ登録可能です。
         * @summary 生産者登録
         * @param {RequestCreateProducerRequest} requestCreateProducerRequest 生産者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProducersPost(requestCreateProducerRequest: RequestCreateProducerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProducerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProducersPost(requestCreateProducerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProducerApi.v1ProducersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生産者を削除します。
         * @summary 生産者削除
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProducersProducerIdDelete(producerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProducersProducerIdDelete(producerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProducerApi.v1ProducersProducerIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された生産者の詳細情報を取得します。
         * @summary 生産者取得
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProducersProducerIdGet(producerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProducerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProducersProducerIdGet(producerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProducerApi.v1ProducersProducerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生産者の情報を更新します。
         * @summary 生産者更新
         * @param {string} producerId 生産者ID
         * @param {RequestUpdateProducerRequest} requestUpdateProducerRequest 生産者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProducersProducerIdPatch(producerId: string, requestUpdateProducerRequest: RequestUpdateProducerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProducersProducerIdPatch(producerId, requestUpdateProducerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProducerApi.v1ProducersProducerIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProducerApi - factory interface
 * @export
 */
export const ProducerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProducerApiFp(configuration)
    return {
        /**
         * 生産者の一覧を取得します。コーディネーターは管理店舗の生産者のみ取得可能です。
         * @summary 生産者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [username] 生産者名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersGet(limit?: number, offset?: number, username?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProducersResponse> {
            return localVarFp.v1ProducersGet(limit, offset, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい生産者を登録します。コーディネーターは自身が管理する店舗の生産者のみ登録可能です。
         * @summary 生産者登録
         * @param {RequestCreateProducerRequest} requestCreateProducerRequest 生産者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersPost(requestCreateProducerRequest: RequestCreateProducerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProducerResponse> {
            return localVarFp.v1ProducersPost(requestCreateProducerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 生産者を削除します。
         * @summary 生産者削除
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersProducerIdDelete(producerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ProducersProducerIdDelete(producerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された生産者の詳細情報を取得します。
         * @summary 生産者取得
         * @param {string} producerId 生産者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersProducerIdGet(producerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProducerResponse> {
            return localVarFp.v1ProducersProducerIdGet(producerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 生産者の情報を更新します。
         * @summary 生産者更新
         * @param {string} producerId 生産者ID
         * @param {RequestUpdateProducerRequest} requestUpdateProducerRequest 生産者情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProducersProducerIdPatch(producerId: string, requestUpdateProducerRequest: RequestUpdateProducerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ProducersProducerIdPatch(producerId, requestUpdateProducerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProducerApi - object-oriented interface
 * @export
 * @class ProducerApi
 * @extends {BaseAPI}
 */
export class ProducerApi extends BaseAPI {
    /**
     * 生産者の一覧を取得します。コーディネーターは管理店舗の生産者のみ取得可能です。
     * @summary 生産者一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [username] 生産者名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1ProducersGet(limit?: number, offset?: number, username?: string, options?: RawAxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1ProducersGet(limit, offset, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい生産者を登録します。コーディネーターは自身が管理する店舗の生産者のみ登録可能です。
     * @summary 生産者登録
     * @param {RequestCreateProducerRequest} requestCreateProducerRequest 生産者情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1ProducersPost(requestCreateProducerRequest: RequestCreateProducerRequest, options?: RawAxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1ProducersPost(requestCreateProducerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生産者を削除します。
     * @summary 生産者削除
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1ProducersProducerIdDelete(producerId: string, options?: RawAxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1ProducersProducerIdDelete(producerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された生産者の詳細情報を取得します。
     * @summary 生産者取得
     * @param {string} producerId 生産者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1ProducersProducerIdGet(producerId: string, options?: RawAxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1ProducersProducerIdGet(producerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生産者の情報を更新します。
     * @summary 生産者更新
     * @param {string} producerId 生産者ID
     * @param {RequestUpdateProducerRequest} requestUpdateProducerRequest 生産者情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProducerApi
     */
    public v1ProducersProducerIdPatch(producerId: string, requestUpdateProducerRequest: RequestUpdateProducerRequest, options?: RawAxiosRequestConfig) {
        return ProducerApiFp(this.configuration).v1ProducersProducerIdPatch(producerId, requestUpdateProducerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 商品の一覧を取得します。
         * @summary 商品一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品名(あいまい検索)
         * @param {string} [producerId] 生産者ID
         * @param {string} [orders] ソート
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductsGet: async (limit?: number, offset?: number, name?: string, producerId?: string, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (producerId !== undefined) {
                localVarQueryParameter['producerId'] = producerId;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい商品を登録します。
         * @summary 商品登録
         * @param {RequestCreateProductRequest} requestCreateProductRequest 商品情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductsPost: async (requestCreateProductRequest: RequestCreateProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateProductRequest' is not null or undefined
            assertParamExists('v1ProductsPost', 'requestCreateProductRequest', requestCreateProductRequest)
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された商品の詳細情報を取得します。
         * @summary 商品取得
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductsProductIdGet: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('v1ProductsProductIdGet', 'productId', productId)
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 商品の一覧を取得します。
         * @summary 商品一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品名(あいまい検索)
         * @param {string} [producerId] 生産者ID
         * @param {string} [orders] ソート
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductsGet(limit?: number, offset?: number, name?: string, producerId?: string, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductsGet(limit, offset, name, producerId, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.v1ProductsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい商品を登録します。
         * @summary 商品登録
         * @param {RequestCreateProductRequest} requestCreateProductRequest 商品情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductsPost(requestCreateProductRequest: RequestCreateProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductsPost(requestCreateProductRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.v1ProductsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された商品の詳細情報を取得します。
         * @summary 商品取得
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductsProductIdGet(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductsProductIdGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.v1ProductsProductIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 商品の一覧を取得します。
         * @summary 商品一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品名(あいまい検索)
         * @param {string} [producerId] 生産者ID
         * @param {string} [orders] ソート
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductsGet(limit?: number, offset?: number, name?: string, producerId?: string, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductsResponse> {
            return localVarFp.v1ProductsGet(limit, offset, name, producerId, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい商品を登録します。
         * @summary 商品登録
         * @param {RequestCreateProductRequest} requestCreateProductRequest 商品情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductsPost(requestCreateProductRequest: RequestCreateProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductResponse> {
            return localVarFp.v1ProductsPost(requestCreateProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された商品の詳細情報を取得します。
         * @summary 商品取得
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductsProductIdGet(productId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductResponse> {
            return localVarFp.v1ProductsProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 商品の一覧を取得します。
     * @summary 商品一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 商品名(あいまい検索)
     * @param {string} [producerId] 生産者ID
     * @param {string} [orders] ソート
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1ProductsGet(limit?: number, offset?: number, name?: string, producerId?: string, orders?: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1ProductsGet(limit, offset, name, producerId, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい商品を登録します。
     * @summary 商品登録
     * @param {RequestCreateProductRequest} requestCreateProductRequest 商品情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1ProductsPost(requestCreateProductRequest: RequestCreateProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1ProductsPost(requestCreateProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された商品の詳細情報を取得します。
     * @summary 商品取得
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public v1ProductsProductIdGet(productId: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).v1ProductsProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductTagApi - axios parameter creator
 * @export
 */
export const ProductTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 商品タグの一覧を取得します。名前でのフィルタリング、ソート順指定が可能です。
         * @summary 商品タグ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品タグ名(あいまい検索)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsGet: async (limit?: number, offset?: number, name?: string, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/product-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい商品タグを登録します。
         * @summary 商品タグ登録
         * @param {RequestCreateProductTagRequest} requestCreateProductTagRequest 商品タグ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsPost: async (requestCreateProductTagRequest: RequestCreateProductTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateProductTagRequest' is not null or undefined
            assertParamExists('v1ProductTagsPost', 'requestCreateProductTagRequest', requestCreateProductTagRequest)
            const localVarPath = `/v1/product-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateProductTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品タグを削除します。
         * @summary 商品タグ削除
         * @param {string} productTagId 商品タグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsProductTagIdDelete: async (productTagId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTagId' is not null or undefined
            assertParamExists('v1ProductTagsProductTagIdDelete', 'productTagId', productTagId)
            const localVarPath = `/v1/product-tags/{productTagId}`
                .replace(`{${"productTagId"}}`, encodeURIComponent(String(productTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品タグの情報を更新します。
         * @summary 商品タグ更新
         * @param {string} productTagId 商品タグID
         * @param {RequestUpdateProductTagRequest} requestUpdateProductTagRequest 商品タグ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsProductTagIdPatch: async (productTagId: string, requestUpdateProductTagRequest: RequestUpdateProductTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTagId' is not null or undefined
            assertParamExists('v1ProductTagsProductTagIdPatch', 'productTagId', productTagId)
            // verify required parameter 'requestUpdateProductTagRequest' is not null or undefined
            assertParamExists('v1ProductTagsProductTagIdPatch', 'requestUpdateProductTagRequest', requestUpdateProductTagRequest)
            const localVarPath = `/v1/product-tags/{productTagId}`
                .replace(`{${"productTagId"}}`, encodeURIComponent(String(productTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateProductTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTagApi - functional programming interface
 * @export
 */
export const ProductTagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTagApiAxiosParamCreator(configuration)
    return {
        /**
         * 商品タグの一覧を取得します。名前でのフィルタリング、ソート順指定が可能です。
         * @summary 商品タグ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品タグ名(あいまい検索)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductTagsGet(limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductTagsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductTagsGet(limit, offset, name, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTagApi.v1ProductTagsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい商品タグを登録します。
         * @summary 商品タグ登録
         * @param {RequestCreateProductTagRequest} requestCreateProductTagRequest 商品タグ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductTagsPost(requestCreateProductTagRequest: RequestCreateProductTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductTagsPost(requestCreateProductTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTagApi.v1ProductTagsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品タグを削除します。
         * @summary 商品タグ削除
         * @param {string} productTagId 商品タグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductTagsProductTagIdDelete(productTagId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductTagsProductTagIdDelete(productTagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTagApi.v1ProductTagsProductTagIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品タグの情報を更新します。
         * @summary 商品タグ更新
         * @param {string} productTagId 商品タグID
         * @param {RequestUpdateProductTagRequest} requestUpdateProductTagRequest 商品タグ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProductTagsProductTagIdPatch(productTagId: string, requestUpdateProductTagRequest: RequestUpdateProductTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProductTagsProductTagIdPatch(productTagId, requestUpdateProductTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTagApi.v1ProductTagsProductTagIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductTagApi - factory interface
 * @export
 */
export const ProductTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTagApiFp(configuration)
    return {
        /**
         * 商品タグの一覧を取得します。名前でのフィルタリング、ソート順指定が可能です。
         * @summary 商品タグ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 商品タグ名(あいまい検索)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsGet(limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductTagsResponse> {
            return localVarFp.v1ProductTagsGet(limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい商品タグを登録します。
         * @summary 商品タグ登録
         * @param {RequestCreateProductTagRequest} requestCreateProductTagRequest 商品タグ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsPost(requestCreateProductTagRequest: RequestCreateProductTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductTagResponse> {
            return localVarFp.v1ProductTagsPost(requestCreateProductTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品タグを削除します。
         * @summary 商品タグ削除
         * @param {string} productTagId 商品タグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsProductTagIdDelete(productTagId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ProductTagsProductTagIdDelete(productTagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品タグの情報を更新します。
         * @summary 商品タグ更新
         * @param {string} productTagId 商品タグID
         * @param {RequestUpdateProductTagRequest} requestUpdateProductTagRequest 商品タグ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProductTagsProductTagIdPatch(productTagId: string, requestUpdateProductTagRequest: RequestUpdateProductTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ProductTagsProductTagIdPatch(productTagId, requestUpdateProductTagRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductTagApi - object-oriented interface
 * @export
 * @class ProductTagApi
 * @extends {BaseAPI}
 */
export class ProductTagApi extends BaseAPI {
    /**
     * 商品タグの一覧を取得します。名前でのフィルタリング、ソート順指定が可能です。
     * @summary 商品タグ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 商品タグ名(あいまい検索)
     * @param {string} [orders] ソート(name,-name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1ProductTagsGet(limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1ProductTagsGet(limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい商品タグを登録します。
     * @summary 商品タグ登録
     * @param {RequestCreateProductTagRequest} requestCreateProductTagRequest 商品タグ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1ProductTagsPost(requestCreateProductTagRequest: RequestCreateProductTagRequest, options?: RawAxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1ProductTagsPost(requestCreateProductTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品タグを削除します。
     * @summary 商品タグ削除
     * @param {string} productTagId 商品タグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1ProductTagsProductTagIdDelete(productTagId: string, options?: RawAxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1ProductTagsProductTagIdDelete(productTagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品タグの情報を更新します。
     * @summary 商品タグ更新
     * @param {string} productTagId 商品タグID
     * @param {RequestUpdateProductTagRequest} requestUpdateProductTagRequest 商品タグ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTagApi
     */
    public v1ProductTagsProductTagIdPatch(productTagId: string, requestUpdateProductTagRequest: RequestUpdateProductTagRequest, options?: RawAxiosRequestConfig) {
        return ProductTagApiFp(this.configuration).v1ProductTagsProductTagIdPatch(productTagId, requestUpdateProductTagRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductTypeApi - axios parameter creator
 * @export
 */
export const ProductTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 品目の一覧を取得します。商品種別ID指定時はその種別の品目のみ取得します。
         * @summary 品目一覧取得
         * @param {string} categoryId 商品種別ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesGet: async (categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesGet', 'categoryId', categoryId)
            const localVarPath = `/v1/categories/{categoryId}/product-types`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい品目を登録します。
         * @summary 品目登録
         * @param {string} categoryId 商品種別ID
         * @param {RequestCreateProductTypeRequest} requestCreateProductTypeRequest 品目情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesPost: async (categoryId: string, requestCreateProductTypeRequest: RequestCreateProductTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesPost', 'categoryId', categoryId)
            // verify required parameter 'requestCreateProductTypeRequest' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesPost', 'requestCreateProductTypeRequest', requestCreateProductTypeRequest)
            const localVarPath = `/v1/categories/{categoryId}/product-types`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateProductTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 品目を削除します。
         * @summary 品目削除
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesProductTypeIdDelete: async (categoryId: string, productTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesProductTypeIdDelete', 'categoryId', categoryId)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesProductTypeIdDelete', 'productTypeId', productTypeId)
            const localVarPath = `/v1/categories/{categoryId}/product-types/{productTypeId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)))
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 品目の情報を更新します。
         * @summary 品目更新
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {RequestUpdateProductTypeRequest} requestUpdateProductTypeRequest 品目情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesProductTypeIdPatch: async (categoryId: string, productTypeId: string, requestUpdateProductTypeRequest: RequestUpdateProductTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesProductTypeIdPatch', 'categoryId', categoryId)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesProductTypeIdPatch', 'productTypeId', productTypeId)
            // verify required parameter 'requestUpdateProductTypeRequest' is not null or undefined
            assertParamExists('v1CategoriesCategoryIdProductTypesProductTypeIdPatch', 'requestUpdateProductTypeRequest', requestUpdateProductTypeRequest)
            const localVarPath = `/v1/categories/{categoryId}/product-types/{productTypeId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)))
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateProductTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTypeApi - functional programming interface
 * @export
 */
export const ProductTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 品目の一覧を取得します。商品種別ID指定時はその種別の品目のみ取得します。
         * @summary 品目一覧取得
         * @param {string} categoryId 商品種別ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesCategoryIdProductTypesGet(categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesCategoryIdProductTypesGet(categoryId, limit, offset, name, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.v1CategoriesCategoryIdProductTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい品目を登録します。
         * @summary 品目登録
         * @param {string} categoryId 商品種別ID
         * @param {RequestCreateProductTypeRequest} requestCreateProductTypeRequest 品目情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesCategoryIdProductTypesPost(categoryId: string, requestCreateProductTypeRequest: RequestCreateProductTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProductTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesCategoryIdProductTypesPost(categoryId, requestCreateProductTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.v1CategoriesCategoryIdProductTypesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 品目を削除します。
         * @summary 品目削除
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesCategoryIdProductTypesProductTypeIdDelete(categoryId: string, productTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesCategoryIdProductTypesProductTypeIdDelete(categoryId, productTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.v1CategoriesCategoryIdProductTypesProductTypeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 品目の情報を更新します。
         * @summary 品目更新
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {RequestUpdateProductTypeRequest} requestUpdateProductTypeRequest 品目情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CategoriesCategoryIdProductTypesProductTypeIdPatch(categoryId: string, productTypeId: string, requestUpdateProductTypeRequest: RequestUpdateProductTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CategoriesCategoryIdProductTypesProductTypeIdPatch(categoryId, productTypeId, requestUpdateProductTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.v1CategoriesCategoryIdProductTypesProductTypeIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductTypeApi - factory interface
 * @export
 */
export const ProductTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTypeApiFp(configuration)
    return {
        /**
         * 品目の一覧を取得します。商品種別ID指定時はその種別の品目のみ取得します。
         * @summary 品目一覧取得
         * @param {string} categoryId 商品種別ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 品目名(あいまい検索)
         * @param {string} [orders] ソート(name,-name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesGet(categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductTypesResponse> {
            return localVarFp.v1CategoriesCategoryIdProductTypesGet(categoryId, limit, offset, name, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい品目を登録します。
         * @summary 品目登録
         * @param {string} categoryId 商品種別ID
         * @param {RequestCreateProductTypeRequest} requestCreateProductTypeRequest 品目情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesPost(categoryId: string, requestCreateProductTypeRequest: RequestCreateProductTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProductTypeResponse> {
            return localVarFp.v1CategoriesCategoryIdProductTypesPost(categoryId, requestCreateProductTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 品目を削除します。
         * @summary 品目削除
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesProductTypeIdDelete(categoryId: string, productTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CategoriesCategoryIdProductTypesProductTypeIdDelete(categoryId, productTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 品目の情報を更新します。
         * @summary 品目更新
         * @param {string} categoryId 商品種別ID
         * @param {string} productTypeId 品目ID
         * @param {RequestUpdateProductTypeRequest} requestUpdateProductTypeRequest 品目情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CategoriesCategoryIdProductTypesProductTypeIdPatch(categoryId: string, productTypeId: string, requestUpdateProductTypeRequest: RequestUpdateProductTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CategoriesCategoryIdProductTypesProductTypeIdPatch(categoryId, productTypeId, requestUpdateProductTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductTypeApi - object-oriented interface
 * @export
 * @class ProductTypeApi
 * @extends {BaseAPI}
 */
export class ProductTypeApi extends BaseAPI {
    /**
     * 品目の一覧を取得します。商品種別ID指定時はその種別の品目のみ取得します。
     * @summary 品目一覧取得
     * @param {string} categoryId 商品種別ID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 品目名(あいまい検索)
     * @param {string} [orders] ソート(name,-name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1CategoriesCategoryIdProductTypesGet(categoryId: string, limit?: number, offset?: number, name?: string, orders?: string, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1CategoriesCategoryIdProductTypesGet(categoryId, limit, offset, name, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい品目を登録します。
     * @summary 品目登録
     * @param {string} categoryId 商品種別ID
     * @param {RequestCreateProductTypeRequest} requestCreateProductTypeRequest 品目情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1CategoriesCategoryIdProductTypesPost(categoryId: string, requestCreateProductTypeRequest: RequestCreateProductTypeRequest, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1CategoriesCategoryIdProductTypesPost(categoryId, requestCreateProductTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 品目を削除します。
     * @summary 品目削除
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1CategoriesCategoryIdProductTypesProductTypeIdDelete(categoryId: string, productTypeId: string, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1CategoriesCategoryIdProductTypesProductTypeIdDelete(categoryId, productTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 品目の情報を更新します。
     * @summary 品目更新
     * @param {string} categoryId 商品種別ID
     * @param {string} productTypeId 品目ID
     * @param {RequestUpdateProductTypeRequest} requestUpdateProductTypeRequest 品目情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public v1CategoriesCategoryIdProductTypesProductTypeIdPatch(categoryId: string, productTypeId: string, requestUpdateProductTypeRequest: RequestUpdateProductTypeRequest, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).v1CategoriesCategoryIdProductTypesProductTypeIdPatch(categoryId, productTypeId, requestUpdateProductTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロモーションの一覧を取得します。ページネーション、ショップ・タイトルでのフィルタリング、ソート機能に対応しています。
         * @summary プロモーション一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [shopId] ショップID
         * @param {string} [title] プロモーションタイトル
         * @param {boolean} [withAllTarget] 全ショップ対象のプロモーションも含める
         * @param {string} [orders] ソート順序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsGet: async (limit?: number, offset?: number, shopId?: string, title?: string, withAllTarget?: boolean, orders?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['shopId'] = shopId;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (withAllTarget !== undefined) {
                localVarQueryParameter['withAllTarget'] = withAllTarget;
            }

            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいプロモーションを登録します。
         * @summary プロモーション登録
         * @param {RequestCreatePromotionRequest} requestCreatePromotionRequest プロモーション情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPost: async (requestCreatePromotionRequest: RequestCreatePromotionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreatePromotionRequest' is not null or undefined
            assertParamExists('v1PromotionsPost', 'requestCreatePromotionRequest', requestCreatePromotionRequest)
            const localVarPath = `/v1/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreatePromotionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロモーションを削除します。
         * @summary プロモーション削除
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPromotionIdDelete: async (promotionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('v1PromotionsPromotionIdDelete', 'promotionId', promotionId)
            const localVarPath = `/v1/promotions/{promotionId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたプロモーションの詳細情報を取得します。
         * @summary プロモーション取得
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPromotionIdGet: async (promotionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('v1PromotionsPromotionIdGet', 'promotionId', promotionId)
            const localVarPath = `/v1/promotions/{promotionId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロモーションの情報を更新します。
         * @summary プロモーション更新
         * @param {string} promotionId プロモーションID
         * @param {RequestUpdatePromotionRequest} requestUpdatePromotionRequest プロモーション情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPromotionIdPatch: async (promotionId: string, requestUpdatePromotionRequest: RequestUpdatePromotionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('v1PromotionsPromotionIdPatch', 'promotionId', promotionId)
            // verify required parameter 'requestUpdatePromotionRequest' is not null or undefined
            assertParamExists('v1PromotionsPromotionIdPatch', 'requestUpdatePromotionRequest', requestUpdatePromotionRequest)
            const localVarPath = `/v1/promotions/{promotionId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdatePromotionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * プロモーションの一覧を取得します。ページネーション、ショップ・タイトルでのフィルタリング、ソート機能に対応しています。
         * @summary プロモーション一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [shopId] ショップID
         * @param {string} [title] プロモーションタイトル
         * @param {boolean} [withAllTarget] 全ショップ対象のプロモーションも含める
         * @param {string} [orders] ソート順序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PromotionsGet(limit?: number, offset?: number, shopId?: string, title?: string, withAllTarget?: boolean, orders?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePromotionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PromotionsGet(limit, offset, shopId, title, withAllTarget, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.v1PromotionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいプロモーションを登録します。
         * @summary プロモーション登録
         * @param {RequestCreatePromotionRequest} requestCreatePromotionRequest プロモーション情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PromotionsPost(requestCreatePromotionRequest: RequestCreatePromotionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PromotionsPost(requestCreatePromotionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.v1PromotionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * プロモーションを削除します。
         * @summary プロモーション削除
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PromotionsPromotionIdDelete(promotionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PromotionsPromotionIdDelete(promotionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.v1PromotionsPromotionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたプロモーションの詳細情報を取得します。
         * @summary プロモーション取得
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PromotionsPromotionIdGet(promotionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PromotionsPromotionIdGet(promotionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.v1PromotionsPromotionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * プロモーションの情報を更新します。
         * @summary プロモーション更新
         * @param {string} promotionId プロモーションID
         * @param {RequestUpdatePromotionRequest} requestUpdatePromotionRequest プロモーション情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PromotionsPromotionIdPatch(promotionId: string, requestUpdatePromotionRequest: RequestUpdatePromotionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PromotionsPromotionIdPatch(promotionId, requestUpdatePromotionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.v1PromotionsPromotionIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * プロモーションの一覧を取得します。ページネーション、ショップ・タイトルでのフィルタリング、ソート機能に対応しています。
         * @summary プロモーション一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [shopId] ショップID
         * @param {string} [title] プロモーションタイトル
         * @param {boolean} [withAllTarget] 全ショップ対象のプロモーションも含める
         * @param {string} [orders] ソート順序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsGet(limit?: number, offset?: number, shopId?: string, title?: string, withAllTarget?: boolean, orders?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponsePromotionsResponse> {
            return localVarFp.v1PromotionsGet(limit, offset, shopId, title, withAllTarget, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいプロモーションを登録します。
         * @summary プロモーション登録
         * @param {RequestCreatePromotionRequest} requestCreatePromotionRequest プロモーション情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPost(requestCreatePromotionRequest: RequestCreatePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponsePromotionResponse> {
            return localVarFp.v1PromotionsPost(requestCreatePromotionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * プロモーションを削除します。
         * @summary プロモーション削除
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPromotionIdDelete(promotionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1PromotionsPromotionIdDelete(promotionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたプロモーションの詳細情報を取得します。
         * @summary プロモーション取得
         * @param {string} promotionId プロモーションID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPromotionIdGet(promotionId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponsePromotionResponse> {
            return localVarFp.v1PromotionsPromotionIdGet(promotionId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロモーションの情報を更新します。
         * @summary プロモーション更新
         * @param {string} promotionId プロモーションID
         * @param {RequestUpdatePromotionRequest} requestUpdatePromotionRequest プロモーション情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PromotionsPromotionIdPatch(promotionId: string, requestUpdatePromotionRequest: RequestUpdatePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1PromotionsPromotionIdPatch(promotionId, requestUpdatePromotionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     * プロモーションの一覧を取得します。ページネーション、ショップ・タイトルでのフィルタリング、ソート機能に対応しています。
     * @summary プロモーション一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [shopId] ショップID
     * @param {string} [title] プロモーションタイトル
     * @param {boolean} [withAllTarget] 全ショップ対象のプロモーションも含める
     * @param {string} [orders] ソート順序
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1PromotionsGet(limit?: number, offset?: number, shopId?: string, title?: string, withAllTarget?: boolean, orders?: string, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1PromotionsGet(limit, offset, shopId, title, withAllTarget, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいプロモーションを登録します。
     * @summary プロモーション登録
     * @param {RequestCreatePromotionRequest} requestCreatePromotionRequest プロモーション情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1PromotionsPost(requestCreatePromotionRequest: RequestCreatePromotionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1PromotionsPost(requestCreatePromotionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロモーションを削除します。
     * @summary プロモーション削除
     * @param {string} promotionId プロモーションID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1PromotionsPromotionIdDelete(promotionId: string, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1PromotionsPromotionIdDelete(promotionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたプロモーションの詳細情報を取得します。
     * @summary プロモーション取得
     * @param {string} promotionId プロモーションID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1PromotionsPromotionIdGet(promotionId: string, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1PromotionsPromotionIdGet(promotionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロモーションの情報を更新します。
     * @summary プロモーション更新
     * @param {string} promotionId プロモーションID
     * @param {RequestUpdatePromotionRequest} requestUpdatePromotionRequest プロモーション情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public v1PromotionsPromotionIdPatch(promotionId: string, requestUpdatePromotionRequest: RequestUpdatePromotionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).v1PromotionsPromotionIdPatch(promotionId, requestUpdatePromotionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RelatedProducerApi - axios parameter creator
 * @export
 */
export const RelatedProducerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定されたコーディネーターに関連する生産者の一覧を取得します。
         * @summary 関連生産者一覧取得
         * @param {string} coordinatorId コーディネーターID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdProducersGet: async (coordinatorId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdProducersGet', 'coordinatorId', coordinatorId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/producers`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelatedProducerApi - functional programming interface
 * @export
 */
export const RelatedProducerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelatedProducerApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定されたコーディネーターに関連する生産者の一覧を取得します。
         * @summary 関連生産者一覧取得
         * @param {string} coordinatorId コーディネーターID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdProducersGet(coordinatorId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProducersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdProducersGet(coordinatorId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelatedProducerApi.v1CoordinatorsCoordinatorIdProducersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RelatedProducerApi - factory interface
 * @export
 */
export const RelatedProducerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelatedProducerApiFp(configuration)
    return {
        /**
         * 指定されたコーディネーターに関連する生産者の一覧を取得します。
         * @summary 関連生産者一覧取得
         * @param {string} coordinatorId コーディネーターID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdProducersGet(coordinatorId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseProducersResponse> {
            return localVarFp.v1CoordinatorsCoordinatorIdProducersGet(coordinatorId, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RelatedProducerApi - object-oriented interface
 * @export
 * @class RelatedProducerApi
 * @extends {BaseAPI}
 */
export class RelatedProducerApi extends BaseAPI {
    /**
     * 指定されたコーディネーターに関連する生産者の一覧を取得します。
     * @summary 関連生産者一覧取得
     * @param {string} coordinatorId コーディネーターID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatedProducerApi
     */
    public v1CoordinatorsCoordinatorIdProducersGet(coordinatorId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return RelatedProducerApiFp(this.configuration).v1CoordinatorsCoordinatorIdProducersGet(coordinatorId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * マルシェ開催スケジュールの一覧を取得します。ページネーションに対応しています。
         * @summary マルシェ開催スケジュール一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいマルシェ開催スケジュールを登録します。
         * @summary マルシェ開催スケジュール登録
         * @param {RequestCreateScheduleRequest} requestCreateScheduleRequest スケジュール情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesPost: async (requestCreateScheduleRequest: RequestCreateScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateScheduleRequest' is not null or undefined
            assertParamExists('v1SchedulesPost', 'requestCreateScheduleRequest', requestCreateScheduleRequest)
            const localVarPath = `/v1/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたマルシェ開催スケジュールの視聴者分析データを取得します。集計期間と集計間隔を指定できます。
         * @summary マルシェ分析情報取得
         * @param {string} scheduleId スケジュールID
         * @param {number} [startAt] 集計開始日時 (unixtime,未指定の場合はスケジュール開始時間)
         * @param {number} [endAt] 集計終了日時 (unixtime,未指定の場合はスケジュール終了時間)
         * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdAnalyticsGet: async (scheduleId: string, startAt?: number, endAt?: number, viewerLogInterval?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdAnalyticsGet', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}/analytics`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }

            if (endAt !== undefined) {
                localVarQueryParameter['endAt'] = endAt;
            }

            if (viewerLogInterval !== undefined) {
                localVarQueryParameter['viewerLogInterval'] = viewerLogInterval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マルシェ開催スケジュールの承認状態を更新します。
         * @summary マルシェ開催スケジュール承認
         * @param {string} scheduleId スケジュールID
         * @param {RequestApproveScheduleRequest} requestApproveScheduleRequest 承認情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdApprovalPatch: async (scheduleId: string, requestApproveScheduleRequest: RequestApproveScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdApprovalPatch', 'scheduleId', scheduleId)
            // verify required parameter 'requestApproveScheduleRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdApprovalPatch', 'requestApproveScheduleRequest', requestApproveScheduleRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/approval`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestApproveScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マルシェ開催スケジュールを削除します。
         * @summary マルシェ開催スケジュール削除
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdDelete: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdDelete', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたマルシェ開催スケジュールの詳細情報を取得します。
         * @summary マルシェ開催スケジュール取得
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdGet: async (scheduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdGet', 'scheduleId', scheduleId)
            const localVarPath = `/v1/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マルシェ開催スケジュールの情報を更新します。
         * @summary マルシェ開催スケジュール更新
         * @param {string} scheduleId スケジュールID
         * @param {RequestUpdateScheduleRequest} requestUpdateScheduleRequest スケジュール情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdPatch: async (scheduleId: string, requestUpdateScheduleRequest: RequestUpdateScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdPatch', 'scheduleId', scheduleId)
            // verify required parameter 'requestUpdateScheduleRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdPatch', 'requestUpdateScheduleRequest', requestUpdateScheduleRequest)
            const localVarPath = `/v1/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マルシェ開催スケジュールの公開状態を更新します。
         * @summary マルシェ開催スケジュール公開
         * @param {string} scheduleId スケジュールID
         * @param {RequestPublishScheduleRequest} requestPublishScheduleRequest 公開設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdPublishPatch: async (scheduleId: string, requestPublishScheduleRequest: RequestPublishScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdPublishPatch', 'scheduleId', scheduleId)
            // verify required parameter 'requestPublishScheduleRequest' is not null or undefined
            assertParamExists('v1SchedulesScheduleIdPublishPatch', 'requestPublishScheduleRequest', requestPublishScheduleRequest)
            const localVarPath = `/v1/schedules/{scheduleId}/publish`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestPublishScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * マルシェ開催スケジュールの一覧を取得します。ページネーションに対応しています。
         * @summary マルシェ開催スケジュール一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSchedulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいマルシェ開催スケジュールを登録します。
         * @summary マルシェ開催スケジュール登録
         * @param {RequestCreateScheduleRequest} requestCreateScheduleRequest スケジュール情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesPost(requestCreateScheduleRequest: RequestCreateScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesPost(requestCreateScheduleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたマルシェ開催スケジュールの視聴者分析データを取得します。集計期間と集計間隔を指定できます。
         * @summary マルシェ分析情報取得
         * @param {string} scheduleId スケジュールID
         * @param {number} [startAt] 集計開始日時 (unixtime,未指定の場合はスケジュール開始時間)
         * @param {number} [endAt] 集計終了日時 (unixtime,未指定の場合はスケジュール終了時間)
         * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdAnalyticsGet(scheduleId: string, startAt?: number, endAt?: number, viewerLogInterval?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAnalyzeScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdAnalyticsGet(scheduleId, startAt, endAt, viewerLogInterval, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesScheduleIdAnalyticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マルシェ開催スケジュールの承認状態を更新します。
         * @summary マルシェ開催スケジュール承認
         * @param {string} scheduleId スケジュールID
         * @param {RequestApproveScheduleRequest} requestApproveScheduleRequest 承認情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdApprovalPatch(scheduleId: string, requestApproveScheduleRequest: RequestApproveScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdApprovalPatch(scheduleId, requestApproveScheduleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesScheduleIdApprovalPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マルシェ開催スケジュールを削除します。
         * @summary マルシェ開催スケジュール削除
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdDelete(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdDelete(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesScheduleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたマルシェ開催スケジュールの詳細情報を取得します。
         * @summary マルシェ開催スケジュール取得
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdGet(scheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdGet(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesScheduleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マルシェ開催スケジュールの情報を更新します。
         * @summary マルシェ開催スケジュール更新
         * @param {string} scheduleId スケジュールID
         * @param {RequestUpdateScheduleRequest} requestUpdateScheduleRequest スケジュール情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdPatch(scheduleId: string, requestUpdateScheduleRequest: RequestUpdateScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdPatch(scheduleId, requestUpdateScheduleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesScheduleIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マルシェ開催スケジュールの公開状態を更新します。
         * @summary マルシェ開催スケジュール公開
         * @param {string} scheduleId スケジュールID
         * @param {RequestPublishScheduleRequest} requestPublishScheduleRequest 公開設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesScheduleIdPublishPatch(scheduleId: string, requestPublishScheduleRequest: RequestPublishScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesScheduleIdPublishPatch(scheduleId, requestPublishScheduleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.v1SchedulesScheduleIdPublishPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * マルシェ開催スケジュールの一覧を取得します。ページネーションに対応しています。
         * @summary マルシェ開催スケジュール一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSchedulesResponse> {
            return localVarFp.v1SchedulesGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいマルシェ開催スケジュールを登録します。
         * @summary マルシェ開催スケジュール登録
         * @param {RequestCreateScheduleRequest} requestCreateScheduleRequest スケジュール情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesPost(requestCreateScheduleRequest: RequestCreateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseScheduleResponse> {
            return localVarFp.v1SchedulesPost(requestCreateScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたマルシェ開催スケジュールの視聴者分析データを取得します。集計期間と集計間隔を指定できます。
         * @summary マルシェ分析情報取得
         * @param {string} scheduleId スケジュールID
         * @param {number} [startAt] 集計開始日時 (unixtime,未指定の場合はスケジュール開始時間)
         * @param {number} [endAt] 集計終了日時 (unixtime,未指定の場合はスケジュール終了時間)
         * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdAnalyticsGet(scheduleId: string, startAt?: number, endAt?: number, viewerLogInterval?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAnalyzeScheduleResponse> {
            return localVarFp.v1SchedulesScheduleIdAnalyticsGet(scheduleId, startAt, endAt, viewerLogInterval, options).then((request) => request(axios, basePath));
        },
        /**
         * マルシェ開催スケジュールの承認状態を更新します。
         * @summary マルシェ開催スケジュール承認
         * @param {string} scheduleId スケジュールID
         * @param {RequestApproveScheduleRequest} requestApproveScheduleRequest 承認情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdApprovalPatch(scheduleId: string, requestApproveScheduleRequest: RequestApproveScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdApprovalPatch(scheduleId, requestApproveScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * マルシェ開催スケジュールを削除します。
         * @summary マルシェ開催スケジュール削除
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdDelete(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdDelete(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたマルシェ開催スケジュールの詳細情報を取得します。
         * @summary マルシェ開催スケジュール取得
         * @param {string} scheduleId スケジュールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdGet(scheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseScheduleResponse> {
            return localVarFp.v1SchedulesScheduleIdGet(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * マルシェ開催スケジュールの情報を更新します。
         * @summary マルシェ開催スケジュール更新
         * @param {string} scheduleId スケジュールID
         * @param {RequestUpdateScheduleRequest} requestUpdateScheduleRequest スケジュール情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdPatch(scheduleId: string, requestUpdateScheduleRequest: RequestUpdateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdPatch(scheduleId, requestUpdateScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * マルシェ開催スケジュールの公開状態を更新します。
         * @summary マルシェ開催スケジュール公開
         * @param {string} scheduleId スケジュールID
         * @param {RequestPublishScheduleRequest} requestPublishScheduleRequest 公開設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesScheduleIdPublishPatch(scheduleId: string, requestPublishScheduleRequest: RequestPublishScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SchedulesScheduleIdPublishPatch(scheduleId, requestPublishScheduleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * マルシェ開催スケジュールの一覧を取得します。ページネーションに対応しています。
     * @summary マルシェ開催スケジュール一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいマルシェ開催スケジュールを登録します。
     * @summary マルシェ開催スケジュール登録
     * @param {RequestCreateScheduleRequest} requestCreateScheduleRequest スケジュール情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesPost(requestCreateScheduleRequest: RequestCreateScheduleRequest, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesPost(requestCreateScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたマルシェ開催スケジュールの視聴者分析データを取得します。集計期間と集計間隔を指定できます。
     * @summary マルシェ分析情報取得
     * @param {string} scheduleId スケジュールID
     * @param {number} [startAt] 集計開始日時 (unixtime,未指定の場合はスケジュール開始時間)
     * @param {number} [endAt] 集計終了日時 (unixtime,未指定の場合はスケジュール終了時間)
     * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesScheduleIdAnalyticsGet(scheduleId: string, startAt?: number, endAt?: number, viewerLogInterval?: string, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesScheduleIdAnalyticsGet(scheduleId, startAt, endAt, viewerLogInterval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マルシェ開催スケジュールの承認状態を更新します。
     * @summary マルシェ開催スケジュール承認
     * @param {string} scheduleId スケジュールID
     * @param {RequestApproveScheduleRequest} requestApproveScheduleRequest 承認情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesScheduleIdApprovalPatch(scheduleId: string, requestApproveScheduleRequest: RequestApproveScheduleRequest, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesScheduleIdApprovalPatch(scheduleId, requestApproveScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マルシェ開催スケジュールを削除します。
     * @summary マルシェ開催スケジュール削除
     * @param {string} scheduleId スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesScheduleIdDelete(scheduleId: string, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesScheduleIdDelete(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたマルシェ開催スケジュールの詳細情報を取得します。
     * @summary マルシェ開催スケジュール取得
     * @param {string} scheduleId スケジュールID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesScheduleIdGet(scheduleId: string, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesScheduleIdGet(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マルシェ開催スケジュールの情報を更新します。
     * @summary マルシェ開催スケジュール更新
     * @param {string} scheduleId スケジュールID
     * @param {RequestUpdateScheduleRequest} requestUpdateScheduleRequest スケジュール情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesScheduleIdPatch(scheduleId: string, requestUpdateScheduleRequest: RequestUpdateScheduleRequest, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesScheduleIdPatch(scheduleId, requestUpdateScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マルシェ開催スケジュールの公開状態を更新します。
     * @summary マルシェ開催スケジュール公開
     * @param {string} scheduleId スケジュールID
     * @param {RequestPublishScheduleRequest} requestPublishScheduleRequest 公開設定情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public v1SchedulesScheduleIdPublishPatch(scheduleId: string, requestPublishScheduleRequest: RequestPublishScheduleRequest, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).v1SchedulesScheduleIdPublishPatch(scheduleId, requestPublishScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deprecated.指定されたコーディネーターのアクティブ配送設定を取得します。
         * @summary アクティブ配送設定取得
         * @param {string} coordinatorId コーディネーターID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsActivationGet: async (coordinatorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsActivationGet', 'coordinatorId', coordinatorId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings/-/activation`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたコーディネーターの配送設定一覧を取得します。ページネーションに対応しています。
         * @summary 配送設定一覧取得
         * @param {string} coordinatorId コーディネーターID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsGet: async (coordinatorId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsGet', 'coordinatorId', coordinatorId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated.コーディネータの配送設定を更新します。
         * @summary 配送設定更新
         * @param {string} coordinatorId コーディネータID
         * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsPatch: async (coordinatorId: string, requestUpsertShippingRequest: RequestUpsertShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsPatch', 'coordinatorId', coordinatorId)
            // verify required parameter 'requestUpsertShippingRequest' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsPatch', 'requestUpsertShippingRequest', requestUpsertShippingRequest)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpsertShippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい配送設定を登録します。
         * @summary 配送設定登録
         * @param {string} coordinatorId コーディネーターID
         * @param {RequestCreateShippingRequest} requestCreateShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsPost: async (coordinatorId: string, requestCreateShippingRequest: RequestCreateShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsPost', 'coordinatorId', coordinatorId)
            // verify required parameter 'requestCreateShippingRequest' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsPost', 'requestCreateShippingRequest', requestCreateShippingRequest)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateShippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した配送設定をアクティブに設定します。
         * @summary アクティブ配送設定更新
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch: async (coordinatorId: string, shippingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch', 'coordinatorId', coordinatorId)
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch', 'shippingId', shippingId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}/activation`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)))
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 配送設定を削除します。
         * @summary 配送設定削除
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdDelete: async (coordinatorId: string, shippingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdDelete', 'coordinatorId', coordinatorId)
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdDelete', 'shippingId', shippingId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)))
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された配送設定の詳細情報を取得します。
         * @summary 配送設定取得
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdGet: async (coordinatorId: string, shippingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdGet', 'coordinatorId', coordinatorId)
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdGet', 'shippingId', shippingId)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)))
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 配送設定の情報を更新します。
         * @summary 配送設定更新
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {RequestUpdateShippingRequest} requestUpdateShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdPatch: async (coordinatorId: string, shippingId: string, requestUpdateShippingRequest: RequestUpdateShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinatorId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdPatch', 'coordinatorId', coordinatorId)
            // verify required parameter 'shippingId' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdPatch', 'shippingId', shippingId)
            // verify required parameter 'requestUpdateShippingRequest' is not null or undefined
            assertParamExists('v1CoordinatorsCoordinatorIdShippingsShippingIdPatch', 'requestUpdateShippingRequest', requestUpdateShippingRequest)
            const localVarPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}`
                .replace(`{${"coordinatorId"}}`, encodeURIComponent(String(coordinatorId)))
                .replace(`{${"shippingId"}}`, encodeURIComponent(String(shippingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateShippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * デフォルトの配送設定を取得します。
         * @summary デフォルト配送設定取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShippingsDefaultGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/shippings/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * デフォルトの配送設定を更新します。
         * @summary デフォルト配送設定更新
         * @param {RequestUpdateDefaultShippingRequest} requestUpdateDefaultShippingRequest デフォルト配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShippingsDefaultPatch: async (requestUpdateDefaultShippingRequest: RequestUpdateDefaultShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestUpdateDefaultShippingRequest' is not null or undefined
            assertParamExists('v1ShippingsDefaultPatch', 'requestUpdateDefaultShippingRequest', requestUpdateDefaultShippingRequest)
            const localVarPath = `/v1/shippings/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateDefaultShippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Deprecated.指定されたコーディネーターのアクティブ配送設定を取得します。
         * @summary アクティブ配送設定取得
         * @param {string} coordinatorId コーディネーターID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsActivationGet(coordinatorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsActivationGet(coordinatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsActivationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたコーディネーターの配送設定一覧を取得します。ページネーションに対応しています。
         * @summary 配送設定一覧取得
         * @param {string} coordinatorId コーディネーターID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsGet(coordinatorId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShippingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsGet(coordinatorId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deprecated.コーディネータの配送設定を更新します。
         * @summary 配送設定更新
         * @param {string} coordinatorId コーディネータID
         * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsPatch(coordinatorId: string, requestUpsertShippingRequest: RequestUpsertShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsPatch(coordinatorId, requestUpsertShippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい配送設定を登録します。
         * @summary 配送設定登録
         * @param {string} coordinatorId コーディネーターID
         * @param {RequestCreateShippingRequest} requestCreateShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsPost(coordinatorId: string, requestCreateShippingRequest: RequestCreateShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsPost(coordinatorId, requestCreateShippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定した配送設定をアクティブに設定します。
         * @summary アクティブ配送設定更新
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(coordinatorId, shippingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 配送設定を削除します。
         * @summary 配送設定削除
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(coordinatorId, shippingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsShippingIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された配送設定の詳細情報を取得します。
         * @summary 配送設定取得
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsShippingIdGet(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsShippingIdGet(coordinatorId, shippingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsShippingIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 配送設定の情報を更新します。
         * @summary 配送設定更新
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {RequestUpdateShippingRequest} requestUpdateShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(coordinatorId: string, shippingId: string, requestUpdateShippingRequest: RequestUpdateShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(coordinatorId, shippingId, requestUpdateShippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1CoordinatorsCoordinatorIdShippingsShippingIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * デフォルトの配送設定を取得します。
         * @summary デフォルト配送設定取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShippingsDefaultGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShippingsDefaultGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1ShippingsDefaultGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * デフォルトの配送設定を更新します。
         * @summary デフォルト配送設定更新
         * @param {RequestUpdateDefaultShippingRequest} requestUpdateDefaultShippingRequest デフォルト配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShippingsDefaultPatch(requestUpdateDefaultShippingRequest: RequestUpdateDefaultShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShippingsDefaultPatch(requestUpdateDefaultShippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.v1ShippingsDefaultPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingApiFp(configuration)
    return {
        /**
         * Deprecated.指定されたコーディネーターのアクティブ配送設定を取得します。
         * @summary アクティブ配送設定取得
         * @param {string} coordinatorId コーディネーターID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsActivationGet(coordinatorId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseShippingResponse> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsActivationGet(coordinatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたコーディネーターの配送設定一覧を取得します。ページネーションに対応しています。
         * @summary 配送設定一覧取得
         * @param {string} coordinatorId コーディネーターID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsGet(coordinatorId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseShippingsResponse> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsGet(coordinatorId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated.コーディネータの配送設定を更新します。
         * @summary 配送設定更新
         * @param {string} coordinatorId コーディネータID
         * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsPatch(coordinatorId: string, requestUpsertShippingRequest: RequestUpsertShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsPatch(coordinatorId, requestUpsertShippingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい配送設定を登録します。
         * @summary 配送設定登録
         * @param {string} coordinatorId コーディネーターID
         * @param {RequestCreateShippingRequest} requestCreateShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsPost(coordinatorId: string, requestCreateShippingRequest: RequestCreateShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseShippingResponse> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsPost(coordinatorId, requestCreateShippingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した配送設定をアクティブに設定します。
         * @summary アクティブ配送設定更新
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(coordinatorId, shippingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 配送設定を削除します。
         * @summary 配送設定削除
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(coordinatorId, shippingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された配送設定の詳細情報を取得します。
         * @summary 配送設定取得
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdGet(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseShippingResponse> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsShippingIdGet(coordinatorId, shippingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 配送設定の情報を更新します。
         * @summary 配送設定更新
         * @param {string} coordinatorId コーディネーターID
         * @param {string} shippingId 配送設定ID
         * @param {RequestUpdateShippingRequest} requestUpdateShippingRequest 配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(coordinatorId: string, shippingId: string, requestUpdateShippingRequest: RequestUpdateShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(coordinatorId, shippingId, requestUpdateShippingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * デフォルトの配送設定を取得します。
         * @summary デフォルト配送設定取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShippingsDefaultGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseShippingResponse> {
            return localVarFp.v1ShippingsDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * デフォルトの配送設定を更新します。
         * @summary デフォルト配送設定更新
         * @param {RequestUpdateDefaultShippingRequest} requestUpdateDefaultShippingRequest デフォルト配送設定情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShippingsDefaultPatch(requestUpdateDefaultShippingRequest: RequestUpdateDefaultShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ShippingsDefaultPatch(requestUpdateDefaultShippingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * Deprecated.指定されたコーディネーターのアクティブ配送設定を取得します。
     * @summary アクティブ配送設定取得
     * @param {string} coordinatorId コーディネーターID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsActivationGet(coordinatorId: string, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsActivationGet(coordinatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたコーディネーターの配送設定一覧を取得します。ページネーションに対応しています。
     * @summary 配送設定一覧取得
     * @param {string} coordinatorId コーディネーターID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsGet(coordinatorId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsGet(coordinatorId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated.コーディネータの配送設定を更新します。
     * @summary 配送設定更新
     * @param {string} coordinatorId コーディネータID
     * @param {RequestUpsertShippingRequest} requestUpsertShippingRequest 配送設定情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsPatch(coordinatorId: string, requestUpsertShippingRequest: RequestUpsertShippingRequest, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsPatch(coordinatorId, requestUpsertShippingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい配送設定を登録します。
     * @summary 配送設定登録
     * @param {string} coordinatorId コーディネーターID
     * @param {RequestCreateShippingRequest} requestCreateShippingRequest 配送設定情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsPost(coordinatorId: string, requestCreateShippingRequest: RequestCreateShippingRequest, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsPost(coordinatorId, requestCreateShippingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した配送設定をアクティブに設定します。
     * @summary アクティブ配送設定更新
     * @param {string} coordinatorId コーディネーターID
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(coordinatorId, shippingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 配送設定を削除します。
     * @summary 配送設定削除
     * @param {string} coordinatorId コーディネーターID
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(coordinatorId, shippingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された配送設定の詳細情報を取得します。
     * @summary 配送設定取得
     * @param {string} coordinatorId コーディネーターID
     * @param {string} shippingId 配送設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsShippingIdGet(coordinatorId: string, shippingId: string, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsShippingIdGet(coordinatorId, shippingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 配送設定の情報を更新します。
     * @summary 配送設定更新
     * @param {string} coordinatorId コーディネーターID
     * @param {string} shippingId 配送設定ID
     * @param {RequestUpdateShippingRequest} requestUpdateShippingRequest 配送設定情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(coordinatorId: string, shippingId: string, requestUpdateShippingRequest: RequestUpdateShippingRequest, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(coordinatorId, shippingId, requestUpdateShippingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * デフォルトの配送設定を取得します。
     * @summary デフォルト配送設定取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1ShippingsDefaultGet(options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1ShippingsDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * デフォルトの配送設定を更新します。
     * @summary デフォルト配送設定更新
     * @param {RequestUpdateDefaultShippingRequest} requestUpdateDefaultShippingRequest デフォルト配送設定情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public v1ShippingsDefaultPatch(requestUpdateDefaultShippingRequest: RequestUpdateDefaultShippingRequest, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).v1ShippingsDefaultPatch(requestUpdateDefaultShippingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShopApi - axios parameter creator
 * @export
 */
export const ShopApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定されたショップの詳細情報を取得します。コーディネーター、生産者、商品種別情報も含まれます。
         * @summary ショップ取得
         * @param {string} shopId ショップID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShopsShopIdGet: async (shopId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('v1ShopsShopIdGet', 'shopId', shopId)
            const localVarPath = `/v1/shops/{shopId}`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ショップの情報を更新します。ショップ名、商品種別、営業日を変更できます。
         * @summary ショップ更新
         * @param {string} shopId ショップID
         * @param {RequestUpdateShopRequest} requestUpdateShopRequest ショップ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShopsShopIdPatch: async (shopId: string, requestUpdateShopRequest: RequestUpdateShopRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('v1ShopsShopIdPatch', 'shopId', shopId)
            // verify required parameter 'requestUpdateShopRequest' is not null or undefined
            assertParamExists('v1ShopsShopIdPatch', 'requestUpdateShopRequest', requestUpdateShopRequest)
            const localVarPath = `/v1/shops/{shopId}`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateShopRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopApi - functional programming interface
 * @export
 */
export const ShopApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定されたショップの詳細情報を取得します。コーディネーター、生産者、商品種別情報も含まれます。
         * @summary ショップ取得
         * @param {string} shopId ショップID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShopsShopIdGet(shopId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseShopResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShopsShopIdGet(shopId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.v1ShopsShopIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ショップの情報を更新します。ショップ名、商品種別、営業日を変更できます。
         * @summary ショップ更新
         * @param {string} shopId ショップID
         * @param {RequestUpdateShopRequest} requestUpdateShopRequest ショップ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShopsShopIdPatch(shopId: string, requestUpdateShopRequest: RequestUpdateShopRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShopsShopIdPatch(shopId, requestUpdateShopRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.v1ShopsShopIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShopApi - factory interface
 * @export
 */
export const ShopApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopApiFp(configuration)
    return {
        /**
         * 指定されたショップの詳細情報を取得します。コーディネーター、生産者、商品種別情報も含まれます。
         * @summary ショップ取得
         * @param {string} shopId ショップID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShopsShopIdGet(shopId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseShopResponse> {
            return localVarFp.v1ShopsShopIdGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * ショップの情報を更新します。ショップ名、商品種別、営業日を変更できます。
         * @summary ショップ更新
         * @param {string} shopId ショップID
         * @param {RequestUpdateShopRequest} requestUpdateShopRequest ショップ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShopsShopIdPatch(shopId: string, requestUpdateShopRequest: RequestUpdateShopRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ShopsShopIdPatch(shopId, requestUpdateShopRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopApi - object-oriented interface
 * @export
 * @class ShopApi
 * @extends {BaseAPI}
 */
export class ShopApi extends BaseAPI {
    /**
     * 指定されたショップの詳細情報を取得します。コーディネーター、生産者、商品種別情報も含まれます。
     * @summary ショップ取得
     * @param {string} shopId ショップID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public v1ShopsShopIdGet(shopId: string, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).v1ShopsShopIdGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ショップの情報を更新します。ショップ名、商品種別、営業日を変更できます。
     * @summary ショップ更新
     * @param {string} shopId ショップID
     * @param {RequestUpdateShopRequest} requestUpdateShopRequest ショップ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public v1ShopsShopIdPatch(shopId: string, requestUpdateShopRequest: RequestUpdateShopRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).v1ShopsShopIdPatch(shopId, requestUpdateShopRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpotApi - axios parameter creator
 * @export
 */
export const SpotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * スポットの一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
         * @summary スポット一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] スポット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsGet: async (limit?: number, offset?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/spots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいスポットを登録します。
         * @summary スポット登録
         * @param {RequestCreateSpotRequest} requestCreateSpotRequest スポット情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsPost: async (requestCreateSpotRequest: RequestCreateSpotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateSpotRequest' is not null or undefined
            assertParamExists('v1SpotsPost', 'requestCreateSpotRequest', requestCreateSpotRequest)
            const localVarPath = `/v1/spots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateSpotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スポットの承認状態を更新します。
         * @summary スポット承認
         * @param {string} spotId スポットID
         * @param {RequestApproveSpotRequest} requestApproveSpotRequest 承認情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdApprovalPatch: async (spotId: string, requestApproveSpotRequest: RequestApproveSpotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotId' is not null or undefined
            assertParamExists('v1SpotsSpotIdApprovalPatch', 'spotId', spotId)
            // verify required parameter 'requestApproveSpotRequest' is not null or undefined
            assertParamExists('v1SpotsSpotIdApprovalPatch', 'requestApproveSpotRequest', requestApproveSpotRequest)
            const localVarPath = `/v1/spots/{spotId}/approval`
                .replace(`{${"spotId"}}`, encodeURIComponent(String(spotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestApproveSpotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スポットを削除します。
         * @summary スポット削除
         * @param {string} spotId スポットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdDelete: async (spotId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotId' is not null or undefined
            assertParamExists('v1SpotsSpotIdDelete', 'spotId', spotId)
            const localVarPath = `/v1/spots/{spotId}`
                .replace(`{${"spotId"}}`, encodeURIComponent(String(spotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたスポットの詳細情報を取得します。
         * @summary スポット取得
         * @param {string} spotId スポットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdGet: async (spotId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotId' is not null or undefined
            assertParamExists('v1SpotsSpotIdGet', 'spotId', spotId)
            const localVarPath = `/v1/spots/{spotId}`
                .replace(`{${"spotId"}}`, encodeURIComponent(String(spotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スポットの情報を更新します。
         * @summary スポット更新
         * @param {string} spotId スポットID
         * @param {RequestUpdateSpotRequest} requestUpdateSpotRequest スポット情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdPatch: async (spotId: string, requestUpdateSpotRequest: RequestUpdateSpotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotId' is not null or undefined
            assertParamExists('v1SpotsSpotIdPatch', 'spotId', spotId)
            // verify required parameter 'requestUpdateSpotRequest' is not null or undefined
            assertParamExists('v1SpotsSpotIdPatch', 'requestUpdateSpotRequest', requestUpdateSpotRequest)
            const localVarPath = `/v1/spots/{spotId}`
                .replace(`{${"spotId"}}`, encodeURIComponent(String(spotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateSpotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpotApi - functional programming interface
 * @export
 */
export const SpotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpotApiAxiosParamCreator(configuration)
    return {
        /**
         * スポットの一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
         * @summary スポット一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] スポット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotsGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotsGet(limit, offset, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotApi.v1SpotsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいスポットを登録します。
         * @summary スポット登録
         * @param {RequestCreateSpotRequest} requestCreateSpotRequest スポット情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotsPost(requestCreateSpotRequest: RequestCreateSpotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotsPost(requestCreateSpotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotApi.v1SpotsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スポットの承認状態を更新します。
         * @summary スポット承認
         * @param {string} spotId スポットID
         * @param {RequestApproveSpotRequest} requestApproveSpotRequest 承認情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotsSpotIdApprovalPatch(spotId: string, requestApproveSpotRequest: RequestApproveSpotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotsSpotIdApprovalPatch(spotId, requestApproveSpotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotApi.v1SpotsSpotIdApprovalPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スポットを削除します。
         * @summary スポット削除
         * @param {string} spotId スポットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotsSpotIdDelete(spotId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotsSpotIdDelete(spotId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotApi.v1SpotsSpotIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたスポットの詳細情報を取得します。
         * @summary スポット取得
         * @param {string} spotId スポットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotsSpotIdGet(spotId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotsSpotIdGet(spotId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotApi.v1SpotsSpotIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スポットの情報を更新します。
         * @summary スポット更新
         * @param {string} spotId スポットID
         * @param {RequestUpdateSpotRequest} requestUpdateSpotRequest スポット情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotsSpotIdPatch(spotId: string, requestUpdateSpotRequest: RequestUpdateSpotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotsSpotIdPatch(spotId, requestUpdateSpotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotApi.v1SpotsSpotIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpotApi - factory interface
 * @export
 */
export const SpotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpotApiFp(configuration)
    return {
        /**
         * スポットの一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
         * @summary スポット一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] スポット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSpotsResponse> {
            return localVarFp.v1SpotsGet(limit, offset, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいスポットを登録します。
         * @summary スポット登録
         * @param {RequestCreateSpotRequest} requestCreateSpotRequest スポット情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsPost(requestCreateSpotRequest: RequestCreateSpotRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSpotResponse> {
            return localVarFp.v1SpotsPost(requestCreateSpotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スポットの承認状態を更新します。
         * @summary スポット承認
         * @param {string} spotId スポットID
         * @param {RequestApproveSpotRequest} requestApproveSpotRequest 承認情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdApprovalPatch(spotId: string, requestApproveSpotRequest: RequestApproveSpotRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SpotsSpotIdApprovalPatch(spotId, requestApproveSpotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スポットを削除します。
         * @summary スポット削除
         * @param {string} spotId スポットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdDelete(spotId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SpotsSpotIdDelete(spotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたスポットの詳細情報を取得します。
         * @summary スポット取得
         * @param {string} spotId スポットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdGet(spotId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSpotResponse> {
            return localVarFp.v1SpotsSpotIdGet(spotId, options).then((request) => request(axios, basePath));
        },
        /**
         * スポットの情報を更新します。
         * @summary スポット更新
         * @param {string} spotId スポットID
         * @param {RequestUpdateSpotRequest} requestUpdateSpotRequest スポット情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotsSpotIdPatch(spotId: string, requestUpdateSpotRequest: RequestUpdateSpotRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SpotsSpotIdPatch(spotId, requestUpdateSpotRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpotApi - object-oriented interface
 * @export
 * @class SpotApi
 * @extends {BaseAPI}
 */
export class SpotApi extends BaseAPI {
    /**
     * スポットの一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
     * @summary スポット一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] スポット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotApi
     */
    public v1SpotsGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SpotApiFp(this.configuration).v1SpotsGet(limit, offset, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいスポットを登録します。
     * @summary スポット登録
     * @param {RequestCreateSpotRequest} requestCreateSpotRequest スポット情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotApi
     */
    public v1SpotsPost(requestCreateSpotRequest: RequestCreateSpotRequest, options?: RawAxiosRequestConfig) {
        return SpotApiFp(this.configuration).v1SpotsPost(requestCreateSpotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スポットの承認状態を更新します。
     * @summary スポット承認
     * @param {string} spotId スポットID
     * @param {RequestApproveSpotRequest} requestApproveSpotRequest 承認情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotApi
     */
    public v1SpotsSpotIdApprovalPatch(spotId: string, requestApproveSpotRequest: RequestApproveSpotRequest, options?: RawAxiosRequestConfig) {
        return SpotApiFp(this.configuration).v1SpotsSpotIdApprovalPatch(spotId, requestApproveSpotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スポットを削除します。
     * @summary スポット削除
     * @param {string} spotId スポットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotApi
     */
    public v1SpotsSpotIdDelete(spotId: string, options?: RawAxiosRequestConfig) {
        return SpotApiFp(this.configuration).v1SpotsSpotIdDelete(spotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたスポットの詳細情報を取得します。
     * @summary スポット取得
     * @param {string} spotId スポットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotApi
     */
    public v1SpotsSpotIdGet(spotId: string, options?: RawAxiosRequestConfig) {
        return SpotApiFp(this.configuration).v1SpotsSpotIdGet(spotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スポットの情報を更新します。
     * @summary スポット更新
     * @param {string} spotId スポットID
     * @param {RequestUpdateSpotRequest} requestUpdateSpotRequest スポット情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotApi
     */
    public v1SpotsSpotIdPatch(spotId: string, requestUpdateSpotRequest: RequestUpdateSpotRequest, options?: RawAxiosRequestConfig) {
        return SpotApiFp(this.configuration).v1SpotsSpotIdPatch(spotId, requestUpdateSpotRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpotTypeApi - axios parameter creator
 * @export
 */
export const SpotTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * スポットタイプの一覧を取得します。名前でのフィルタリングが可能です。
         * @summary スポットタイプ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] スポットタイプ名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesGet: async (limit?: number, offset?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/spot-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいスポットタイプを登録します。
         * @summary スポットタイプ登録
         * @param {RequestCreateSpotTypeRequest} requestCreateSpotTypeRequest スポットタイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesPost: async (requestCreateSpotTypeRequest: RequestCreateSpotTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateSpotTypeRequest' is not null or undefined
            assertParamExists('v1SpotTypesPost', 'requestCreateSpotTypeRequest', requestCreateSpotTypeRequest)
            const localVarPath = `/v1/spot-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateSpotTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スポットタイプを削除します。
         * @summary スポットタイプ削除
         * @param {string} spotTypeId スポットタイプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesSpotTypeIdDelete: async (spotTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotTypeId' is not null or undefined
            assertParamExists('v1SpotTypesSpotTypeIdDelete', 'spotTypeId', spotTypeId)
            const localVarPath = `/v1/spot-types/{spotTypeId}`
                .replace(`{${"spotTypeId"}}`, encodeURIComponent(String(spotTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スポットタイプの情報を更新します。
         * @summary スポットタイプ更新
         * @param {string} spotTypeId スポットタイプID
         * @param {RequestUpdateSpotTypeRequest} requestUpdateSpotTypeRequest スポットタイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesSpotTypeIdPatch: async (spotTypeId: string, requestUpdateSpotTypeRequest: RequestUpdateSpotTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotTypeId' is not null or undefined
            assertParamExists('v1SpotTypesSpotTypeIdPatch', 'spotTypeId', spotTypeId)
            // verify required parameter 'requestUpdateSpotTypeRequest' is not null or undefined
            assertParamExists('v1SpotTypesSpotTypeIdPatch', 'requestUpdateSpotTypeRequest', requestUpdateSpotTypeRequest)
            const localVarPath = `/v1/spot-types/{spotTypeId}`
                .replace(`{${"spotTypeId"}}`, encodeURIComponent(String(spotTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateSpotTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpotTypeApi - functional programming interface
 * @export
 */
export const SpotTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpotTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * スポットタイプの一覧を取得します。名前でのフィルタリングが可能です。
         * @summary スポットタイプ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] スポットタイプ名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotTypesGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpotTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotTypesGet(limit, offset, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotTypeApi.v1SpotTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいスポットタイプを登録します。
         * @summary スポットタイプ登録
         * @param {RequestCreateSpotTypeRequest} requestCreateSpotTypeRequest スポットタイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotTypesPost(requestCreateSpotTypeRequest: RequestCreateSpotTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpotTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotTypesPost(requestCreateSpotTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotTypeApi.v1SpotTypesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スポットタイプを削除します。
         * @summary スポットタイプ削除
         * @param {string} spotTypeId スポットタイプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotTypesSpotTypeIdDelete(spotTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotTypesSpotTypeIdDelete(spotTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotTypeApi.v1SpotTypesSpotTypeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スポットタイプの情報を更新します。
         * @summary スポットタイプ更新
         * @param {string} spotTypeId スポットタイプID
         * @param {RequestUpdateSpotTypeRequest} requestUpdateSpotTypeRequest スポットタイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SpotTypesSpotTypeIdPatch(spotTypeId: string, requestUpdateSpotTypeRequest: RequestUpdateSpotTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SpotTypesSpotTypeIdPatch(spotTypeId, requestUpdateSpotTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotTypeApi.v1SpotTypesSpotTypeIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpotTypeApi - factory interface
 * @export
 */
export const SpotTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpotTypeApiFp(configuration)
    return {
        /**
         * スポットタイプの一覧を取得します。名前でのフィルタリングが可能です。
         * @summary スポットタイプ一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] スポットタイプ名(あいまい検索)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSpotTypesResponse> {
            return localVarFp.v1SpotTypesGet(limit, offset, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいスポットタイプを登録します。
         * @summary スポットタイプ登録
         * @param {RequestCreateSpotTypeRequest} requestCreateSpotTypeRequest スポットタイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesPost(requestCreateSpotTypeRequest: RequestCreateSpotTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSpotTypeResponse> {
            return localVarFp.v1SpotTypesPost(requestCreateSpotTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スポットタイプを削除します。
         * @summary スポットタイプ削除
         * @param {string} spotTypeId スポットタイプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesSpotTypeIdDelete(spotTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SpotTypesSpotTypeIdDelete(spotTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * スポットタイプの情報を更新します。
         * @summary スポットタイプ更新
         * @param {string} spotTypeId スポットタイプID
         * @param {RequestUpdateSpotTypeRequest} requestUpdateSpotTypeRequest スポットタイプ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SpotTypesSpotTypeIdPatch(spotTypeId: string, requestUpdateSpotTypeRequest: RequestUpdateSpotTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1SpotTypesSpotTypeIdPatch(spotTypeId, requestUpdateSpotTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpotTypeApi - object-oriented interface
 * @export
 * @class SpotTypeApi
 * @extends {BaseAPI}
 */
export class SpotTypeApi extends BaseAPI {
    /**
     * スポットタイプの一覧を取得します。名前でのフィルタリングが可能です。
     * @summary スポットタイプ一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] スポットタイプ名(あいまい検索)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTypeApi
     */
    public v1SpotTypesGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SpotTypeApiFp(this.configuration).v1SpotTypesGet(limit, offset, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいスポットタイプを登録します。
     * @summary スポットタイプ登録
     * @param {RequestCreateSpotTypeRequest} requestCreateSpotTypeRequest スポットタイプ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTypeApi
     */
    public v1SpotTypesPost(requestCreateSpotTypeRequest: RequestCreateSpotTypeRequest, options?: RawAxiosRequestConfig) {
        return SpotTypeApiFp(this.configuration).v1SpotTypesPost(requestCreateSpotTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スポットタイプを削除します。
     * @summary スポットタイプ削除
     * @param {string} spotTypeId スポットタイプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTypeApi
     */
    public v1SpotTypesSpotTypeIdDelete(spotTypeId: string, options?: RawAxiosRequestConfig) {
        return SpotTypeApiFp(this.configuration).v1SpotTypesSpotTypeIdDelete(spotTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スポットタイプの情報を更新します。
     * @summary スポットタイプ更新
     * @param {string} spotTypeId スポットタイプID
     * @param {RequestUpdateSpotTypeRequest} requestUpdateSpotTypeRequest スポットタイプ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTypeApi
     */
    public v1SpotTypesSpotTypeIdPatch(spotTypeId: string, requestUpdateSpotTypeRequest: RequestUpdateSpotTypeRequest, options?: RawAxiosRequestConfig) {
        return SpotTypeApiFp(this.configuration).v1SpotTypesSpotTypeIdPatch(spotTypeId, requestUpdateSpotTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThreadApi - axios parameter creator
 * @export
 */
export const ThreadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定されたお問い合わせのスレッド一覧を取得します。
         * @summary お問い合わせスレッド一覧取得
         * @param {string} contactId お問い合わせID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsGet: async (contactId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsGet', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contactId}/threads`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しいスレッドを登録します。
         * @summary スレッド登録
         * @param {string} contactId お問い合わせID
         * @param {RequestCreateThreadRequest} requestCreateThreadRequest スレッド情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsPost: async (contactId: string, requestCreateThreadRequest: RequestCreateThreadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsPost', 'contactId', contactId)
            // verify required parameter 'requestCreateThreadRequest' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsPost', 'requestCreateThreadRequest', requestCreateThreadRequest)
            const localVarPath = `/v1/contacts/{contactId}/threads`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateThreadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スレッドを削除します。
         * @summary スレッド削除
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsThreadIdDelete: async (contactId: string, threadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdDelete', 'contactId', contactId)
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdDelete', 'threadId', threadId)
            const localVarPath = `/v1/contacts/{contactId}/threads/{threadId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたスレッドの詳細情報を取得します。
         * @summary スレッド取得
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsThreadIdGet: async (contactId: string, threadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdGet', 'contactId', contactId)
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdGet', 'threadId', threadId)
            const localVarPath = `/v1/contacts/{contactId}/threads/{threadId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スレッドの情報を更新します。
         * @summary スレッド更新
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {RequestUpdateThreadRequest} requestUpdateThreadRequest スレッド情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsThreadIdPatch: async (contactId: string, threadId: string, requestUpdateThreadRequest: RequestUpdateThreadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdPatch', 'contactId', contactId)
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdPatch', 'threadId', threadId)
            // verify required parameter 'requestUpdateThreadRequest' is not null or undefined
            assertParamExists('v1ContactsContactIdThreadsThreadIdPatch', 'requestUpdateThreadRequest', requestUpdateThreadRequest)
            const localVarPath = `/v1/contacts/{contactId}/threads/{threadId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateThreadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreadApi - functional programming interface
 * @export
 */
export const ThreadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThreadApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定されたお問い合わせのスレッド一覧を取得します。
         * @summary お問い合わせスレッド一覧取得
         * @param {string} contactId お問い合わせID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdThreadsGet(contactId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseThreadsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdThreadsGet(contactId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadApi.v1ContactsContactIdThreadsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しいスレッドを登録します。
         * @summary スレッド登録
         * @param {string} contactId お問い合わせID
         * @param {RequestCreateThreadRequest} requestCreateThreadRequest スレッド情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdThreadsPost(contactId: string, requestCreateThreadRequest: RequestCreateThreadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseThreadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdThreadsPost(contactId, requestCreateThreadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadApi.v1ContactsContactIdThreadsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スレッドを削除します。
         * @summary スレッド削除
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdThreadsThreadIdDelete(contactId: string, threadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdThreadsThreadIdDelete(contactId, threadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadApi.v1ContactsContactIdThreadsThreadIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたスレッドの詳細情報を取得します。
         * @summary スレッド取得
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdThreadsThreadIdGet(contactId: string, threadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseThreadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdThreadsThreadIdGet(contactId, threadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadApi.v1ContactsContactIdThreadsThreadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スレッドの情報を更新します。
         * @summary スレッド更新
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {RequestUpdateThreadRequest} requestUpdateThreadRequest スレッド情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsContactIdThreadsThreadIdPatch(contactId: string, threadId: string, requestUpdateThreadRequest: RequestUpdateThreadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsContactIdThreadsThreadIdPatch(contactId, threadId, requestUpdateThreadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadApi.v1ContactsContactIdThreadsThreadIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ThreadApi - factory interface
 * @export
 */
export const ThreadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThreadApiFp(configuration)
    return {
        /**
         * 指定されたお問い合わせのスレッド一覧を取得します。
         * @summary お問い合わせスレッド一覧取得
         * @param {string} contactId お問い合わせID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsGet(contactId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseThreadsResponse> {
            return localVarFp.v1ContactsContactIdThreadsGet(contactId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しいスレッドを登録します。
         * @summary スレッド登録
         * @param {string} contactId お問い合わせID
         * @param {RequestCreateThreadRequest} requestCreateThreadRequest スレッド情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsPost(contactId: string, requestCreateThreadRequest: RequestCreateThreadRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseThreadResponse> {
            return localVarFp.v1ContactsContactIdThreadsPost(contactId, requestCreateThreadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スレッドを削除します。
         * @summary スレッド削除
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsThreadIdDelete(contactId: string, threadId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ContactsContactIdThreadsThreadIdDelete(contactId, threadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたスレッドの詳細情報を取得します。
         * @summary スレッド取得
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsThreadIdGet(contactId: string, threadId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseThreadResponse> {
            return localVarFp.v1ContactsContactIdThreadsThreadIdGet(contactId, threadId, options).then((request) => request(axios, basePath));
        },
        /**
         * スレッドの情報を更新します。
         * @summary スレッド更新
         * @param {string} contactId お問い合わせID
         * @param {string} threadId スレッドID
         * @param {RequestUpdateThreadRequest} requestUpdateThreadRequest スレッド情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsContactIdThreadsThreadIdPatch(contactId: string, threadId: string, requestUpdateThreadRequest: RequestUpdateThreadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1ContactsContactIdThreadsThreadIdPatch(contactId, threadId, requestUpdateThreadRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThreadApi - object-oriented interface
 * @export
 * @class ThreadApi
 * @extends {BaseAPI}
 */
export class ThreadApi extends BaseAPI {
    /**
     * 指定されたお問い合わせのスレッド一覧を取得します。
     * @summary お問い合わせスレッド一覧取得
     * @param {string} contactId お問い合わせID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1ContactsContactIdThreadsGet(contactId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1ContactsContactIdThreadsGet(contactId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しいスレッドを登録します。
     * @summary スレッド登録
     * @param {string} contactId お問い合わせID
     * @param {RequestCreateThreadRequest} requestCreateThreadRequest スレッド情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1ContactsContactIdThreadsPost(contactId: string, requestCreateThreadRequest: RequestCreateThreadRequest, options?: RawAxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1ContactsContactIdThreadsPost(contactId, requestCreateThreadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スレッドを削除します。
     * @summary スレッド削除
     * @param {string} contactId お問い合わせID
     * @param {string} threadId スレッドID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1ContactsContactIdThreadsThreadIdDelete(contactId: string, threadId: string, options?: RawAxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1ContactsContactIdThreadsThreadIdDelete(contactId, threadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたスレッドの詳細情報を取得します。
     * @summary スレッド取得
     * @param {string} contactId お問い合わせID
     * @param {string} threadId スレッドID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1ContactsContactIdThreadsThreadIdGet(contactId: string, threadId: string, options?: RawAxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1ContactsContactIdThreadsThreadIdGet(contactId, threadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スレッドの情報を更新します。
     * @summary スレッド更新
     * @param {string} contactId お問い合わせID
     * @param {string} threadId スレッドID
     * @param {RequestUpdateThreadRequest} requestUpdateThreadRequest スレッド情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public v1ContactsContactIdThreadsThreadIdPatch(contactId: string, threadId: string, requestUpdateThreadRequest: RequestUpdateThreadRequest, options?: RawAxiosRequestConfig) {
        return ThreadApiFp(this.configuration).v1ContactsContactIdThreadsThreadIdPatch(contactId, threadId, requestUpdateThreadRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TopApi - axios parameter creator
 * @export
 */
export const TopApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定期間の注文統計情報（注文数、売上、決済手段別集計、推移）を取得します。
         * @summary 注文集計取得
         * @param {number} [startAt] 集計開始日時（unixtime,未指定の場合は１週間前の時刻）
         * @param {number} [endAt] 集計終了日時（unixtime,未指定の場合は現在時刻）
         * @param {string} [periodType] 集計期間（未指定の場合は日次）
         * @param {string} [shopId] 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TopOrdersGet: async (startAt?: number, endAt?: number, periodType?: string, shopId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/top/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }

            if (endAt !== undefined) {
                localVarQueryParameter['endAt'] = endAt;
            }

            if (periodType !== undefined) {
                localVarQueryParameter['periodType'] = periodType;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['shopId'] = shopId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopApi - functional programming interface
 * @export
 */
export const TopApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TopApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定期間の注文統計情報（注文数、売上、決済手段別集計、推移）を取得します。
         * @summary 注文集計取得
         * @param {number} [startAt] 集計開始日時（unixtime,未指定の場合は１週間前の時刻）
         * @param {number} [endAt] 集計終了日時（unixtime,未指定の場合は現在時刻）
         * @param {string} [periodType] 集計期間（未指定の場合は日次）
         * @param {string} [shopId] 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TopOrdersGet(startAt?: number, endAt?: number, periodType?: string, shopId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTopOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TopOrdersGet(startAt, endAt, periodType, shopId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TopApi.v1TopOrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TopApi - factory interface
 * @export
 */
export const TopApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TopApiFp(configuration)
    return {
        /**
         * 指定期間の注文統計情報（注文数、売上、決済手段別集計、推移）を取得します。
         * @summary 注文集計取得
         * @param {number} [startAt] 集計開始日時（unixtime,未指定の場合は１週間前の時刻）
         * @param {number} [endAt] 集計終了日時（unixtime,未指定の場合は現在時刻）
         * @param {string} [periodType] 集計期間（未指定の場合は日次）
         * @param {string} [shopId] 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TopOrdersGet(startAt?: number, endAt?: number, periodType?: string, shopId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseTopOrdersResponse> {
            return localVarFp.v1TopOrdersGet(startAt, endAt, periodType, shopId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TopApi - object-oriented interface
 * @export
 * @class TopApi
 * @extends {BaseAPI}
 */
export class TopApi extends BaseAPI {
    /**
     * 指定期間の注文統計情報（注文数、売上、決済手段別集計、推移）を取得します。
     * @summary 注文集計取得
     * @param {number} [startAt] 集計開始日時（unixtime,未指定の場合は１週間前の時刻）
     * @param {number} [endAt] 集計終了日時（unixtime,未指定の場合は現在時刻）
     * @param {string} [periodType] 集計期間（未指定の場合は日次）
     * @param {string} [shopId] 店舗ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopApi
     */
    public v1TopOrdersGet(startAt?: number, endAt?: number, periodType?: string, shopId?: string, options?: RawAxiosRequestConfig) {
        return TopApiFp(this.configuration).v1TopOrdersGet(startAt, endAt, periodType, shopId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * コーディネーターの特典動画アップロードURLを生成します。
         * @summary コーディネーター特典動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsBonusVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadCoordinatorsBonusVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/coordinators/bonus-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コーディネーターのヘッダー画像アップロードURLを生成します。
         * @summary コーディネーターヘッダーアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsHeaderPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadCoordinatorsHeaderPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/coordinators/header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コーディネーターのプロモーション動画アップロードURLを生成します。
         * @summary コーディネータープロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsPromotionVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadCoordinatorsPromotionVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/coordinators/promotion-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コーディネーターのサムネイル画像アップロードURLを生成します。
         * @summary コーディネーターサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsThumbnailPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadCoordinatorsThumbnailPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/coordinators/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験の画像アップロードURLを生成します。
         * @summary 体験画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadExperiencesImagePost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadExperiencesImagePost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/experiences/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験のプロモーション動画アップロードURLを生成します。
         * @summary 体験プロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadExperiencesPromotionVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadExperiencesPromotionVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/experiences/promotion-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 体験の動画アップロードURLを生成します。
         * @summary 体験動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadExperiencesVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadExperiencesVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/experiences/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生産者の特典動画アップロードURLを生成します。
         * @summary 生産者特典動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersBonusVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProducersBonusVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/producers/bonus-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生産者のヘッダー画像アップロードURLを生成します。
         * @summary 生産者ヘッダーアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersHeaderPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProducersHeaderPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/producers/header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生産者のプロモーション動画アップロードURLを生成します。
         * @summary 生産者プロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersPromotionVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProducersPromotionVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/producers/promotion-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生産者のサムネイル画像アップロードURLを生成します。
         * @summary 生産者サムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersThumbnailPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProducersThumbnailPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/producers/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品種別のアイコンアップロードURLを生成します。
         * @summary 商品種別アイコンアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductTypesIconPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProductTypesIconPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/product-types/icon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品の画像アップロードURLを生成します。
         * @summary 商品画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductsImagePost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProductsImagePost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/products/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 商品の動画アップロードURLを生成します。
         * @summary 商品動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductsVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadProductsVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/products/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ライブ配信動画のアップロードURLを生成します。
         * @summary ライブ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesBroadcastsLivePost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadSchedulesBroadcastsLivePost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/schedules/-/broadcasts/live`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スケジュールの画像アップロードURLを生成します。
         * @summary スケジュール画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesImagePost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadSchedulesImagePost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/schedules/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スケジュールのオープニング動画アップロードURLを生成します。
         * @summary スケジュールオープニング動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesOpeningVideoPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadSchedulesOpeningVideoPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/schedules/opening-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたスケジュールのアーカイブ動画アップロードURLを生成します。
         * @summary アーカイブ動画アップロードURL生成
         * @param {string} scheduleId スケジュールID
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesScheduleIdBroadcastsArchivePost: async (scheduleId: string, requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('v1UploadSchedulesScheduleIdBroadcastsArchivePost', 'scheduleId', scheduleId)
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadSchedulesScheduleIdBroadcastsArchivePost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/schedules/{scheduleId}/broadcasts/archive`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スケジュールのサムネイルアップロードURLを生成します。
         * @summary スケジュールサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesThumbnailPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadSchedulesThumbnailPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/schedules/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スポットのサムネイルアップロードURLを生成します。
         * @summary スポットサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSpotsThumbnailPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadSpotsThumbnailPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/spots/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたキーのアップロード状態を取得します。
         * @summary アップロード状態取得
         * @param {string} key アップロードキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadStateGet: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('v1UploadStateGet', 'key', key)
            const localVarPath = `/v1/upload/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 動画ファイルのアップロードURLを生成します。
         * @summary 動画ファイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadVideosFilePost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadVideosFilePost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/videos/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 動画のサムネイルアップロードURLを生成します。
         * @summary 動画サムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadVideosThumbnailPost: async (requestGetUploadURLRequest: RequestGetUploadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestGetUploadURLRequest' is not null or undefined
            assertParamExists('v1UploadVideosThumbnailPost', 'requestGetUploadURLRequest', requestGetUploadURLRequest)
            const localVarPath = `/v1/upload/videos/thumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestGetUploadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * コーディネーターの特典動画アップロードURLを生成します。
         * @summary コーディネーター特典動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorsBonusVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorsBonusVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadCoordinatorsBonusVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * コーディネーターのヘッダー画像アップロードURLを生成します。
         * @summary コーディネーターヘッダーアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorsHeaderPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorsHeaderPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadCoordinatorsHeaderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * コーディネーターのプロモーション動画アップロードURLを生成します。
         * @summary コーディネータープロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorsPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorsPromotionVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadCoordinatorsPromotionVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * コーディネーターのサムネイル画像アップロードURLを生成します。
         * @summary コーディネーターサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadCoordinatorsThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadCoordinatorsThumbnailPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadCoordinatorsThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験の画像アップロードURLを生成します。
         * @summary 体験画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadExperiencesImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadExperiencesImagePost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadExperiencesImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験のプロモーション動画アップロードURLを生成します。
         * @summary 体験プロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadExperiencesPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadExperiencesPromotionVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadExperiencesPromotionVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 体験の動画アップロードURLを生成します。
         * @summary 体験動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadExperiencesVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadExperiencesVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadExperiencesVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生産者の特典動画アップロードURLを生成します。
         * @summary 生産者特典動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducersBonusVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducersBonusVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProducersBonusVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生産者のヘッダー画像アップロードURLを生成します。
         * @summary 生産者ヘッダーアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducersHeaderPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducersHeaderPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProducersHeaderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生産者のプロモーション動画アップロードURLを生成します。
         * @summary 生産者プロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducersPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducersPromotionVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProducersPromotionVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生産者のサムネイル画像アップロードURLを生成します。
         * @summary 生産者サムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProducersThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProducersThumbnailPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProducersThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品種別のアイコンアップロードURLを生成します。
         * @summary 商品種別アイコンアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProductTypesIconPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProductTypesIconPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProductTypesIconPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品の画像アップロードURLを生成します。
         * @summary 商品画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProductsImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProductsImagePost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProductsImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 商品の動画アップロードURLを生成します。
         * @summary 商品動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadProductsVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadProductsVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadProductsVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ライブ配信動画のアップロードURLを生成します。
         * @summary ライブ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadSchedulesBroadcastsLivePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadSchedulesBroadcastsLivePost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadSchedulesBroadcastsLivePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スケジュールの画像アップロードURLを生成します。
         * @summary スケジュール画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadSchedulesImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadSchedulesImagePost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadSchedulesImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スケジュールのオープニング動画アップロードURLを生成します。
         * @summary スケジュールオープニング動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadSchedulesOpeningVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadSchedulesOpeningVideoPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadSchedulesOpeningVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたスケジュールのアーカイブ動画アップロードURLを生成します。
         * @summary アーカイブ動画アップロードURL生成
         * @param {string} scheduleId スケジュールID
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadSchedulesScheduleIdBroadcastsArchivePost(scheduleId: string, requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadSchedulesScheduleIdBroadcastsArchivePost(scheduleId, requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadSchedulesScheduleIdBroadcastsArchivePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スケジュールのサムネイルアップロードURLを生成します。
         * @summary スケジュールサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadSchedulesThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadSchedulesThumbnailPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadSchedulesThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * スポットのサムネイルアップロードURLを生成します。
         * @summary スポットサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadSpotsThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadSpotsThumbnailPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadSpotsThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたキーのアップロード状態を取得します。
         * @summary アップロード状態取得
         * @param {string} key アップロードキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadStateGet(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadStateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadStateGet(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadStateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 動画ファイルのアップロードURLを生成します。
         * @summary 動画ファイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadVideosFilePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadVideosFilePost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadVideosFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 動画のサムネイルアップロードURLを生成します。
         * @summary 動画サムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UploadVideosThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUploadURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UploadVideosThumbnailPost(requestGetUploadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.v1UploadVideosThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * コーディネーターの特典動画アップロードURLを生成します。
         * @summary コーディネーター特典動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsBonusVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadCoordinatorsBonusVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * コーディネーターのヘッダー画像アップロードURLを生成します。
         * @summary コーディネーターヘッダーアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsHeaderPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadCoordinatorsHeaderPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * コーディネーターのプロモーション動画アップロードURLを生成します。
         * @summary コーディネータープロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadCoordinatorsPromotionVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * コーディネーターのサムネイル画像アップロードURLを生成します。
         * @summary コーディネーターサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadCoordinatorsThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadCoordinatorsThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験の画像アップロードURLを生成します。
         * @summary 体験画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadExperiencesImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadExperiencesImagePost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験のプロモーション動画アップロードURLを生成します。
         * @summary 体験プロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadExperiencesPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadExperiencesPromotionVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 体験の動画アップロードURLを生成します。
         * @summary 体験動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadExperiencesVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadExperiencesVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 生産者の特典動画アップロードURLを生成します。
         * @summary 生産者特典動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersBonusVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProducersBonusVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 生産者のヘッダー画像アップロードURLを生成します。
         * @summary 生産者ヘッダーアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersHeaderPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProducersHeaderPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 生産者のプロモーション動画アップロードURLを生成します。
         * @summary 生産者プロモ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProducersPromotionVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 生産者のサムネイル画像アップロードURLを生成します。
         * @summary 生産者サムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProducersThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProducersThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品種別のアイコンアップロードURLを生成します。
         * @summary 商品種別アイコンアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductTypesIconPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProductTypesIconPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品の画像アップロードURLを生成します。
         * @summary 商品画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductsImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProductsImagePost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 商品の動画アップロードURLを生成します。
         * @summary 商品動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadProductsVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadProductsVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ライブ配信動画のアップロードURLを生成します。
         * @summary ライブ動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesBroadcastsLivePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadSchedulesBroadcastsLivePost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スケジュールの画像アップロードURLを生成します。
         * @summary スケジュール画像アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadSchedulesImagePost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スケジュールのオープニング動画アップロードURLを生成します。
         * @summary スケジュールオープニング動画アップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesOpeningVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadSchedulesOpeningVideoPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたスケジュールのアーカイブ動画アップロードURLを生成します。
         * @summary アーカイブ動画アップロードURL生成
         * @param {string} scheduleId スケジュールID
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesScheduleIdBroadcastsArchivePost(scheduleId: string, requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadSchedulesScheduleIdBroadcastsArchivePost(scheduleId, requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スケジュールのサムネイルアップロードURLを生成します。
         * @summary スケジュールサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSchedulesThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadSchedulesThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * スポットのサムネイルアップロードURLを生成します。
         * @summary スポットサムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadSpotsThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadSpotsThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたキーのアップロード状態を取得します。
         * @summary アップロード状態取得
         * @param {string} key アップロードキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadStateGet(key: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadStateResponse> {
            return localVarFp.v1UploadStateGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 動画ファイルのアップロードURLを生成します。
         * @summary 動画ファイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadVideosFilePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadVideosFilePost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 動画のサムネイルアップロードURLを生成します。
         * @summary 動画サムネイルアップロードURL生成
         * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UploadVideosThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUploadURLResponse> {
            return localVarFp.v1UploadVideosThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * コーディネーターの特典動画アップロードURLを生成します。
     * @summary コーディネーター特典動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadCoordinatorsBonusVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadCoordinatorsBonusVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コーディネーターのヘッダー画像アップロードURLを生成します。
     * @summary コーディネーターヘッダーアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadCoordinatorsHeaderPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadCoordinatorsHeaderPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コーディネーターのプロモーション動画アップロードURLを生成します。
     * @summary コーディネータープロモ動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadCoordinatorsPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadCoordinatorsPromotionVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コーディネーターのサムネイル画像アップロードURLを生成します。
     * @summary コーディネーターサムネイルアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadCoordinatorsThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadCoordinatorsThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験の画像アップロードURLを生成します。
     * @summary 体験画像アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadExperiencesImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadExperiencesImagePost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験のプロモーション動画アップロードURLを生成します。
     * @summary 体験プロモ動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadExperiencesPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadExperiencesPromotionVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 体験の動画アップロードURLを生成します。
     * @summary 体験動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadExperiencesVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadExperiencesVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生産者の特典動画アップロードURLを生成します。
     * @summary 生産者特典動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProducersBonusVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProducersBonusVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生産者のヘッダー画像アップロードURLを生成します。
     * @summary 生産者ヘッダーアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProducersHeaderPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProducersHeaderPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生産者のプロモーション動画アップロードURLを生成します。
     * @summary 生産者プロモ動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProducersPromotionVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProducersPromotionVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生産者のサムネイル画像アップロードURLを生成します。
     * @summary 生産者サムネイルアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProducersThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProducersThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品種別のアイコンアップロードURLを生成します。
     * @summary 商品種別アイコンアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProductTypesIconPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProductTypesIconPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品の画像アップロードURLを生成します。
     * @summary 商品画像アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProductsImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProductsImagePost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 商品の動画アップロードURLを生成します。
     * @summary 商品動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadProductsVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadProductsVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ライブ配信動画のアップロードURLを生成します。
     * @summary ライブ動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadSchedulesBroadcastsLivePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadSchedulesBroadcastsLivePost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スケジュールの画像アップロードURLを生成します。
     * @summary スケジュール画像アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadSchedulesImagePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadSchedulesImagePost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スケジュールのオープニング動画アップロードURLを生成します。
     * @summary スケジュールオープニング動画アップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadSchedulesOpeningVideoPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadSchedulesOpeningVideoPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたスケジュールのアーカイブ動画アップロードURLを生成します。
     * @summary アーカイブ動画アップロードURL生成
     * @param {string} scheduleId スケジュールID
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadSchedulesScheduleIdBroadcastsArchivePost(scheduleId: string, requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadSchedulesScheduleIdBroadcastsArchivePost(scheduleId, requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スケジュールのサムネイルアップロードURLを生成します。
     * @summary スケジュールサムネイルアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadSchedulesThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadSchedulesThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * スポットのサムネイルアップロードURLを生成します。
     * @summary スポットサムネイルアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadSpotsThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadSpotsThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたキーのアップロード状態を取得します。
     * @summary アップロード状態取得
     * @param {string} key アップロードキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadStateGet(key: string, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadStateGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 動画ファイルのアップロードURLを生成します。
     * @summary 動画ファイルアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadVideosFilePost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadVideosFilePost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 動画のサムネイルアップロードURLを生成します。
     * @summary 動画サムネイルアップロードURL生成
     * @param {RequestGetUploadURLRequest} requestGetUploadURLRequest アップロードファイル情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public v1UploadVideosThumbnailPost(requestGetUploadURLRequest: RequestGetUploadURLRequest, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).v1UploadVideosThumbnailPost(requestGetUploadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 購入者の一覧を取得します。管理者は全購入者、コーディネーターは注文実績のある購入者のみ取得可能です。
         * @summary 購入者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 購入者を削除します。管理者のみ実行可能です。
         * @summary 購入者削除
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1UsersUserIdDelete', 'userId', userId)
            const localVarPath = `/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された購入者の詳細情報を取得します。
         * @summary 購入者取得
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1UsersUserIdGet', 'userId', userId)
            const localVarPath = `/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された購入者の注文履歴と注文統計情報を取得します。
         * @summary 購入者注文履歴取得
         * @param {string} userId 購入者ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdOrdersGet: async (userId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1UsersUserIdOrdersGet', 'userId', userId)
            const localVarPath = `/v1/users/{userId}/orders`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 購入者の一覧を取得します。管理者は全購入者、コーディネーターは注文実績のある購入者のみ取得可能です。
         * @summary 購入者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.v1UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 購入者を削除します。管理者のみ実行可能です。
         * @summary 購入者削除
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.v1UsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された購入者の詳細情報を取得します。
         * @summary 購入者取得
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.v1UsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された購入者の注文履歴と注文統計情報を取得します。
         * @summary 購入者注文履歴取得
         * @param {string} userId 購入者ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersUserIdOrdersGet(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersUserIdOrdersGet(userId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.v1UsersUserIdOrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 購入者の一覧を取得します。管理者は全購入者、コーディネーターは注文実績のある購入者のみ取得可能です。
         * @summary 購入者一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUsersResponse> {
            return localVarFp.v1UsersGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 購入者を削除します。管理者のみ実行可能です。
         * @summary 購入者削除
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1UsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された購入者の詳細情報を取得します。
         * @summary 購入者取得
         * @param {string} userId 購入者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUserResponse> {
            return localVarFp.v1UsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された購入者の注文履歴と注文統計情報を取得します。
         * @summary 購入者注文履歴取得
         * @param {string} userId 購入者ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdOrdersGet(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUserOrdersResponse> {
            return localVarFp.v1UsersUserIdOrdersGet(userId, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 購入者の一覧を取得します。管理者は全購入者、コーディネーターは注文実績のある購入者のみ取得可能です。
     * @summary 購入者一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1UsersGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).v1UsersGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 購入者を削除します。管理者のみ実行可能です。
     * @summary 購入者削除
     * @param {string} userId 購入者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1UsersUserIdDelete(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).v1UsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された購入者の詳細情報を取得します。
     * @summary 購入者取得
     * @param {string} userId 購入者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1UsersUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).v1UsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された購入者の注文履歴と注文統計情報を取得します。
     * @summary 購入者注文履歴取得
     * @param {string} userId 購入者ID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public v1UsersUserIdOrdersGet(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).v1UsersUserIdOrdersGet(userId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VideoApi - axios parameter creator
 * @export
 */
export const VideoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 動画の一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
         * @summary 動画一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 動画名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosGet: async (limit?: number, offset?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい動画を登録します。
         * @summary 動画登録
         * @param {RequestCreateVideoRequest} requestCreateVideoRequest 動画情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosPost: async (requestCreateVideoRequest: RequestCreateVideoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreateVideoRequest' is not null or undefined
            assertParamExists('v1VideosPost', 'requestCreateVideoRequest', requestCreateVideoRequest)
            const localVarPath = `/v1/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreateVideoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された動画の視聴者分析データを取得します。集計期間と集計間隔を指定できます。
         * @summary 動画分析情報取得
         * @param {string} videoId 動画ID
         * @param {number} [start] 集計開始日時 (unixtime,未指定の場合は動画公開時間)
         * @param {number} [end] 集計終了日時 (unixtime,未指定の場合は現在時刻)
         * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdAnalyticsGet: async (videoId: string, start?: number, end?: number, viewerLogInterval?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('v1VideosVideoIdAnalyticsGet', 'videoId', videoId)
            const localVarPath = `/v1/videos/{videoId}/analytics`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (viewerLogInterval !== undefined) {
                localVarQueryParameter['viewerLogInterval'] = viewerLogInterval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 動画を削除します。
         * @summary 動画削除
         * @param {string} videoId 動画ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdDelete: async (videoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('v1VideosVideoIdDelete', 'videoId', videoId)
            const localVarPath = `/v1/videos/{videoId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された動画の詳細情報を取得します。
         * @summary 動画取得
         * @param {string} videoId 動画ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdGet: async (videoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('v1VideosVideoIdGet', 'videoId', videoId)
            const localVarPath = `/v1/videos/{videoId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 動画の情報を更新します。
         * @summary 動画更新
         * @param {string} videoId 動画ID
         * @param {RequestUpdateVideoRequest} requestUpdateVideoRequest 動画情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdPatch: async (videoId: string, requestUpdateVideoRequest: RequestUpdateVideoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('v1VideosVideoIdPatch', 'videoId', videoId)
            // verify required parameter 'requestUpdateVideoRequest' is not null or undefined
            assertParamExists('v1VideosVideoIdPatch', 'requestUpdateVideoRequest', requestUpdateVideoRequest)
            const localVarPath = `/v1/videos/{videoId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateVideoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoApi - functional programming interface
 * @export
 */
export const VideoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoApiAxiosParamCreator(configuration)
    return {
        /**
         * 動画の一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
         * @summary 動画一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 動画名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVideosResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosGet(limit, offset, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoApi.v1VideosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新しい動画を登録します。
         * @summary 動画登録
         * @param {RequestCreateVideoRequest} requestCreateVideoRequest 動画情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosPost(requestCreateVideoRequest: RequestCreateVideoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosPost(requestCreateVideoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoApi.v1VideosPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された動画の視聴者分析データを取得します。集計期間と集計間隔を指定できます。
         * @summary 動画分析情報取得
         * @param {string} videoId 動画ID
         * @param {number} [start] 集計開始日時 (unixtime,未指定の場合は動画公開時間)
         * @param {number} [end] 集計終了日時 (unixtime,未指定の場合は現在時刻)
         * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosVideoIdAnalyticsGet(videoId: string, start?: number, end?: number, viewerLogInterval?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAnalyzeVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosVideoIdAnalyticsGet(videoId, start, end, viewerLogInterval, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoApi.v1VideosVideoIdAnalyticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 動画を削除します。
         * @summary 動画削除
         * @param {string} videoId 動画ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosVideoIdDelete(videoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosVideoIdDelete(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoApi.v1VideosVideoIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された動画の詳細情報を取得します。
         * @summary 動画取得
         * @param {string} videoId 動画ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosVideoIdGet(videoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVideoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosVideoIdGet(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoApi.v1VideosVideoIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 動画の情報を更新します。
         * @summary 動画更新
         * @param {string} videoId 動画ID
         * @param {RequestUpdateVideoRequest} requestUpdateVideoRequest 動画情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosVideoIdPatch(videoId: string, requestUpdateVideoRequest: RequestUpdateVideoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosVideoIdPatch(videoId, requestUpdateVideoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoApi.v1VideosVideoIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VideoApi - factory interface
 * @export
 */
export const VideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoApiFp(configuration)
    return {
        /**
         * 動画の一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
         * @summary 動画一覧取得
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [offset] 取得開始位置(min:0)
         * @param {string} [name] 動画名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseVideosResponse> {
            return localVarFp.v1VideosGet(limit, offset, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい動画を登録します。
         * @summary 動画登録
         * @param {RequestCreateVideoRequest} requestCreateVideoRequest 動画情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosPost(requestCreateVideoRequest: RequestCreateVideoRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseVideoResponse> {
            return localVarFp.v1VideosPost(requestCreateVideoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された動画の視聴者分析データを取得します。集計期間と集計間隔を指定できます。
         * @summary 動画分析情報取得
         * @param {string} videoId 動画ID
         * @param {number} [start] 集計開始日時 (unixtime,未指定の場合は動画公開時間)
         * @param {number} [end] 集計終了日時 (unixtime,未指定の場合は現在時刻)
         * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdAnalyticsGet(videoId: string, start?: number, end?: number, viewerLogInterval?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseAnalyzeVideoResponse> {
            return localVarFp.v1VideosVideoIdAnalyticsGet(videoId, start, end, viewerLogInterval, options).then((request) => request(axios, basePath));
        },
        /**
         * 動画を削除します。
         * @summary 動画削除
         * @param {string} videoId 動画ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdDelete(videoId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1VideosVideoIdDelete(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された動画の詳細情報を取得します。
         * @summary 動画取得
         * @param {string} videoId 動画ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdGet(videoId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseVideoResponse> {
            return localVarFp.v1VideosVideoIdGet(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 動画の情報を更新します。
         * @summary 動画更新
         * @param {string} videoId 動画ID
         * @param {RequestUpdateVideoRequest} requestUpdateVideoRequest 動画情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdPatch(videoId: string, requestUpdateVideoRequest: RequestUpdateVideoRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1VideosVideoIdPatch(videoId, requestUpdateVideoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoApi - object-oriented interface
 * @export
 * @class VideoApi
 * @extends {BaseAPI}
 */
export class VideoApi extends BaseAPI {
    /**
     * 動画の一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
     * @summary 動画一覧取得
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [offset] 取得開始位置(min:0)
     * @param {string} [name] 動画名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public v1VideosGet(limit?: number, offset?: number, name?: string, options?: RawAxiosRequestConfig) {
        return VideoApiFp(this.configuration).v1VideosGet(limit, offset, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい動画を登録します。
     * @summary 動画登録
     * @param {RequestCreateVideoRequest} requestCreateVideoRequest 動画情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public v1VideosPost(requestCreateVideoRequest: RequestCreateVideoRequest, options?: RawAxiosRequestConfig) {
        return VideoApiFp(this.configuration).v1VideosPost(requestCreateVideoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された動画の視聴者分析データを取得します。集計期間と集計間隔を指定できます。
     * @summary 動画分析情報取得
     * @param {string} videoId 動画ID
     * @param {number} [start] 集計開始日時 (unixtime,未指定の場合は動画公開時間)
     * @param {number} [end] 集計終了日時 (unixtime,未指定の場合は現在時刻)
     * @param {string} [viewerLogInterval] 集計間隔 (未指定の場合は1分間隔)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public v1VideosVideoIdAnalyticsGet(videoId: string, start?: number, end?: number, viewerLogInterval?: string, options?: RawAxiosRequestConfig) {
        return VideoApiFp(this.configuration).v1VideosVideoIdAnalyticsGet(videoId, start, end, viewerLogInterval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 動画を削除します。
     * @summary 動画削除
     * @param {string} videoId 動画ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public v1VideosVideoIdDelete(videoId: string, options?: RawAxiosRequestConfig) {
        return VideoApiFp(this.configuration).v1VideosVideoIdDelete(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された動画の詳細情報を取得します。
     * @summary 動画取得
     * @param {string} videoId 動画ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public v1VideosVideoIdGet(videoId: string, options?: RawAxiosRequestConfig) {
        return VideoApiFp(this.configuration).v1VideosVideoIdGet(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 動画の情報を更新します。
     * @summary 動画更新
     * @param {string} videoId 動画ID
     * @param {RequestUpdateVideoRequest} requestUpdateVideoRequest 動画情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public v1VideosVideoIdPatch(videoId: string, requestUpdateVideoRequest: RequestUpdateVideoRequest, options?: RawAxiosRequestConfig) {
        return VideoApiFp(this.configuration).v1VideosVideoIdPatch(videoId, requestUpdateVideoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VideoCommentApi - axios parameter creator
 * @export
 */
export const VideoCommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 動画コメントの状態（無効/有効）を更新します。
         * @summary 動画コメント更新
         * @param {string} videoId 動画ID
         * @param {string} commentId コメントID
         * @param {RequestUpdateVideoCommentRequest} requestUpdateVideoCommentRequest コメント情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdCommentsCommentIdPatch: async (videoId: string, commentId: string, requestUpdateVideoCommentRequest: RequestUpdateVideoCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('v1VideosVideoIdCommentsCommentIdPatch', 'videoId', videoId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('v1VideosVideoIdCommentsCommentIdPatch', 'commentId', commentId)
            // verify required parameter 'requestUpdateVideoCommentRequest' is not null or undefined
            assertParamExists('v1VideosVideoIdCommentsCommentIdPatch', 'requestUpdateVideoCommentRequest', requestUpdateVideoCommentRequest)
            const localVarPath = `/v1/videos/{videoId}/comments/{commentId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUpdateVideoCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された動画のコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
         * @summary 動画コメント一覧取得
         * @param {string} videoId 動画ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [start] 検索開始日時（unixtime）
         * @param {number} [end] 検索終了日時（unixtime）
         * @param {string} [next] 次ページトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdCommentsGet: async (videoId: string, limit?: number, start?: number, end?: number, next?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('v1VideosVideoIdCommentsGet', 'videoId', videoId)
            const localVarPath = `/v1/videos/{videoId}/comments`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerauth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoCommentApi - functional programming interface
 * @export
 */
export const VideoCommentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoCommentApiAxiosParamCreator(configuration)
    return {
        /**
         * 動画コメントの状態（無効/有効）を更新します。
         * @summary 動画コメント更新
         * @param {string} videoId 動画ID
         * @param {string} commentId コメントID
         * @param {RequestUpdateVideoCommentRequest} requestUpdateVideoCommentRequest コメント情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosVideoIdCommentsCommentIdPatch(videoId: string, commentId: string, requestUpdateVideoCommentRequest: RequestUpdateVideoCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosVideoIdCommentsCommentIdPatch(videoId, commentId, requestUpdateVideoCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoCommentApi.v1VideosVideoIdCommentsCommentIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された動画のコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
         * @summary 動画コメント一覧取得
         * @param {string} videoId 動画ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [start] 検索開始日時（unixtime）
         * @param {number} [end] 検索終了日時（unixtime）
         * @param {string} [next] 次ページトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VideosVideoIdCommentsGet(videoId: string, limit?: number, start?: number, end?: number, next?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVideoCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VideosVideoIdCommentsGet(videoId, limit, start, end, next, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoCommentApi.v1VideosVideoIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VideoCommentApi - factory interface
 * @export
 */
export const VideoCommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoCommentApiFp(configuration)
    return {
        /**
         * 動画コメントの状態（無効/有効）を更新します。
         * @summary 動画コメント更新
         * @param {string} videoId 動画ID
         * @param {string} commentId コメントID
         * @param {RequestUpdateVideoCommentRequest} requestUpdateVideoCommentRequest コメント情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdCommentsCommentIdPatch(videoId: string, commentId: string, requestUpdateVideoCommentRequest: RequestUpdateVideoCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1VideosVideoIdCommentsCommentIdPatch(videoId, commentId, requestUpdateVideoCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された動画のコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
         * @summary 動画コメント一覧取得
         * @param {string} videoId 動画ID
         * @param {number} [limit] 取得上限数(max:200)
         * @param {number} [start] 検索開始日時（unixtime）
         * @param {number} [end] 検索終了日時（unixtime）
         * @param {string} [next] 次ページトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VideosVideoIdCommentsGet(videoId: string, limit?: number, start?: number, end?: number, next?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseVideoCommentsResponse> {
            return localVarFp.v1VideosVideoIdCommentsGet(videoId, limit, start, end, next, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoCommentApi - object-oriented interface
 * @export
 * @class VideoCommentApi
 * @extends {BaseAPI}
 */
export class VideoCommentApi extends BaseAPI {
    /**
     * 動画コメントの状態（無効/有効）を更新します。
     * @summary 動画コメント更新
     * @param {string} videoId 動画ID
     * @param {string} commentId コメントID
     * @param {RequestUpdateVideoCommentRequest} requestUpdateVideoCommentRequest コメント情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoCommentApi
     */
    public v1VideosVideoIdCommentsCommentIdPatch(videoId: string, commentId: string, requestUpdateVideoCommentRequest: RequestUpdateVideoCommentRequest, options?: RawAxiosRequestConfig) {
        return VideoCommentApiFp(this.configuration).v1VideosVideoIdCommentsCommentIdPatch(videoId, commentId, requestUpdateVideoCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された動画のコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
     * @summary 動画コメント一覧取得
     * @param {string} videoId 動画ID
     * @param {number} [limit] 取得上限数(max:200)
     * @param {number} [start] 検索開始日時（unixtime）
     * @param {number} [end] 検索終了日時（unixtime）
     * @param {string} [next] 次ページトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoCommentApi
     */
    public v1VideosVideoIdCommentsGet(videoId: string, limit?: number, start?: number, end?: number, next?: string, options?: RawAxiosRequestConfig) {
        return VideoCommentApiFp(this.configuration).v1VideosVideoIdCommentsGet(videoId, limit, start, end, next, options).then((request) => request(this.axios, this.basePath));
    }
}



