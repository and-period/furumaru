/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductRequest,
  ErrorResponse,
  ProductResponse,
  ProductsResponse,
} from '../models/index';
import {
    CreateProductRequestFromJSON,
    CreateProductRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProductResponseFromJSON,
    ProductResponseToJSON,
    ProductsResponseFromJSON,
    ProductsResponseToJSON,
} from '../models/index';

export interface V1ProductsGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
    producerId?: string;
    orders?: string;
}

export interface V1ProductsPostRequest {
    createProductRequest: CreateProductRequest;
}

export interface V1ProductsProductIdGetRequest {
    productId: string;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * 商品の一覧を取得します。
     * 商品一覧取得
     */
    async v1ProductsGetRaw(requestParameters: V1ProductsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['producerId'] != null) {
            queryParameters['producerId'] = requestParameters['producerId'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsResponseFromJSON(jsonValue));
    }

    /**
     * 商品の一覧を取得します。
     * 商品一覧取得
     */
    async v1ProductsGet(requestParameters: V1ProductsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductsResponse> {
        const response = await this.v1ProductsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい商品を登録します。
     * 商品登録
     */
    async v1ProductsPostRaw(requestParameters: V1ProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>> {
        if (requestParameters['createProductRequest'] == null) {
            throw new runtime.RequiredError(
                'createProductRequest',
                'Required parameter "createProductRequest" was null or undefined when calling v1ProductsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/products`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRequestToJSON(requestParameters['createProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductResponseFromJSON(jsonValue));
    }

    /**
     * 新しい商品を登録します。
     * 商品登録
     */
    async v1ProductsPost(requestParameters: V1ProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse> {
        const response = await this.v1ProductsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定された商品の詳細情報を取得します。
     * 商品取得
     */
    async v1ProductsProductIdGetRaw(requestParameters: V1ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling v1ProductsProductIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/products/{productId}`;
        urlPath = urlPath.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductResponseFromJSON(jsonValue));
    }

    /**
     * 指定された商品の詳細情報を取得します。
     * 商品取得
     */
    async v1ProductsProductIdGet(requestParameters: V1ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse> {
        const response = await this.v1ProductsProductIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
