/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateThreadRequest,
  ErrorResponse,
  ThreadResponse,
  ThreadsResponse,
  UpdateThreadRequest,
} from '../models/index';
import {
    CreateThreadRequestFromJSON,
    CreateThreadRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ThreadResponseFromJSON,
    ThreadResponseToJSON,
    ThreadsResponseFromJSON,
    ThreadsResponseToJSON,
    UpdateThreadRequestFromJSON,
    UpdateThreadRequestToJSON,
} from '../models/index';

export interface V1ContactsContactIdThreadsGetRequest {
    contactId: string;
    limit?: number;
    offset?: number;
}

export interface V1ContactsContactIdThreadsPostRequest {
    contactId: string;
    createThreadRequest: CreateThreadRequest;
}

export interface V1ContactsContactIdThreadsThreadIdDeleteRequest {
    contactId: string;
    threadId: string;
}

export interface V1ContactsContactIdThreadsThreadIdGetRequest {
    contactId: string;
    threadId: string;
}

export interface V1ContactsContactIdThreadsThreadIdPatchRequest {
    contactId: string;
    threadId: string;
    updateThreadRequest: UpdateThreadRequest;
}

/**
 * 
 */
export class ThreadApi extends runtime.BaseAPI {

    /**
     * 指定されたお問い合わせのスレッド一覧を取得します。
     * お問い合わせスレッド一覧取得
     */
    async v1ContactsContactIdThreadsGetRaw(requestParameters: V1ContactsContactIdThreadsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsResponse>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdThreadsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}/threads`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたお問い合わせのスレッド一覧を取得します。
     * お問い合わせスレッド一覧取得
     */
    async v1ContactsContactIdThreadsGet(requestParameters: V1ContactsContactIdThreadsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsResponse> {
        const response = await this.v1ContactsContactIdThreadsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいスレッドを登録します。
     * スレッド登録
     */
    async v1ContactsContactIdThreadsPostRaw(requestParameters: V1ContactsContactIdThreadsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadResponse>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdThreadsPost().'
            );
        }

        if (requestParameters['createThreadRequest'] == null) {
            throw new runtime.RequiredError(
                'createThreadRequest',
                'Required parameter "createThreadRequest" was null or undefined when calling v1ContactsContactIdThreadsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}/threads`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateThreadRequestToJSON(requestParameters['createThreadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadResponseFromJSON(jsonValue));
    }

    /**
     * 新しいスレッドを登録します。
     * スレッド登録
     */
    async v1ContactsContactIdThreadsPost(requestParameters: V1ContactsContactIdThreadsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadResponse> {
        const response = await this.v1ContactsContactIdThreadsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スレッドを削除します。
     * スレッド削除
     */
    async v1ContactsContactIdThreadsThreadIdDeleteRaw(requestParameters: V1ContactsContactIdThreadsThreadIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdThreadsThreadIdDelete().'
            );
        }

        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling v1ContactsContactIdThreadsThreadIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}/threads/{threadId}`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));
        urlPath = urlPath.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スレッドを削除します。
     * スレッド削除
     */
    async v1ContactsContactIdThreadsThreadIdDelete(requestParameters: V1ContactsContactIdThreadsThreadIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ContactsContactIdThreadsThreadIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたスレッドの詳細情報を取得します。
     * スレッド取得
     */
    async v1ContactsContactIdThreadsThreadIdGetRaw(requestParameters: V1ContactsContactIdThreadsThreadIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadResponse>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdThreadsThreadIdGet().'
            );
        }

        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling v1ContactsContactIdThreadsThreadIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}/threads/{threadId}`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));
        urlPath = urlPath.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたスレッドの詳細情報を取得します。
     * スレッド取得
     */
    async v1ContactsContactIdThreadsThreadIdGet(requestParameters: V1ContactsContactIdThreadsThreadIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadResponse> {
        const response = await this.v1ContactsContactIdThreadsThreadIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スレッドの情報を更新します。
     * スレッド更新
     */
    async v1ContactsContactIdThreadsThreadIdPatchRaw(requestParameters: V1ContactsContactIdThreadsThreadIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdThreadsThreadIdPatch().'
            );
        }

        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling v1ContactsContactIdThreadsThreadIdPatch().'
            );
        }

        if (requestParameters['updateThreadRequest'] == null) {
            throw new runtime.RequiredError(
                'updateThreadRequest',
                'Required parameter "updateThreadRequest" was null or undefined when calling v1ContactsContactIdThreadsThreadIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}/threads/{threadId}`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));
        urlPath = urlPath.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateThreadRequestToJSON(requestParameters['updateThreadRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スレッドの情報を更新します。
     * スレッド更新
     */
    async v1ContactsContactIdThreadsThreadIdPatch(requestParameters: V1ContactsContactIdThreadsThreadIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ContactsContactIdThreadsThreadIdPatchRaw(requestParameters, initOverrides);
    }

}
