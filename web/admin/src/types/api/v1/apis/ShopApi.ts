/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ShopResponse,
  UpdateShopRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ShopResponseFromJSON,
    ShopResponseToJSON,
    UpdateShopRequestFromJSON,
    UpdateShopRequestToJSON,
} from '../models/index';

export interface V1ShopsShopIdGetRequest {
    shopId: string;
}

export interface V1ShopsShopIdPatchRequest {
    shopId: string;
    updateShopRequest: UpdateShopRequest;
}

/**
 * 
 */
export class ShopApi extends runtime.BaseAPI {

    /**
     * 指定されたショップの詳細情報を取得します。コーディネーター、生産者、商品種別情報も含まれます。
     * ショップ取得
     */
    async v1ShopsShopIdGetRaw(requestParameters: V1ShopsShopIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShopResponse>> {
        if (requestParameters['shopId'] == null) {
            throw new runtime.RequiredError(
                'shopId',
                'Required parameter "shopId" was null or undefined when calling v1ShopsShopIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/shops/{shopId}`;
        urlPath = urlPath.replace(`{${"shopId"}}`, encodeURIComponent(String(requestParameters['shopId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたショップの詳細情報を取得します。コーディネーター、生産者、商品種別情報も含まれます。
     * ショップ取得
     */
    async v1ShopsShopIdGet(requestParameters: V1ShopsShopIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShopResponse> {
        const response = await this.v1ShopsShopIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ショップの情報を更新します。ショップ名、商品種別、営業日を変更できます。
     * ショップ更新
     */
    async v1ShopsShopIdPatchRaw(requestParameters: V1ShopsShopIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['shopId'] == null) {
            throw new runtime.RequiredError(
                'shopId',
                'Required parameter "shopId" was null or undefined when calling v1ShopsShopIdPatch().'
            );
        }

        if (requestParameters['updateShopRequest'] == null) {
            throw new runtime.RequiredError(
                'updateShopRequest',
                'Required parameter "updateShopRequest" was null or undefined when calling v1ShopsShopIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/shops/{shopId}`;
        urlPath = urlPath.replace(`{${"shopId"}}`, encodeURIComponent(String(requestParameters['shopId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateShopRequestToJSON(requestParameters['updateShopRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ショップの情報を更新します。ショップ名、商品種別、営業日を変更できます。
     * ショップ更新
     */
    async v1ShopsShopIdPatch(requestParameters: V1ShopsShopIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ShopsShopIdPatchRaw(requestParameters, initOverrides);
    }

}
