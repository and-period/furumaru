/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdministratorResponse,
  AdministratorsResponse,
  CreateAdministratorRequest,
  ErrorResponse,
  UpdateAdministratorEmailRequest,
  UpdateAdministratorRequest,
} from '../models/index';
import {
    AdministratorResponseFromJSON,
    AdministratorResponseToJSON,
    AdministratorsResponseFromJSON,
    AdministratorsResponseToJSON,
    CreateAdministratorRequestFromJSON,
    CreateAdministratorRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateAdministratorEmailRequestFromJSON,
    UpdateAdministratorEmailRequestToJSON,
    UpdateAdministratorRequestFromJSON,
    UpdateAdministratorRequestToJSON,
} from '../models/index';

export interface V1AdministratorsAdminIdDeleteRequest {
    adminId: string;
}

export interface V1AdministratorsAdminIdEmailPatchRequest {
    adminId: string;
    updateAdministratorEmailRequest: UpdateAdministratorEmailRequest;
}

export interface V1AdministratorsAdminIdGetRequest {
    adminId: string;
}

export interface V1AdministratorsAdminIdPasswordPatchRequest {
    adminId: string;
    body?: object;
}

export interface V1AdministratorsAdminIdPatchRequest {
    adminId: string;
    updateAdministratorRequest: UpdateAdministratorRequest;
}

export interface V1AdministratorsGetRequest {
    limit?: number;
    offset?: number;
}

export interface V1AdministratorsPostRequest {
    createAdministratorRequest: CreateAdministratorRequest;
}

/**
 * 
 */
export class AdministratorApi extends runtime.BaseAPI {

    /**
     * システム管理者を削除します。
     * システム管理者退会
     */
    async v1AdministratorsAdminIdDeleteRaw(requestParameters: V1AdministratorsAdminIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminId'] == null) {
            throw new runtime.RequiredError(
                'adminId',
                'Required parameter "adminId" was null or undefined when calling v1AdministratorsAdminIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators/{adminId}`;
        urlPath = urlPath.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters['adminId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * システム管理者を削除します。
     * システム管理者退会
     */
    async v1AdministratorsAdminIdDelete(requestParameters: V1AdministratorsAdminIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AdministratorsAdminIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * システム管理者のメールアドレスを更新します。
     * システム管理者メールアドレス更新
     */
    async v1AdministratorsAdminIdEmailPatchRaw(requestParameters: V1AdministratorsAdminIdEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminId'] == null) {
            throw new runtime.RequiredError(
                'adminId',
                'Required parameter "adminId" was null or undefined when calling v1AdministratorsAdminIdEmailPatch().'
            );
        }

        if (requestParameters['updateAdministratorEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAdministratorEmailRequest',
                'Required parameter "updateAdministratorEmailRequest" was null or undefined when calling v1AdministratorsAdminIdEmailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators/{adminId}/email`;
        urlPath = urlPath.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters['adminId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAdministratorEmailRequestToJSON(requestParameters['updateAdministratorEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * システム管理者のメールアドレスを更新します。
     * システム管理者メールアドレス更新
     */
    async v1AdministratorsAdminIdEmailPatch(requestParameters: V1AdministratorsAdminIdEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AdministratorsAdminIdEmailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * システム管理者の詳細情報を取得します。
     * システム管理者取得
     */
    async v1AdministratorsAdminIdGetRaw(requestParameters: V1AdministratorsAdminIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorResponse>> {
        if (requestParameters['adminId'] == null) {
            throw new runtime.RequiredError(
                'adminId',
                'Required parameter "adminId" was null or undefined when calling v1AdministratorsAdminIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators/{adminId}`;
        urlPath = urlPath.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters['adminId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorResponseFromJSON(jsonValue));
    }

    /**
     * システム管理者の詳細情報を取得します。
     * システム管理者取得
     */
    async v1AdministratorsAdminIdGet(requestParameters: V1AdministratorsAdminIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorResponse> {
        const response = await this.v1AdministratorsAdminIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * システム管理者のパスワードをランダムに生成して更新します。
     * システム管理者パスワード更新(ランダム生成)
     */
    async v1AdministratorsAdminIdPasswordPatchRaw(requestParameters: V1AdministratorsAdminIdPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminId'] == null) {
            throw new runtime.RequiredError(
                'adminId',
                'Required parameter "adminId" was null or undefined when calling v1AdministratorsAdminIdPasswordPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators/{adminId}/password`;
        urlPath = urlPath.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters['adminId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * システム管理者のパスワードをランダムに生成して更新します。
     * システム管理者パスワード更新(ランダム生成)
     */
    async v1AdministratorsAdminIdPasswordPatch(requestParameters: V1AdministratorsAdminIdPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AdministratorsAdminIdPasswordPatchRaw(requestParameters, initOverrides);
    }

    /**
     * システム管理者の情報を更新します。
     * システム管理者更新
     */
    async v1AdministratorsAdminIdPatchRaw(requestParameters: V1AdministratorsAdminIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminId'] == null) {
            throw new runtime.RequiredError(
                'adminId',
                'Required parameter "adminId" was null or undefined when calling v1AdministratorsAdminIdPatch().'
            );
        }

        if (requestParameters['updateAdministratorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAdministratorRequest',
                'Required parameter "updateAdministratorRequest" was null or undefined when calling v1AdministratorsAdminIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators/{adminId}`;
        urlPath = urlPath.replace(`{${"adminId"}}`, encodeURIComponent(String(requestParameters['adminId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAdministratorRequestToJSON(requestParameters['updateAdministratorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * システム管理者の情報を更新します。
     * システム管理者更新
     */
    async v1AdministratorsAdminIdPatch(requestParameters: V1AdministratorsAdminIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AdministratorsAdminIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * システム管理者の一覧を取得します。
     * システム管理者一覧取得
     */
    async v1AdministratorsGetRaw(requestParameters: V1AdministratorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorsResponseFromJSON(jsonValue));
    }

    /**
     * システム管理者の一覧を取得します。
     * システム管理者一覧取得
     */
    async v1AdministratorsGet(requestParameters: V1AdministratorsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorsResponse> {
        const response = await this.v1AdministratorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいシステム管理者を登録します。
     * システム管理者登録
     */
    async v1AdministratorsPostRaw(requestParameters: V1AdministratorsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdministratorResponse>> {
        if (requestParameters['createAdministratorRequest'] == null) {
            throw new runtime.RequiredError(
                'createAdministratorRequest',
                'Required parameter "createAdministratorRequest" was null or undefined when calling v1AdministratorsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/administrators`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAdministratorRequestToJSON(requestParameters['createAdministratorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministratorResponseFromJSON(jsonValue));
    }

    /**
     * 新しいシステム管理者を登録します。
     * システム管理者登録
     */
    async v1AdministratorsPost(requestParameters: V1AdministratorsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdministratorResponse> {
        const response = await this.v1AdministratorsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
