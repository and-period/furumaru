/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApproveSpotRequest,
  CreateSpotRequest,
  ErrorResponse,
  SpotResponse,
  SpotsResponse,
  UpdateSpotRequest,
} from '../models/index';
import {
    ApproveSpotRequestFromJSON,
    ApproveSpotRequestToJSON,
    CreateSpotRequestFromJSON,
    CreateSpotRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SpotResponseFromJSON,
    SpotResponseToJSON,
    SpotsResponseFromJSON,
    SpotsResponseToJSON,
    UpdateSpotRequestFromJSON,
    UpdateSpotRequestToJSON,
} from '../models/index';

export interface V1SpotsGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
}

export interface V1SpotsPostRequest {
    createSpotRequest: CreateSpotRequest;
}

export interface V1SpotsSpotIdApprovalPatchRequest {
    spotId: string;
    approveSpotRequest: ApproveSpotRequest;
}

export interface V1SpotsSpotIdDeleteRequest {
    spotId: string;
}

export interface V1SpotsSpotIdGetRequest {
    spotId: string;
}

export interface V1SpotsSpotIdPatchRequest {
    spotId: string;
    updateSpotRequest: UpdateSpotRequest;
}

/**
 * 
 */
export class SpotApi extends runtime.BaseAPI {

    /**
     * スポットの一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
     * スポット一覧取得
     */
    async v1SpotsGetRaw(requestParameters: V1SpotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spots`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotsResponseFromJSON(jsonValue));
    }

    /**
     * スポットの一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
     * スポット一覧取得
     */
    async v1SpotsGet(requestParameters: V1SpotsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotsResponse> {
        const response = await this.v1SpotsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいスポットを登録します。
     * スポット登録
     */
    async v1SpotsPostRaw(requestParameters: V1SpotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotResponse>> {
        if (requestParameters['createSpotRequest'] == null) {
            throw new runtime.RequiredError(
                'createSpotRequest',
                'Required parameter "createSpotRequest" was null or undefined when calling v1SpotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spots`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSpotRequestToJSON(requestParameters['createSpotRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotResponseFromJSON(jsonValue));
    }

    /**
     * 新しいスポットを登録します。
     * スポット登録
     */
    async v1SpotsPost(requestParameters: V1SpotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotResponse> {
        const response = await this.v1SpotsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スポットの承認状態を更新します。
     * スポット承認
     */
    async v1SpotsSpotIdApprovalPatchRaw(requestParameters: V1SpotsSpotIdApprovalPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling v1SpotsSpotIdApprovalPatch().'
            );
        }

        if (requestParameters['approveSpotRequest'] == null) {
            throw new runtime.RequiredError(
                'approveSpotRequest',
                'Required parameter "approveSpotRequest" was null or undefined when calling v1SpotsSpotIdApprovalPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spots/{spotId}/approval`;
        urlPath = urlPath.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveSpotRequestToJSON(requestParameters['approveSpotRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スポットの承認状態を更新します。
     * スポット承認
     */
    async v1SpotsSpotIdApprovalPatch(requestParameters: V1SpotsSpotIdApprovalPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SpotsSpotIdApprovalPatchRaw(requestParameters, initOverrides);
    }

    /**
     * スポットを削除します。
     * スポット削除
     */
    async v1SpotsSpotIdDeleteRaw(requestParameters: V1SpotsSpotIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling v1SpotsSpotIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spots/{spotId}`;
        urlPath = urlPath.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スポットを削除します。
     * スポット削除
     */
    async v1SpotsSpotIdDelete(requestParameters: V1SpotsSpotIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SpotsSpotIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたスポットの詳細情報を取得します。
     * スポット取得
     */
    async v1SpotsSpotIdGetRaw(requestParameters: V1SpotsSpotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotResponse>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling v1SpotsSpotIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spots/{spotId}`;
        urlPath = urlPath.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたスポットの詳細情報を取得します。
     * スポット取得
     */
    async v1SpotsSpotIdGet(requestParameters: V1SpotsSpotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotResponse> {
        const response = await this.v1SpotsSpotIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スポットの情報を更新します。
     * スポット更新
     */
    async v1SpotsSpotIdPatchRaw(requestParameters: V1SpotsSpotIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotId'] == null) {
            throw new runtime.RequiredError(
                'spotId',
                'Required parameter "spotId" was null or undefined when calling v1SpotsSpotIdPatch().'
            );
        }

        if (requestParameters['updateSpotRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSpotRequest',
                'Required parameter "updateSpotRequest" was null or undefined when calling v1SpotsSpotIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spots/{spotId}`;
        urlPath = urlPath.replace(`{${"spotId"}}`, encodeURIComponent(String(requestParameters['spotId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSpotRequestToJSON(requestParameters['updateSpotRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スポットの情報を更新します。
     * スポット更新
     */
    async v1SpotsSpotIdPatch(requestParameters: V1SpotsSpotIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SpotsSpotIdPatchRaw(requestParameters, initOverrides);
    }

}
