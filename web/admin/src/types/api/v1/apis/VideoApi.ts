/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyzeVideoResponse,
  CreateVideoRequest,
  ErrorResponse,
  UpdateVideoRequest,
  VideoResponse,
  VideosResponse,
} from '../models/index';
import {
    AnalyzeVideoResponseFromJSON,
    AnalyzeVideoResponseToJSON,
    CreateVideoRequestFromJSON,
    CreateVideoRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateVideoRequestFromJSON,
    UpdateVideoRequestToJSON,
    VideoResponseFromJSON,
    VideoResponseToJSON,
    VideosResponseFromJSON,
    VideosResponseToJSON,
} from '../models/index';

export interface V1VideosGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
}

export interface V1VideosPostRequest {
    createVideoRequest: CreateVideoRequest;
}

export interface V1VideosVideoIdAnalyticsGetRequest {
    videoId: string;
    start?: number;
    end?: number;
    viewerLogInterval?: string;
}

export interface V1VideosVideoIdDeleteRequest {
    videoId: string;
}

export interface V1VideosVideoIdGetRequest {
    videoId: string;
}

export interface V1VideosVideoIdPatchRequest {
    videoId: string;
    updateVideoRequest: UpdateVideoRequest;
}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI {

    /**
     * 動画の一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
     * 動画一覧取得
     */
    async v1VideosGetRaw(requestParameters: V1VideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideosResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideosResponseFromJSON(jsonValue));
    }

    /**
     * 動画の一覧を取得します。ページネーションと名前でのフィルタリングに対応しています。
     * 動画一覧取得
     */
    async v1VideosGet(requestParameters: V1VideosGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideosResponse> {
        const response = await this.v1VideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい動画を登録します。
     * 動画登録
     */
    async v1VideosPostRaw(requestParameters: V1VideosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoResponse>> {
        if (requestParameters['createVideoRequest'] == null) {
            throw new runtime.RequiredError(
                'createVideoRequest',
                'Required parameter "createVideoRequest" was null or undefined when calling v1VideosPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVideoRequestToJSON(requestParameters['createVideoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoResponseFromJSON(jsonValue));
    }

    /**
     * 新しい動画を登録します。
     * 動画登録
     */
    async v1VideosPost(requestParameters: V1VideosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoResponse> {
        const response = await this.v1VideosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定された動画の視聴者分析データを取得します。集計期間と集計間隔を指定できます。
     * 動画分析情報取得
     */
    async v1VideosVideoIdAnalyticsGetRaw(requestParameters: V1VideosVideoIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyzeVideoResponse>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling v1VideosVideoIdAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['viewerLogInterval'] != null) {
            queryParameters['viewerLogInterval'] = requestParameters['viewerLogInterval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos/{videoId}/analytics`;
        urlPath = urlPath.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyzeVideoResponseFromJSON(jsonValue));
    }

    /**
     * 指定された動画の視聴者分析データを取得します。集計期間と集計間隔を指定できます。
     * 動画分析情報取得
     */
    async v1VideosVideoIdAnalyticsGet(requestParameters: V1VideosVideoIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyzeVideoResponse> {
        const response = await this.v1VideosVideoIdAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画を削除します。
     * 動画削除
     */
    async v1VideosVideoIdDeleteRaw(requestParameters: V1VideosVideoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling v1VideosVideoIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos/{videoId}`;
        urlPath = urlPath.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 動画を削除します。
     * 動画削除
     */
    async v1VideosVideoIdDelete(requestParameters: V1VideosVideoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1VideosVideoIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された動画の詳細情報を取得します。
     * 動画取得
     */
    async v1VideosVideoIdGetRaw(requestParameters: V1VideosVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoResponse>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling v1VideosVideoIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos/{videoId}`;
        urlPath = urlPath.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoResponseFromJSON(jsonValue));
    }

    /**
     * 指定された動画の詳細情報を取得します。
     * 動画取得
     */
    async v1VideosVideoIdGet(requestParameters: V1VideosVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoResponse> {
        const response = await this.v1VideosVideoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画の情報を更新します。
     * 動画更新
     */
    async v1VideosVideoIdPatchRaw(requestParameters: V1VideosVideoIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling v1VideosVideoIdPatch().'
            );
        }

        if (requestParameters['updateVideoRequest'] == null) {
            throw new runtime.RequiredError(
                'updateVideoRequest',
                'Required parameter "updateVideoRequest" was null or undefined when calling v1VideosVideoIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos/{videoId}`;
        urlPath = urlPath.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVideoRequestToJSON(requestParameters['updateVideoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 動画の情報を更新します。
     * 動画更新
     */
    async v1VideosVideoIdPatch(requestParameters: V1VideosVideoIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1VideosVideoIdPatchRaw(requestParameters, initOverrides);
    }

}
