/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateShippingRequest,
  ErrorResponse,
  ShippingResponse,
  ShippingsResponse,
  UpdateDefaultShippingRequest,
  UpdateShippingRequest,
} from '../models/index';
import {
    CreateShippingRequestFromJSON,
    CreateShippingRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ShippingResponseFromJSON,
    ShippingResponseToJSON,
    ShippingsResponseFromJSON,
    ShippingsResponseToJSON,
    UpdateDefaultShippingRequestFromJSON,
    UpdateDefaultShippingRequestToJSON,
    UpdateShippingRequestFromJSON,
    UpdateShippingRequestToJSON,
} from '../models/index';

export interface V1CoordinatorsCoordinatorIdShippingsGetRequest {
    coordinatorId: string;
    limit?: number;
    offset?: number;
}

export interface V1CoordinatorsCoordinatorIdShippingsPostRequest {
    coordinatorId: string;
    createShippingRequest: CreateShippingRequest;
}

export interface V1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatchRequest {
    coordinatorId: string;
    shippingId: string;
}

export interface V1CoordinatorsCoordinatorIdShippingsShippingIdDeleteRequest {
    coordinatorId: string;
    shippingId: string;
}

export interface V1CoordinatorsCoordinatorIdShippingsShippingIdGetRequest {
    coordinatorId: string;
    shippingId: string;
}

export interface V1CoordinatorsCoordinatorIdShippingsShippingIdPatchRequest {
    coordinatorId: string;
    shippingId: string;
    updateShippingRequest: UpdateShippingRequest;
}

export interface V1ShippingsDefaultPatchRequest {
    updateDefaultShippingRequest: UpdateDefaultShippingRequest;
}

/**
 * 
 */
export class ShippingApi extends runtime.BaseAPI {

    /**
     * 指定されたコーディネーターの配送設定一覧を取得します。ページネーションに対応しています。
     * 配送設定一覧取得
     */
    async v1CoordinatorsCoordinatorIdShippingsGetRaw(requestParameters: V1CoordinatorsCoordinatorIdShippingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingsResponse>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/coordinators/{coordinatorId}/shippings`;
        urlPath = urlPath.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingsResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたコーディネーターの配送設定一覧を取得します。ページネーションに対応しています。
     * 配送設定一覧取得
     */
    async v1CoordinatorsCoordinatorIdShippingsGet(requestParameters: V1CoordinatorsCoordinatorIdShippingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingsResponse> {
        const response = await this.v1CoordinatorsCoordinatorIdShippingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい配送設定を登録します。
     * 配送設定登録
     */
    async v1CoordinatorsCoordinatorIdShippingsPostRaw(requestParameters: V1CoordinatorsCoordinatorIdShippingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsPost().'
            );
        }

        if (requestParameters['createShippingRequest'] == null) {
            throw new runtime.RequiredError(
                'createShippingRequest',
                'Required parameter "createShippingRequest" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/coordinators/{coordinatorId}/shippings`;
        urlPath = urlPath.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShippingRequestToJSON(requestParameters['createShippingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     * 新しい配送設定を登録します。
     * 配送設定登録
     */
    async v1CoordinatorsCoordinatorIdShippingsPost(requestParameters: V1CoordinatorsCoordinatorIdShippingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingResponse> {
        const response = await this.v1CoordinatorsCoordinatorIdShippingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定した配送設定をアクティブに設定します。
     * アクティブ配送設定更新
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatchRaw(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch().'
            );
        }

        if (requestParameters['shippingId'] == null) {
            throw new runtime.RequiredError(
                'shippingId',
                'Required parameter "shippingId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}/activation`;
        urlPath = urlPath.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId'])));
        urlPath = urlPath.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters['shippingId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定した配送設定をアクティブに設定します。
     * アクティブ配送設定更新
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatch(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CoordinatorsCoordinatorIdShippingsShippingIdActivationPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 配送設定を削除します。
     * 配送設定削除
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdDeleteRaw(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdDelete().'
            );
        }

        if (requestParameters['shippingId'] == null) {
            throw new runtime.RequiredError(
                'shippingId',
                'Required parameter "shippingId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}`;
        urlPath = urlPath.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId'])));
        urlPath = urlPath.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters['shippingId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 配送設定を削除します。
     * 配送設定削除
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdDelete(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CoordinatorsCoordinatorIdShippingsShippingIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された配送設定の詳細情報を取得します。
     * 配送設定取得
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdGetRaw(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdGet().'
            );
        }

        if (requestParameters['shippingId'] == null) {
            throw new runtime.RequiredError(
                'shippingId',
                'Required parameter "shippingId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}`;
        urlPath = urlPath.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId'])));
        urlPath = urlPath.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters['shippingId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     * 指定された配送設定の詳細情報を取得します。
     * 配送設定取得
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdGet(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingResponse> {
        const response = await this.v1CoordinatorsCoordinatorIdShippingsShippingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 配送設定の情報を更新します。
     * 配送設定更新
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdPatchRaw(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['coordinatorId'] == null) {
            throw new runtime.RequiredError(
                'coordinatorId',
                'Required parameter "coordinatorId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdPatch().'
            );
        }

        if (requestParameters['shippingId'] == null) {
            throw new runtime.RequiredError(
                'shippingId',
                'Required parameter "shippingId" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdPatch().'
            );
        }

        if (requestParameters['updateShippingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateShippingRequest',
                'Required parameter "updateShippingRequest" was null or undefined when calling v1CoordinatorsCoordinatorIdShippingsShippingIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/coordinators/{coordinatorId}/shippings/{shippingId}`;
        urlPath = urlPath.replace(`{${"coordinatorId"}}`, encodeURIComponent(String(requestParameters['coordinatorId'])));
        urlPath = urlPath.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters['shippingId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateShippingRequestToJSON(requestParameters['updateShippingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 配送設定の情報を更新します。
     * 配送設定更新
     */
    async v1CoordinatorsCoordinatorIdShippingsShippingIdPatch(requestParameters: V1CoordinatorsCoordinatorIdShippingsShippingIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CoordinatorsCoordinatorIdShippingsShippingIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * デフォルトの配送設定を取得します。
     * デフォルト配送設定取得
     */
    async v1ShippingsDefaultGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/shippings/default`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     * デフォルトの配送設定を取得します。
     * デフォルト配送設定取得
     */
    async v1ShippingsDefaultGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingResponse> {
        const response = await this.v1ShippingsDefaultGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * デフォルトの配送設定を更新します。
     * デフォルト配送設定更新
     */
    async v1ShippingsDefaultPatchRaw(requestParameters: V1ShippingsDefaultPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateDefaultShippingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateDefaultShippingRequest',
                'Required parameter "updateDefaultShippingRequest" was null or undefined when calling v1ShippingsDefaultPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/shippings/default`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDefaultShippingRequestToJSON(requestParameters['updateDefaultShippingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * デフォルトの配送設定を更新します。
     * デフォルト配送設定更新
     */
    async v1ShippingsDefaultPatch(requestParameters: V1ShippingsDefaultPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ShippingsDefaultPatchRaw(requestParameters, initOverrides);
    }

}
