/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivateBroadcastMP4Request,
  AuthYoutubeBroadcastRequest,
  AuthYoutubeBroadcastResponse,
  BroadcastResponse,
  CallbackAuthYoutubeBroadcastRequest,
  CreateYoutubeBroadcastRequest,
  ErrorResponse,
  GuestBroadcastResponse,
  UpdateBroadcastArchiveRequest,
} from '../models/index';
import {
    ActivateBroadcastMP4RequestFromJSON,
    ActivateBroadcastMP4RequestToJSON,
    AuthYoutubeBroadcastRequestFromJSON,
    AuthYoutubeBroadcastRequestToJSON,
    AuthYoutubeBroadcastResponseFromJSON,
    AuthYoutubeBroadcastResponseToJSON,
    BroadcastResponseFromJSON,
    BroadcastResponseToJSON,
    CallbackAuthYoutubeBroadcastRequestFromJSON,
    CallbackAuthYoutubeBroadcastRequestToJSON,
    CreateYoutubeBroadcastRequestFromJSON,
    CreateYoutubeBroadcastRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GuestBroadcastResponseFromJSON,
    GuestBroadcastResponseToJSON,
    UpdateBroadcastArchiveRequestFromJSON,
    UpdateBroadcastArchiveRequestToJSON,
} from '../models/index';

export interface V1GuestsSchedulesBroadcastsYoutubeAuthCompletePostRequest {
    callbackAuthYoutubeBroadcastRequest: CallbackAuthYoutubeBroadcastRequest;
}

export interface V1GuestsSchedulesBroadcastsYoutubePostRequest {
    createYoutubeBroadcastRequest: CreateYoutubeBroadcastRequest;
}

export interface V1SchedulesScheduleIdBroadcastsArchiveVideoPostRequest {
    scheduleId: string;
    updateBroadcastArchiveRequest: UpdateBroadcastArchiveRequest;
}

export interface V1SchedulesScheduleIdBroadcastsDeleteRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdBroadcastsGetRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdBroadcastsMp4PostRequest {
    scheduleId: string;
    activateBroadcastMP4Request: ActivateBroadcastMP4Request;
}

export interface V1SchedulesScheduleIdBroadcastsPostRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdBroadcastsRtmpPostRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdBroadcastsStaticImageDeleteRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdBroadcastsStaticImagePostRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdBroadcastsYoutubeAuthPostRequest {
    scheduleId: string;
    authYoutubeBroadcastRequest: AuthYoutubeBroadcastRequest;
}

/**
 * 
 */
export class BroadcastApi extends runtime.BaseAPI {

    /**
     * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
     * ゲスト用ライブ配信情報取得
     */
    async v1GuestsSchedulesBroadcastsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestBroadcastResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/guests/schedules/-/broadcasts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestBroadcastResponseFromJSON(jsonValue));
    }

    /**
     * セッションIDを使用してゲスト向けのライブ配信情報を取得します。
     * ゲスト用ライブ配信情報取得
     */
    async v1GuestsSchedulesBroadcastsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestBroadcastResponse> {
        const response = await this.v1GuestsSchedulesBroadcastsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Youtube認証完了後のコールバック処理を行います。
     * マルシェライブ配信のYoutube認証後処理
     */
    async v1GuestsSchedulesBroadcastsYoutubeAuthCompletePostRaw(requestParameters: V1GuestsSchedulesBroadcastsYoutubeAuthCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestBroadcastResponse>> {
        if (requestParameters['callbackAuthYoutubeBroadcastRequest'] == null) {
            throw new runtime.RequiredError(
                'callbackAuthYoutubeBroadcastRequest',
                'Required parameter "callbackAuthYoutubeBroadcastRequest" was null or undefined when calling v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/guests/schedules/-/broadcasts/youtube/auth/complete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CallbackAuthYoutubeBroadcastRequestToJSON(requestParameters['callbackAuthYoutubeBroadcastRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestBroadcastResponseFromJSON(jsonValue));
    }

    /**
     * Youtube認証完了後のコールバック処理を行います。
     * マルシェライブ配信のYoutube認証後処理
     */
    async v1GuestsSchedulesBroadcastsYoutubeAuthCompletePost(requestParameters: V1GuestsSchedulesBroadcastsYoutubeAuthCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestBroadcastResponse> {
        const response = await this.v1GuestsSchedulesBroadcastsYoutubeAuthCompletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Youtube側でライブ配信を作成します。
     * マルシェライブ配信のYoutube連携
     */
    async v1GuestsSchedulesBroadcastsYoutubePostRaw(requestParameters: V1GuestsSchedulesBroadcastsYoutubePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createYoutubeBroadcastRequest'] == null) {
            throw new runtime.RequiredError(
                'createYoutubeBroadcastRequest',
                'Required parameter "createYoutubeBroadcastRequest" was null or undefined when calling v1GuestsSchedulesBroadcastsYoutubePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/guests/schedules/-/broadcasts/youtube`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateYoutubeBroadcastRequestToJSON(requestParameters['createYoutubeBroadcastRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Youtube側でライブ配信を作成します。
     * マルシェライブ配信のYoutube連携
     */
    async v1GuestsSchedulesBroadcastsYoutubePost(requestParameters: V1GuestsSchedulesBroadcastsYoutubePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1GuestsSchedulesBroadcastsYoutubePostRaw(requestParameters, initOverrides);
    }

    /**
     * ライブ配信終了後にオンデマンド配信用の映像をアップロードします。
     * オンデマンド配信用の映像をアップロード
     */
    async v1SchedulesScheduleIdBroadcastsArchiveVideoPostRaw(requestParameters: V1SchedulesScheduleIdBroadcastsArchiveVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsArchiveVideoPost().'
            );
        }

        if (requestParameters['updateBroadcastArchiveRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBroadcastArchiveRequest',
                'Required parameter "updateBroadcastArchiveRequest" was null or undefined when calling v1SchedulesScheduleIdBroadcastsArchiveVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts/archive-video`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBroadcastArchiveRequestToJSON(requestParameters['updateBroadcastArchiveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信終了後にオンデマンド配信用の映像をアップロードします。
     * オンデマンド配信用の映像をアップロード
     */
    async v1SchedulesScheduleIdBroadcastsArchiveVideoPost(requestParameters: V1SchedulesScheduleIdBroadcastsArchiveVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsArchiveVideoPostRaw(requestParameters, initOverrides);
    }

    /**
     * ライブ配信を一時停止します。
     * マルシェライブ配信一時停止
     */
    async v1SchedulesScheduleIdBroadcastsDeleteRaw(requestParameters: V1SchedulesScheduleIdBroadcastsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信を一時停止します。
     * マルシェライブ配信一時停止
     */
    async v1SchedulesScheduleIdBroadcastsDelete(requestParameters: V1SchedulesScheduleIdBroadcastsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたスケジュールのライブ配信情報を取得します。
     * マルシェライブ配信取得
     */
    async v1SchedulesScheduleIdBroadcastsGetRaw(requestParameters: V1SchedulesScheduleIdBroadcastsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BroadcastResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BroadcastResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたスケジュールのライブ配信情報を取得します。
     * マルシェライブ配信取得
     */
    async v1SchedulesScheduleIdBroadcastsGet(requestParameters: V1SchedulesScheduleIdBroadcastsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BroadcastResponse> {
        const response = await this.v1SchedulesScheduleIdBroadcastsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ライブ配信の入力ソースをMP4ファイルに切り替えます。
     * ライブ配信中の入力をMP4へ切り替え
     */
    async v1SchedulesScheduleIdBroadcastsMp4PostRaw(requestParameters: V1SchedulesScheduleIdBroadcastsMp4PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsMp4Post().'
            );
        }

        if (requestParameters['activateBroadcastMP4Request'] == null) {
            throw new runtime.RequiredError(
                'activateBroadcastMP4Request',
                'Required parameter "activateBroadcastMP4Request" was null or undefined when calling v1SchedulesScheduleIdBroadcastsMp4Post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts/mp4`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivateBroadcastMP4RequestToJSON(requestParameters['activateBroadcastMP4Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信の入力ソースをMP4ファイルに切り替えます。
     * ライブ配信中の入力をMP4へ切り替え
     */
    async v1SchedulesScheduleIdBroadcastsMp4Post(requestParameters: V1SchedulesScheduleIdBroadcastsMp4PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsMp4PostRaw(requestParameters, initOverrides);
    }

    /**
     * ライブ配信の一時停止を解除します。
     * マルシェライブ配信一時停止解除
     */
    async v1SchedulesScheduleIdBroadcastsPostRaw(requestParameters: V1SchedulesScheduleIdBroadcastsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信の一時停止を解除します。
     * マルシェライブ配信一時停止解除
     */
    async v1SchedulesScheduleIdBroadcastsPost(requestParameters: V1SchedulesScheduleIdBroadcastsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsPostRaw(requestParameters, initOverrides);
    }

    /**
     * ライブ配信の入力ソースをRTMPに切り替えます。
     * ライブ配信中の入力をRTMPへ切り替え
     */
    async v1SchedulesScheduleIdBroadcastsRtmpPostRaw(requestParameters: V1SchedulesScheduleIdBroadcastsRtmpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsRtmpPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts/rtmp`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信の入力ソースをRTMPに切り替えます。
     * ライブ配信中の入力をRTMPへ切り替え
     */
    async v1SchedulesScheduleIdBroadcastsRtmpPost(requestParameters: V1SchedulesScheduleIdBroadcastsRtmpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsRtmpPostRaw(requestParameters, initOverrides);
    }

    /**
     * ライブ配信中のふた絵（静止画）を無効化して通常配信に戻します。
     * ライブ配信のふた絵を無効化
     */
    async v1SchedulesScheduleIdBroadcastsStaticImageDeleteRaw(requestParameters: V1SchedulesScheduleIdBroadcastsStaticImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsStaticImageDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts/static-image`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信中のふた絵（静止画）を無効化して通常配信に戻します。
     * ライブ配信のふた絵を無効化
     */
    async v1SchedulesScheduleIdBroadcastsStaticImageDelete(requestParameters: V1SchedulesScheduleIdBroadcastsStaticImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsStaticImageDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * ライブ配信中にふた絵（静止画）を表示します。
     * ライブ配信のふた絵を有効化
     */
    async v1SchedulesScheduleIdBroadcastsStaticImagePostRaw(requestParameters: V1SchedulesScheduleIdBroadcastsStaticImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsStaticImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts/static-image`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信中にふた絵（静止画）を表示します。
     * ライブ配信のふた絵を有効化
     */
    async v1SchedulesScheduleIdBroadcastsStaticImagePost(requestParameters: V1SchedulesScheduleIdBroadcastsStaticImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdBroadcastsStaticImagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Youtube配信用の認証URLを取得します。
     * マルシェライブ配信のYoutube連携を認証
     */
    async v1SchedulesScheduleIdBroadcastsYoutubeAuthPostRaw(requestParameters: V1SchedulesScheduleIdBroadcastsYoutubeAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthYoutubeBroadcastResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdBroadcastsYoutubeAuthPost().'
            );
        }

        if (requestParameters['authYoutubeBroadcastRequest'] == null) {
            throw new runtime.RequiredError(
                'authYoutubeBroadcastRequest',
                'Required parameter "authYoutubeBroadcastRequest" was null or undefined when calling v1SchedulesScheduleIdBroadcastsYoutubeAuthPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/broadcasts/youtube/auth`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthYoutubeBroadcastRequestToJSON(requestParameters['authYoutubeBroadcastRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthYoutubeBroadcastResponseFromJSON(jsonValue));
    }

    /**
     * Youtube配信用の認証URLを取得します。
     * マルシェライブ配信のYoutube連携を認証
     */
    async v1SchedulesScheduleIdBroadcastsYoutubeAuthPost(requestParameters: V1SchedulesScheduleIdBroadcastsYoutubeAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthYoutubeBroadcastResponse> {
        const response = await this.v1SchedulesScheduleIdBroadcastsYoutubeAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
