/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSpotTypeRequest,
  ErrorResponse,
  SpotTypeResponse,
  SpotTypesResponse,
  UpdateSpotTypeRequest,
} from '../models/index';
import {
    CreateSpotTypeRequestFromJSON,
    CreateSpotTypeRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SpotTypeResponseFromJSON,
    SpotTypeResponseToJSON,
    SpotTypesResponseFromJSON,
    SpotTypesResponseToJSON,
    UpdateSpotTypeRequestFromJSON,
    UpdateSpotTypeRequestToJSON,
} from '../models/index';

export interface V1SpotTypesGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
}

export interface V1SpotTypesPostRequest {
    createSpotTypeRequest: CreateSpotTypeRequest;
}

export interface V1SpotTypesSpotTypeIdDeleteRequest {
    spotTypeId: string;
}

export interface V1SpotTypesSpotTypeIdPatchRequest {
    spotTypeId: string;
    updateSpotTypeRequest: UpdateSpotTypeRequest;
}

/**
 * 
 */
export class SpotTypeApi extends runtime.BaseAPI {

    /**
     * スポットタイプの一覧を取得します。名前でのフィルタリングが可能です。
     * スポットタイプ一覧取得
     */
    async v1SpotTypesGetRaw(requestParameters: V1SpotTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spot-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotTypesResponseFromJSON(jsonValue));
    }

    /**
     * スポットタイプの一覧を取得します。名前でのフィルタリングが可能です。
     * スポットタイプ一覧取得
     */
    async v1SpotTypesGet(requestParameters: V1SpotTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotTypesResponse> {
        const response = await this.v1SpotTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいスポットタイプを登録します。
     * スポットタイプ登録
     */
    async v1SpotTypesPostRaw(requestParameters: V1SpotTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpotTypeResponse>> {
        if (requestParameters['createSpotTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'createSpotTypeRequest',
                'Required parameter "createSpotTypeRequest" was null or undefined when calling v1SpotTypesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spot-types`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSpotTypeRequestToJSON(requestParameters['createSpotTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotTypeResponseFromJSON(jsonValue));
    }

    /**
     * 新しいスポットタイプを登録します。
     * スポットタイプ登録
     */
    async v1SpotTypesPost(requestParameters: V1SpotTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpotTypeResponse> {
        const response = await this.v1SpotTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スポットタイプを削除します。
     * スポットタイプ削除
     */
    async v1SpotTypesSpotTypeIdDeleteRaw(requestParameters: V1SpotTypesSpotTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotTypeId'] == null) {
            throw new runtime.RequiredError(
                'spotTypeId',
                'Required parameter "spotTypeId" was null or undefined when calling v1SpotTypesSpotTypeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spot-types/{spotTypeId}`;
        urlPath = urlPath.replace(`{${"spotTypeId"}}`, encodeURIComponent(String(requestParameters['spotTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スポットタイプを削除します。
     * スポットタイプ削除
     */
    async v1SpotTypesSpotTypeIdDelete(requestParameters: V1SpotTypesSpotTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SpotTypesSpotTypeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * スポットタイプの情報を更新します。
     * スポットタイプ更新
     */
    async v1SpotTypesSpotTypeIdPatchRaw(requestParameters: V1SpotTypesSpotTypeIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spotTypeId'] == null) {
            throw new runtime.RequiredError(
                'spotTypeId',
                'Required parameter "spotTypeId" was null or undefined when calling v1SpotTypesSpotTypeIdPatch().'
            );
        }

        if (requestParameters['updateSpotTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSpotTypeRequest',
                'Required parameter "updateSpotTypeRequest" was null or undefined when calling v1SpotTypesSpotTypeIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/spot-types/{spotTypeId}`;
        urlPath = urlPath.replace(`{${"spotTypeId"}}`, encodeURIComponent(String(requestParameters['spotTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSpotTypeRequestToJSON(requestParameters['updateSpotTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スポットタイプの情報を更新します。
     * スポットタイプ更新
     */
    async v1SpotTypesSpotTypeIdPatch(requestParameters: V1SpotTypesSpotTypeIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SpotTypesSpotTypeIdPatchRaw(requestParameters, initOverrides);
    }

}
