/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNotificationRequest,
  ErrorResponse,
  NotificationResponse,
  NotificationsResponse,
  UpdateNotificationRequest,
} from '../models/index';
import {
    CreateNotificationRequestFromJSON,
    CreateNotificationRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NotificationResponseFromJSON,
    NotificationResponseToJSON,
    NotificationsResponseFromJSON,
    NotificationsResponseToJSON,
    UpdateNotificationRequestFromJSON,
    UpdateNotificationRequestToJSON,
} from '../models/index';

export interface V1NotificationsGetRequest {
    limit?: number;
    offset?: number;
    since?: number;
    until?: number;
    orders?: string;
}

export interface V1NotificationsNotificationIdDeleteRequest {
    notificationId: string;
}

export interface V1NotificationsNotificationIdGetRequest {
    notificationId: string;
}

export interface V1NotificationsNotificationIdPatchRequest {
    notificationId: string;
    updateNotificationRequest: UpdateNotificationRequest;
}

export interface V1NotificationsPostRequest {
    createNotificationRequest: CreateNotificationRequest;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     * 通知の一覧を取得します。期間や配信日時でのフィルタリング、ソート順指定が可能です。
     * 通知一覧取得
     */
    async v1NotificationsGetRaw(requestParameters: V1NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/notifications`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsResponseFromJSON(jsonValue));
    }

    /**
     * 通知の一覧を取得します。期間や配信日時でのフィルタリング、ソート順指定が可能です。
     * 通知一覧取得
     */
    async v1NotificationsGet(requestParameters: V1NotificationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsResponse> {
        const response = await this.v1NotificationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通知を削除します。
     * 通知削除
     */
    async v1NotificationsNotificationIdDeleteRaw(requestParameters: V1NotificationsNotificationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling v1NotificationsNotificationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/notifications/{notificationId}`;
        urlPath = urlPath.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 通知を削除します。
     * 通知削除
     */
    async v1NotificationsNotificationIdDelete(requestParameters: V1NotificationsNotificationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1NotificationsNotificationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された通知の詳細情報を取得します。
     * 通知取得
     */
    async v1NotificationsNotificationIdGetRaw(requestParameters: V1NotificationsNotificationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling v1NotificationsNotificationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/notifications/{notificationId}`;
        urlPath = urlPath.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     * 指定された通知の詳細情報を取得します。
     * 通知取得
     */
    async v1NotificationsNotificationIdGet(requestParameters: V1NotificationsNotificationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationResponse> {
        const response = await this.v1NotificationsNotificationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通知の情報を更新します。
     * 通知更新
     */
    async v1NotificationsNotificationIdPatchRaw(requestParameters: V1NotificationsNotificationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling v1NotificationsNotificationIdPatch().'
            );
        }

        if (requestParameters['updateNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNotificationRequest',
                'Required parameter "updateNotificationRequest" was null or undefined when calling v1NotificationsNotificationIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/notifications/{notificationId}`;
        urlPath = urlPath.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNotificationRequestToJSON(requestParameters['updateNotificationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 通知の情報を更新します。
     * 通知更新
     */
    async v1NotificationsNotificationIdPatch(requestParameters: V1NotificationsNotificationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1NotificationsNotificationIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 新しい通知を登録します。配信対象、配信日時などを指定できます。
     * 通知登録
     */
    async v1NotificationsPostRaw(requestParameters: V1NotificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters['createNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'createNotificationRequest',
                'Required parameter "createNotificationRequest" was null or undefined when calling v1NotificationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/notifications`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNotificationRequestToJSON(requestParameters['createNotificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     * 新しい通知を登録します。配信対象、配信日時などを指定できます。
     * 通知登録
     */
    async v1NotificationsPost(requestParameters: V1NotificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationResponse> {
        const response = await this.v1NotificationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
