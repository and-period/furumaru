/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyzeScheduleResponse,
  ApproveScheduleRequest,
  CreateScheduleRequest,
  ErrorResponse,
  PublishScheduleRequest,
  ScheduleResponse,
  SchedulesResponse,
  UpdateScheduleRequest,
} from '../models/index';
import {
    AnalyzeScheduleResponseFromJSON,
    AnalyzeScheduleResponseToJSON,
    ApproveScheduleRequestFromJSON,
    ApproveScheduleRequestToJSON,
    CreateScheduleRequestFromJSON,
    CreateScheduleRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PublishScheduleRequestFromJSON,
    PublishScheduleRequestToJSON,
    ScheduleResponseFromJSON,
    ScheduleResponseToJSON,
    SchedulesResponseFromJSON,
    SchedulesResponseToJSON,
    UpdateScheduleRequestFromJSON,
    UpdateScheduleRequestToJSON,
} from '../models/index';

export interface V1SchedulesGetRequest {
    limit?: number;
    offset?: number;
}

export interface V1SchedulesPostRequest {
    createScheduleRequest: CreateScheduleRequest;
}

export interface V1SchedulesScheduleIdAnalyticsGetRequest {
    scheduleId: string;
    startAt?: number;
    endAt?: number;
    viewerLogInterval?: string;
}

export interface V1SchedulesScheduleIdApprovalPatchRequest {
    scheduleId: string;
    approveScheduleRequest: ApproveScheduleRequest;
}

export interface V1SchedulesScheduleIdDeleteRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdGetRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdPatchRequest {
    scheduleId: string;
    updateScheduleRequest: UpdateScheduleRequest;
}

export interface V1SchedulesScheduleIdPublishPatchRequest {
    scheduleId: string;
    publishScheduleRequest: PublishScheduleRequest;
}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     * マルシェ開催スケジュールの一覧を取得します。ページネーションに対応しています。
     * マルシェ開催スケジュール一覧取得
     */
    async v1SchedulesGetRaw(requestParameters: V1SchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchedulesResponseFromJSON(jsonValue));
    }

    /**
     * マルシェ開催スケジュールの一覧を取得します。ページネーションに対応しています。
     * マルシェ開催スケジュール一覧取得
     */
    async v1SchedulesGet(requestParameters: V1SchedulesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesResponse> {
        const response = await this.v1SchedulesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいマルシェ開催スケジュールを登録します。
     * マルシェ開催スケジュール登録
     */
    async v1SchedulesPostRaw(requestParameters: V1SchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters['createScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'createScheduleRequest',
                'Required parameter "createScheduleRequest" was null or undefined when calling v1SchedulesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScheduleRequestToJSON(requestParameters['createScheduleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * 新しいマルシェ開催スケジュールを登録します。
     * マルシェ開催スケジュール登録
     */
    async v1SchedulesPost(requestParameters: V1SchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleResponse> {
        const response = await this.v1SchedulesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたマルシェ開催スケジュールの視聴者分析データを取得します。集計期間と集計間隔を指定できます。
     * マルシェ分析情報取得
     */
    async v1SchedulesScheduleIdAnalyticsGetRaw(requestParameters: V1SchedulesScheduleIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyzeScheduleResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = requestParameters['endAt'];
        }

        if (requestParameters['viewerLogInterval'] != null) {
            queryParameters['viewerLogInterval'] = requestParameters['viewerLogInterval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/analytics`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyzeScheduleResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたマルシェ開催スケジュールの視聴者分析データを取得します。集計期間と集計間隔を指定できます。
     * マルシェ分析情報取得
     */
    async v1SchedulesScheduleIdAnalyticsGet(requestParameters: V1SchedulesScheduleIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyzeScheduleResponse> {
        const response = await this.v1SchedulesScheduleIdAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * マルシェ開催スケジュールの承認状態を更新します。
     * マルシェ開催スケジュール承認
     */
    async v1SchedulesScheduleIdApprovalPatchRaw(requestParameters: V1SchedulesScheduleIdApprovalPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdApprovalPatch().'
            );
        }

        if (requestParameters['approveScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'approveScheduleRequest',
                'Required parameter "approveScheduleRequest" was null or undefined when calling v1SchedulesScheduleIdApprovalPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/approval`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveScheduleRequestToJSON(requestParameters['approveScheduleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * マルシェ開催スケジュールの承認状態を更新します。
     * マルシェ開催スケジュール承認
     */
    async v1SchedulesScheduleIdApprovalPatch(requestParameters: V1SchedulesScheduleIdApprovalPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdApprovalPatchRaw(requestParameters, initOverrides);
    }

    /**
     * マルシェ開催スケジュールを削除します。
     * マルシェ開催スケジュール削除
     */
    async v1SchedulesScheduleIdDeleteRaw(requestParameters: V1SchedulesScheduleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * マルシェ開催スケジュールを削除します。
     * マルシェ開催スケジュール削除
     */
    async v1SchedulesScheduleIdDelete(requestParameters: V1SchedulesScheduleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたマルシェ開催スケジュールの詳細情報を取得します。
     * マルシェ開催スケジュール取得
     */
    async v1SchedulesScheduleIdGetRaw(requestParameters: V1SchedulesScheduleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたマルシェ開催スケジュールの詳細情報を取得します。
     * マルシェ開催スケジュール取得
     */
    async v1SchedulesScheduleIdGet(requestParameters: V1SchedulesScheduleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleResponse> {
        const response = await this.v1SchedulesScheduleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * マルシェ開催スケジュールの情報を更新します。
     * マルシェ開催スケジュール更新
     */
    async v1SchedulesScheduleIdPatchRaw(requestParameters: V1SchedulesScheduleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdPatch().'
            );
        }

        if (requestParameters['updateScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'updateScheduleRequest',
                'Required parameter "updateScheduleRequest" was null or undefined when calling v1SchedulesScheduleIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduleRequestToJSON(requestParameters['updateScheduleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * マルシェ開催スケジュールの情報を更新します。
     * マルシェ開催スケジュール更新
     */
    async v1SchedulesScheduleIdPatch(requestParameters: V1SchedulesScheduleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * マルシェ開催スケジュールの公開状態を更新します。
     * マルシェ開催スケジュール公開
     */
    async v1SchedulesScheduleIdPublishPatchRaw(requestParameters: V1SchedulesScheduleIdPublishPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdPublishPatch().'
            );
        }

        if (requestParameters['publishScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'publishScheduleRequest',
                'Required parameter "publishScheduleRequest" was null or undefined when calling v1SchedulesScheduleIdPublishPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/publish`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublishScheduleRequestToJSON(requestParameters['publishScheduleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * マルシェ開催スケジュールの公開状態を更新します。
     * マルシェ開催スケジュール公開
     */
    async v1SchedulesScheduleIdPublishPatch(requestParameters: V1SchedulesScheduleIdPublishPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdPublishPatchRaw(requestParameters, initOverrides);
    }

}
