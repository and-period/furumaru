/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthGoogleAccountResponse,
  AuthLINEAccountResponse,
  AuthProvidersResponse,
  AuthResponse,
  AuthUserResponse,
  ConnectGoogleAccountRequest,
  ConnectLINEAccountRequest,
  CoordinatorResponse,
  ErrorResponse,
  ForgotAuthPasswordRequest,
  RefreshAuthTokenRequest,
  RegisterAuthDeviceRequest,
  ResetAuthPasswordRequest,
  SignInRequest,
  UpdateAuthEmailRequest,
  UpdateAuthPasswordRequest,
  UpdateCoordinatorRequest,
  VerifyAuthEmailRequest,
} from '../models/index';
import {
    AuthGoogleAccountResponseFromJSON,
    AuthGoogleAccountResponseToJSON,
    AuthLINEAccountResponseFromJSON,
    AuthLINEAccountResponseToJSON,
    AuthProvidersResponseFromJSON,
    AuthProvidersResponseToJSON,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    AuthUserResponseFromJSON,
    AuthUserResponseToJSON,
    ConnectGoogleAccountRequestFromJSON,
    ConnectGoogleAccountRequestToJSON,
    ConnectLINEAccountRequestFromJSON,
    ConnectLINEAccountRequestToJSON,
    CoordinatorResponseFromJSON,
    CoordinatorResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ForgotAuthPasswordRequestFromJSON,
    ForgotAuthPasswordRequestToJSON,
    RefreshAuthTokenRequestFromJSON,
    RefreshAuthTokenRequestToJSON,
    RegisterAuthDeviceRequestFromJSON,
    RegisterAuthDeviceRequestToJSON,
    ResetAuthPasswordRequestFromJSON,
    ResetAuthPasswordRequestToJSON,
    SignInRequestFromJSON,
    SignInRequestToJSON,
    UpdateAuthEmailRequestFromJSON,
    UpdateAuthEmailRequestToJSON,
    UpdateAuthPasswordRequestFromJSON,
    UpdateAuthPasswordRequestToJSON,
    UpdateCoordinatorRequestFromJSON,
    UpdateCoordinatorRequestToJSON,
    VerifyAuthEmailRequestFromJSON,
    VerifyAuthEmailRequestToJSON,
} from '../models/index';

export interface V1AuthCoordinatorPatchRequest {
    updateCoordinatorRequest: UpdateCoordinatorRequest;
}

export interface V1AuthDevicePostRequest {
    registerAuthDeviceRequest: RegisterAuthDeviceRequest;
}

export interface V1AuthEmailPatchRequest {
    updateAuthEmailRequest: UpdateAuthEmailRequest;
}

export interface V1AuthEmailVerifiedPostRequest {
    verifyAuthEmailRequest: VerifyAuthEmailRequest;
}

export interface V1AuthForgotPasswordPostRequest {
    forgotAuthPasswordRequest: ForgotAuthPasswordRequest;
}

export interface V1AuthForgotPasswordVerifiedPostRequest {
    resetAuthPasswordRequest: ResetAuthPasswordRequest;
}

export interface V1AuthGoogleGetRequest {
    state: string;
    redirectUri?: string;
}

export interface V1AuthGooglePostRequest {
    connectGoogleAccountRequest: ConnectGoogleAccountRequest;
}

export interface V1AuthLineGetRequest {
    state: string;
    redirectUri?: string;
}

export interface V1AuthLinePostRequest {
    connectLINEAccountRequest: ConnectLINEAccountRequest;
}

export interface V1AuthPasswordPatchRequest {
    updateAuthPasswordRequest: UpdateAuthPasswordRequest;
}

export interface V1AuthPostRequest {
    signInRequest: SignInRequest;
}

export interface V1AuthRefreshTokenPostRequest {
    refreshAuthTokenRequest: RefreshAuthTokenRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * ログイン中のコーディネータの詳細情報を取得します。
     * 自身のコーディネータ情報取得
     */
    async v1AuthCoordinatorGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/coordinator`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatorResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中のコーディネータの詳細情報を取得します。
     * 自身のコーディネータ情報取得
     */
    async v1AuthCoordinatorGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatorResponse> {
        const response = await this.v1AuthCoordinatorGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * ログイン中のコーディネータの情報を更新します。
     * 自身のコーディネータ情報更新
     */
    async v1AuthCoordinatorPatchRaw(requestParameters: V1AuthCoordinatorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateCoordinatorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCoordinatorRequest',
                'Required parameter "updateCoordinatorRequest" was null or undefined when calling v1AuthCoordinatorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/coordinator`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCoordinatorRequestToJSON(requestParameters['updateCoordinatorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログイン中のコーディネータの情報を更新します。
     * 自身のコーディネータ情報更新
     */
    async v1AuthCoordinatorPatch(requestParameters: V1AuthCoordinatorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthCoordinatorPatchRaw(requestParameters, initOverrides);
    }

    /**
     * サインアウトします。
     * サインアウト
     */
    async v1AuthDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * サインアウトします。
     * サインアウト
     */
    async v1AuthDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthDeleteRaw(initOverrides);
    }

    /**
     * プッシュ通知用のデバイストークンを登録します。
     * デバイストークン登録
     */
    async v1AuthDevicePostRaw(requestParameters: V1AuthDevicePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registerAuthDeviceRequest'] == null) {
            throw new runtime.RequiredError(
                'registerAuthDeviceRequest',
                'Required parameter "registerAuthDeviceRequest" was null or undefined when calling v1AuthDevicePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/device`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterAuthDeviceRequestToJSON(requestParameters['registerAuthDeviceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * プッシュ通知用のデバイストークンを登録します。
     * デバイストークン登録
     */
    async v1AuthDevicePost(requestParameters: V1AuthDevicePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthDevicePostRaw(requestParameters, initOverrides);
    }

    /**
     * ログイン中のユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async v1AuthEmailPatchRaw(requestParameters: V1AuthEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthEmailRequest',
                'Required parameter "updateAuthEmailRequest" was null or undefined when calling v1AuthEmailPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/email`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthEmailRequestToJSON(requestParameters['updateAuthEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログイン中のユーザーのメールアドレスを更新します。
     * メールアドレス更新
     */
    async v1AuthEmailPatch(requestParameters: V1AuthEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthEmailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新用の検証コードを確認します。
     * メールアドレス更新 - コード検証
     */
    async v1AuthEmailVerifiedPostRaw(requestParameters: V1AuthEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyAuthEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyAuthEmailRequest',
                'Required parameter "verifyAuthEmailRequest" was null or undefined when calling v1AuthEmailVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/auth/email/verified`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyAuthEmailRequestToJSON(requestParameters['verifyAuthEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新用の検証コードを確認します。
     * メールアドレス更新 - コード検証
     */
    async v1AuthEmailVerifiedPost(requestParameters: V1AuthEmailVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthEmailVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * パスワードリセット用のメールを送信します。
     * パスワードリセット
     */
    async v1AuthForgotPasswordPostRaw(requestParameters: V1AuthForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forgotAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'forgotAuthPasswordRequest',
                'Required parameter "forgotAuthPasswordRequest" was null or undefined when calling v1AuthForgotPasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/auth/forgot-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotAuthPasswordRequestToJSON(requestParameters['forgotAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワードリセット用のメールを送信します。
     * パスワードリセット
     */
    async v1AuthForgotPasswordPost(requestParameters: V1AuthForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthForgotPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     * パスワードリセット用の検証コードを確認し、新しいパスワードを設定します。
     * パスワードリセット - コード検証
     */
    async v1AuthForgotPasswordVerifiedPostRaw(requestParameters: V1AuthForgotPasswordVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'resetAuthPasswordRequest',
                'Required parameter "resetAuthPasswordRequest" was null or undefined when calling v1AuthForgotPasswordVerifiedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/auth/forgot-password/verified`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetAuthPasswordRequestToJSON(requestParameters['resetAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワードリセット用の検証コードを確認し、新しいパスワードを設定します。
     * パスワードリセット - コード検証
     */
    async v1AuthForgotPasswordVerifiedPost(requestParameters: V1AuthForgotPasswordVerifiedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthForgotPasswordVerifiedPostRaw(requestParameters, initOverrides);
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * トークン検証
     */
    async v1AuthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * 認証トークンを検証し、認証情報を取得します。
     * トークン検証
     */
    async v1AuthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.v1AuthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Googleアカウント連携用の認証URLを発行します。
     * Google認証用URLの発行
     */
    async v1AuthGoogleGetRaw(requestParameters: V1AuthGoogleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGoogleAccountResponse>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling v1AuthGoogleGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirectUri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/google`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGoogleAccountResponseFromJSON(jsonValue));
    }

    /**
     * Googleアカウント連携用の認証URLを発行します。
     * Google認証用URLの発行
     */
    async v1AuthGoogleGet(requestParameters: V1AuthGoogleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGoogleAccountResponse> {
        const response = await this.v1AuthGoogleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Googleアカウントを連携します。
     * Googleアカウントの連携
     */
    async v1AuthGooglePostRaw(requestParameters: V1AuthGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['connectGoogleAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'connectGoogleAccountRequest',
                'Required parameter "connectGoogleAccountRequest" was null or undefined when calling v1AuthGooglePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/google`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectGoogleAccountRequestToJSON(requestParameters['connectGoogleAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Googleアカウントを連携します。
     * Googleアカウントの連携
     */
    async v1AuthGooglePost(requestParameters: V1AuthGooglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.v1AuthGooglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINEアカウント連携用の認証URLを発行します。
     * LINE認証用URLの発行
     */
    async v1AuthLineGetRaw(requestParameters: V1AuthLineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLINEAccountResponse>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling v1AuthLineGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirectUri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/line`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLINEAccountResponseFromJSON(jsonValue));
    }

    /**
     * LINEアカウント連携用の認証URLを発行します。
     * LINE認証用URLの発行
     */
    async v1AuthLineGet(requestParameters: V1AuthLineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLINEAccountResponse> {
        const response = await this.v1AuthLineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LINEアカウントを連携します。
     * LINEアカウントの連携
     */
    async v1AuthLinePostRaw(requestParameters: V1AuthLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['connectLINEAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'connectLINEAccountRequest',
                'Required parameter "connectLINEAccountRequest" was null or undefined when calling v1AuthLinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/line`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectLINEAccountRequestToJSON(requestParameters['connectLINEAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * LINEアカウントを連携します。
     * LINEアカウントの連携
     */
    async v1AuthLinePost(requestParameters: V1AuthLinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.v1AuthLinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログイン中のユーザーのパスワードを更新します。
     * パスワード更新
     */
    async v1AuthPasswordPatchRaw(requestParameters: V1AuthPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAuthPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAuthPasswordRequest',
                'Required parameter "updateAuthPasswordRequest" was null or undefined when calling v1AuthPasswordPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/password`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthPasswordRequestToJSON(requestParameters['updateAuthPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログイン中のユーザーのパスワードを更新します。
     * パスワード更新
     */
    async v1AuthPasswordPatch(requestParameters: V1AuthPasswordPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AuthPasswordPatchRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレスとパスワードでサインインします。
     * サインイン
     */
    async v1AuthPostRaw(requestParameters: V1AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['signInRequest'] == null) {
            throw new runtime.RequiredError(
                'signInRequest',
                'Required parameter "signInRequest" was null or undefined when calling v1AuthPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestToJSON(requestParameters['signInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * メールアドレスとパスワードでサインインします。
     * サインイン
     */
    async v1AuthPost(requestParameters: V1AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.v1AuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 連携済みの外部認証プロバイダ一覧を取得します。
     * 認証済みプロバイダ一覧の取得
     */
    async v1AuthProvidersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthProvidersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthProvidersResponseFromJSON(jsonValue));
    }

    /**
     * 連携済みの外部認証プロバイダ一覧を取得します。
     * 認証済みプロバイダ一覧の取得
     */
    async v1AuthProvidersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthProvidersResponse> {
        const response = await this.v1AuthProvidersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * トークン更新
     */
    async v1AuthRefreshTokenPostRaw(requestParameters: V1AuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['refreshAuthTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshAuthTokenRequest',
                'Required parameter "refreshAuthTokenRequest" was null or undefined when calling v1AuthRefreshTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/auth/refresh-token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshAuthTokenRequestToJSON(requestParameters['refreshAuthTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * リフレッシュトークンを使用してアクセストークンを更新します。
     * トークン更新
     */
    async v1AuthRefreshTokenPost(requestParameters: V1AuthRefreshTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.v1AuthRefreshTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログイン中の管理者情報を取得します。
     * 管理者情報取得
     */
    async v1AuthUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/auth/user`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserResponseFromJSON(jsonValue));
    }

    /**
     * ログイン中の管理者情報を取得します。
     * 管理者情報取得
     */
    async v1AuthUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUserResponse> {
        const response = await this.v1AuthUserGetRaw(initOverrides);
        return await response.value();
    }

}
