/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProducerRequest,
  ErrorResponse,
  ProducerResponse,
  ProducersResponse,
  UpdateProducerRequest,
} from '../models/index';
import {
    CreateProducerRequestFromJSON,
    CreateProducerRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProducerResponseFromJSON,
    ProducerResponseToJSON,
    ProducersResponseFromJSON,
    ProducersResponseToJSON,
    UpdateProducerRequestFromJSON,
    UpdateProducerRequestToJSON,
} from '../models/index';

export interface V1ProducersGetRequest {
    limit?: number;
    offset?: number;
    username?: string;
}

export interface V1ProducersPostRequest {
    createProducerRequest: CreateProducerRequest;
}

export interface V1ProducersProducerIdDeleteRequest {
    producerId: string;
}

export interface V1ProducersProducerIdGetRequest {
    producerId: string;
}

export interface V1ProducersProducerIdPatchRequest {
    producerId: string;
    updateProducerRequest: UpdateProducerRequest;
}

/**
 * 
 */
export class ProducerApi extends runtime.BaseAPI {

    /**
     * 生産者の一覧を取得します。コーディネーターは管理店舗の生産者のみ取得可能です。
     * 生産者一覧取得
     */
    async v1ProducersGetRaw(requestParameters: V1ProducersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProducersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/producers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducersResponseFromJSON(jsonValue));
    }

    /**
     * 生産者の一覧を取得します。コーディネーターは管理店舗の生産者のみ取得可能です。
     * 生産者一覧取得
     */
    async v1ProducersGet(requestParameters: V1ProducersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProducersResponse> {
        const response = await this.v1ProducersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい生産者を登録します。コーディネーターは自身が管理する店舗の生産者のみ登録可能です。
     * 生産者登録
     */
    async v1ProducersPostRaw(requestParameters: V1ProducersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProducerResponse>> {
        if (requestParameters['createProducerRequest'] == null) {
            throw new runtime.RequiredError(
                'createProducerRequest',
                'Required parameter "createProducerRequest" was null or undefined when calling v1ProducersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/producers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProducerRequestToJSON(requestParameters['createProducerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducerResponseFromJSON(jsonValue));
    }

    /**
     * 新しい生産者を登録します。コーディネーターは自身が管理する店舗の生産者のみ登録可能です。
     * 生産者登録
     */
    async v1ProducersPost(requestParameters: V1ProducersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProducerResponse> {
        const response = await this.v1ProducersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者を削除します。
     * 生産者削除
     */
    async v1ProducersProducerIdDeleteRaw(requestParameters: V1ProducersProducerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['producerId'] == null) {
            throw new runtime.RequiredError(
                'producerId',
                'Required parameter "producerId" was null or undefined when calling v1ProducersProducerIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/producers/{producerId}`;
        urlPath = urlPath.replace(`{${"producerId"}}`, encodeURIComponent(String(requestParameters['producerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 生産者を削除します。
     * 生産者削除
     */
    async v1ProducersProducerIdDelete(requestParameters: V1ProducersProducerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ProducersProducerIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された生産者の詳細情報を取得します。
     * 生産者取得
     */
    async v1ProducersProducerIdGetRaw(requestParameters: V1ProducersProducerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProducerResponse>> {
        if (requestParameters['producerId'] == null) {
            throw new runtime.RequiredError(
                'producerId',
                'Required parameter "producerId" was null or undefined when calling v1ProducersProducerIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/producers/{producerId}`;
        urlPath = urlPath.replace(`{${"producerId"}}`, encodeURIComponent(String(requestParameters['producerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducerResponseFromJSON(jsonValue));
    }

    /**
     * 指定された生産者の詳細情報を取得します。
     * 生産者取得
     */
    async v1ProducersProducerIdGet(requestParameters: V1ProducersProducerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProducerResponse> {
        const response = await this.v1ProducersProducerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者の情報を更新します。
     * 生産者更新
     */
    async v1ProducersProducerIdPatchRaw(requestParameters: V1ProducersProducerIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['producerId'] == null) {
            throw new runtime.RequiredError(
                'producerId',
                'Required parameter "producerId" was null or undefined when calling v1ProducersProducerIdPatch().'
            );
        }

        if (requestParameters['updateProducerRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProducerRequest',
                'Required parameter "updateProducerRequest" was null or undefined when calling v1ProducersProducerIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/producers/{producerId}`;
        urlPath = urlPath.replace(`{${"producerId"}}`, encodeURIComponent(String(requestParameters['producerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProducerRequestToJSON(requestParameters['updateProducerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 生産者の情報を更新します。
     * 生産者更新
     */
    async v1ProducersProducerIdPatch(requestParameters: V1ProducersProducerIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ProducersProducerIdPatchRaw(requestParameters, initOverrides);
    }

}
