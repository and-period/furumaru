/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  MessageResponse,
  MessagesResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
    MessagesResponseFromJSON,
    MessagesResponseToJSON,
} from '../models/index';

export interface V1MessagesGetRequest {
    limit?: number;
    offset?: number;
    orders?: string;
}

export interface V1MessagesMessageIdGetRequest {
    messageId: string;
}

/**
 * 
 */
export class MessageApi extends runtime.BaseAPI {

    /**
     * 管理者あてのメッセージ一覧を取得します。ソート順指定が可能です。
     * メッセージ一覧取得
     */
    async v1MessagesGetRaw(requestParameters: V1MessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/messages`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesResponseFromJSON(jsonValue));
    }

    /**
     * 管理者あてのメッセージ一覧を取得します。ソート順指定が可能です。
     * メッセージ一覧取得
     */
    async v1MessagesGet(requestParameters: V1MessagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesResponse> {
        const response = await this.v1MessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたメッセージの詳細情報を取得します。
     * メッセージ取得
     */
    async v1MessagesMessageIdGetRaw(requestParameters: V1MessagesMessageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling v1MessagesMessageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/messages/{messageId}`;
        urlPath = urlPath.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたメッセージの詳細情報を取得します。
     * メッセージ取得
     */
    async v1MessagesMessageIdGet(requestParameters: V1MessagesMessageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.v1MessagesMessageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
