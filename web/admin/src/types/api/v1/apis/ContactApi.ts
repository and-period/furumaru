/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactResponse,
  ContactsResponse,
  CreateContactRequest,
  ErrorResponse,
  UpdateContactRequest,
} from '../models/index';
import {
    ContactResponseFromJSON,
    ContactResponseToJSON,
    ContactsResponseFromJSON,
    ContactsResponseToJSON,
    CreateContactRequestFromJSON,
    CreateContactRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateContactRequestFromJSON,
    UpdateContactRequestToJSON,
} from '../models/index';

export interface V1ContactsContactIdDeleteRequest {
    contactId: string;
}

export interface V1ContactsContactIdGetRequest {
    contactId: string;
}

export interface V1ContactsContactIdPatchRequest {
    contactId: string;
    updateContactRequest: UpdateContactRequest;
}

export interface V1ContactsGetRequest {
    limit?: number;
    offset?: number;
}

export interface V1ContactsPostRequest {
    createContactRequest: CreateContactRequest;
}

/**
 * 
 */
export class ContactApi extends runtime.BaseAPI {

    /**
     * お問い合わせを削除します。
     * お問い合わせ削除
     */
    async v1ContactsContactIdDeleteRaw(requestParameters: V1ContactsContactIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * お問い合わせを削除します。
     * お問い合わせ削除
     */
    async v1ContactsContactIdDelete(requestParameters: V1ContactsContactIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ContactsContactIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたお問い合わせの詳細情報を取得します。
     * お問い合わせ取得
     */
    async v1ContactsContactIdGetRaw(requestParameters: V1ContactsContactIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactResponse>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたお問い合わせの詳細情報を取得します。
     * お問い合わせ取得
     */
    async v1ContactsContactIdGet(requestParameters: V1ContactsContactIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactResponse> {
        const response = await this.v1ContactsContactIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お問い合わせの情報を更新します。
     * お問い合わせ更新
     */
    async v1ContactsContactIdPatchRaw(requestParameters: V1ContactsContactIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling v1ContactsContactIdPatch().'
            );
        }

        if (requestParameters['updateContactRequest'] == null) {
            throw new runtime.RequiredError(
                'updateContactRequest',
                'Required parameter "updateContactRequest" was null or undefined when calling v1ContactsContactIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts/{contactId}`;
        urlPath = urlPath.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateContactRequestToJSON(requestParameters['updateContactRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * お問い合わせの情報を更新します。
     * お問い合わせ更新
     */
    async v1ContactsContactIdPatch(requestParameters: V1ContactsContactIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ContactsContactIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * お問い合わせの一覧を取得します。
     * お問い合わせ一覧取得
     */
    async v1ContactsGetRaw(requestParameters: V1ContactsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsResponseFromJSON(jsonValue));
    }

    /**
     * お問い合わせの一覧を取得します。
     * お問い合わせ一覧取得
     */
    async v1ContactsGet(requestParameters: V1ContactsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactsResponse> {
        const response = await this.v1ContactsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいお問い合わせを登録します。
     * お問い合わせ登録
     */
    async v1ContactsPostRaw(requestParameters: V1ContactsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactResponse>> {
        if (requestParameters['createContactRequest'] == null) {
            throw new runtime.RequiredError(
                'createContactRequest',
                'Required parameter "createContactRequest" was null or undefined when calling v1ContactsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contacts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContactRequestToJSON(requestParameters['createContactRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactResponseFromJSON(jsonValue));
    }

    /**
     * 新しいお問い合わせを登録します。
     * お問い合わせ登録
     */
    async v1ContactsPost(requestParameters: V1ContactsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactResponse> {
        const response = await this.v1ContactsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
