/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoriesResponse,
  CategoryResponse,
  CreateCategoryRequest,
  ErrorResponse,
  UpdateCategoryRequest,
} from '../models/index';
import {
    CategoriesResponseFromJSON,
    CategoriesResponseToJSON,
    CategoryResponseFromJSON,
    CategoryResponseToJSON,
    CreateCategoryRequestFromJSON,
    CreateCategoryRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateCategoryRequestFromJSON,
    UpdateCategoryRequestToJSON,
} from '../models/index';

export interface V1CategoriesCategoryIdDeleteRequest {
    categoryId: string;
}

export interface V1CategoriesCategoryIdPatchRequest {
    categoryId: string;
    updateCategoryRequest: UpdateCategoryRequest;
}

export interface V1CategoriesGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
    orders?: string;
}

export interface V1CategoriesPostRequest {
    createCategoryRequest: CreateCategoryRequest;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     * 商品種別を削除します。
     * 商品種別削除
     */
    async v1CategoriesCategoryIdDeleteRaw(requestParameters: V1CategoriesCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling v1CategoriesCategoryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories/{categoryId}`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品種別を削除します。
     * 商品種別削除
     */
    async v1CategoriesCategoryIdDelete(requestParameters: V1CategoriesCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CategoriesCategoryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 商品種別の情報を更新します。
     * 商品種別更新
     */
    async v1CategoriesCategoryIdPatchRaw(requestParameters: V1CategoriesCategoryIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling v1CategoriesCategoryIdPatch().'
            );
        }

        if (requestParameters['updateCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCategoryRequest',
                'Required parameter "updateCategoryRequest" was null or undefined when calling v1CategoriesCategoryIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories/{categoryId}`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCategoryRequestToJSON(requestParameters['updateCategoryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品種別の情報を更新します。
     * 商品種別更新
     */
    async v1CategoriesCategoryIdPatch(requestParameters: V1CategoriesCategoryIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CategoriesCategoryIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 商品種別の一覧を取得します。
     * 商品種別一覧取得
     */
    async v1CategoriesGetRaw(requestParameters: V1CategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoriesResponseFromJSON(jsonValue));
    }

    /**
     * 商品種別の一覧を取得します。
     * 商品種別一覧取得
     */
    async v1CategoriesGet(requestParameters: V1CategoriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoriesResponse> {
        const response = await this.v1CategoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい商品種別を登録します。
     * 商品種別登録
     */
    async v1CategoriesPostRaw(requestParameters: V1CategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryResponse>> {
        if (requestParameters['createCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'createCategoryRequest',
                'Required parameter "createCategoryRequest" was null or undefined when calling v1CategoriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCategoryRequestToJSON(requestParameters['createCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryResponseFromJSON(jsonValue));
    }

    /**
     * 新しい商品種別を登録します。
     * 商品種別登録
     */
    async v1CategoriesPost(requestParameters: V1CategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryResponse> {
        const response = await this.v1CategoriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
