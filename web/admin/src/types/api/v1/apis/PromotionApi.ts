/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePromotionRequest,
  ErrorResponse,
  PromotionResponse,
  PromotionsResponse,
  UpdatePromotionRequest,
} from '../models/index';
import {
    CreatePromotionRequestFromJSON,
    CreatePromotionRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PromotionResponseFromJSON,
    PromotionResponseToJSON,
    PromotionsResponseFromJSON,
    PromotionsResponseToJSON,
    UpdatePromotionRequestFromJSON,
    UpdatePromotionRequestToJSON,
} from '../models/index';

export interface V1PromotionsGetRequest {
    limit?: number;
    offset?: number;
    shopId?: string;
    title?: string;
    withAllTarget?: boolean;
    orders?: string;
}

export interface V1PromotionsPostRequest {
    createPromotionRequest: CreatePromotionRequest;
}

export interface V1PromotionsPromotionIdDeleteRequest {
    promotionId: string;
}

export interface V1PromotionsPromotionIdGetRequest {
    promotionId: string;
}

export interface V1PromotionsPromotionIdPatchRequest {
    promotionId: string;
    updatePromotionRequest: UpdatePromotionRequest;
}

/**
 * 
 */
export class PromotionApi extends runtime.BaseAPI {

    /**
     * プロモーションの一覧を取得します。ページネーション、ショップ・タイトルでのフィルタリング、ソート機能に対応しています。
     * プロモーション一覧取得
     */
    async v1PromotionsGetRaw(requestParameters: V1PromotionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['shopId'] != null) {
            queryParameters['shopId'] = requestParameters['shopId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['withAllTarget'] != null) {
            queryParameters['withAllTarget'] = requestParameters['withAllTarget'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/promotions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionsResponseFromJSON(jsonValue));
    }

    /**
     * プロモーションの一覧を取得します。ページネーション、ショップ・タイトルでのフィルタリング、ソート機能に対応しています。
     * プロモーション一覧取得
     */
    async v1PromotionsGet(requestParameters: V1PromotionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionsResponse> {
        const response = await this.v1PromotionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しいプロモーションを登録します。
     * プロモーション登録
     */
    async v1PromotionsPostRaw(requestParameters: V1PromotionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters['createPromotionRequest'] == null) {
            throw new runtime.RequiredError(
                'createPromotionRequest',
                'Required parameter "createPromotionRequest" was null or undefined when calling v1PromotionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/promotions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePromotionRequestToJSON(requestParameters['createPromotionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     * 新しいプロモーションを登録します。
     * プロモーション登録
     */
    async v1PromotionsPost(requestParameters: V1PromotionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionResponse> {
        const response = await this.v1PromotionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロモーションを削除します。
     * プロモーション削除
     */
    async v1PromotionsPromotionIdDeleteRaw(requestParameters: V1PromotionsPromotionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['promotionId'] == null) {
            throw new runtime.RequiredError(
                'promotionId',
                'Required parameter "promotionId" was null or undefined when calling v1PromotionsPromotionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/promotions/{promotionId}`;
        urlPath = urlPath.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters['promotionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * プロモーションを削除します。
     * プロモーション削除
     */
    async v1PromotionsPromotionIdDelete(requestParameters: V1PromotionsPromotionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PromotionsPromotionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたプロモーションの詳細情報を取得します。
     * プロモーション取得
     */
    async v1PromotionsPromotionIdGetRaw(requestParameters: V1PromotionsPromotionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters['promotionId'] == null) {
            throw new runtime.RequiredError(
                'promotionId',
                'Required parameter "promotionId" was null or undefined when calling v1PromotionsPromotionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/promotions/{promotionId}`;
        urlPath = urlPath.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters['promotionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたプロモーションの詳細情報を取得します。
     * プロモーション取得
     */
    async v1PromotionsPromotionIdGet(requestParameters: V1PromotionsPromotionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionResponse> {
        const response = await this.v1PromotionsPromotionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロモーションの情報を更新します。
     * プロモーション更新
     */
    async v1PromotionsPromotionIdPatchRaw(requestParameters: V1PromotionsPromotionIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['promotionId'] == null) {
            throw new runtime.RequiredError(
                'promotionId',
                'Required parameter "promotionId" was null or undefined when calling v1PromotionsPromotionIdPatch().'
            );
        }

        if (requestParameters['updatePromotionRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePromotionRequest',
                'Required parameter "updatePromotionRequest" was null or undefined when calling v1PromotionsPromotionIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/promotions/{promotionId}`;
        urlPath = urlPath.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters['promotionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePromotionRequestToJSON(requestParameters['updatePromotionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * プロモーションの情報を更新します。
     * プロモーション更新
     */
    async v1PromotionsPromotionIdPatch(requestParameters: V1PromotionsPromotionIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PromotionsPromotionIdPatchRaw(requestParameters, initOverrides);
    }

}
