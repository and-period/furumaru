/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetUploadURLRequest,
  UploadStateResponse,
  UploadURLResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetUploadURLRequestFromJSON,
    GetUploadURLRequestToJSON,
    UploadStateResponseFromJSON,
    UploadStateResponseToJSON,
    UploadURLResponseFromJSON,
    UploadURLResponseToJSON,
} from '../models/index';

export interface V1UploadCoordinatorsBonusVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadCoordinatorsHeaderPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadCoordinatorsPromotionVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadCoordinatorsThumbnailPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadExperiencesImagePostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadExperiencesPromotionVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadExperiencesVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProducersBonusVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProducersHeaderPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProducersPromotionVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProducersThumbnailPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProductTypesIconPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProductsImagePostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadProductsVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadSchedulesBroadcastsLivePostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadSchedulesImagePostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadSchedulesOpeningVideoPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadSchedulesScheduleIdBroadcastsArchivePostRequest {
    scheduleId: string;
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadSchedulesThumbnailPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadSpotsThumbnailPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadStateGetRequest {
    key: string;
}

export interface V1UploadVideosFilePostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

export interface V1UploadVideosThumbnailPostRequest {
    getUploadURLRequest: GetUploadURLRequest;
}

/**
 * 
 */
export class UploadApi extends runtime.BaseAPI {

    /**
     * コーディネーターの特典動画アップロードURLを生成します。
     * コーディネーター特典動画アップロードURL生成
     */
    async v1UploadCoordinatorsBonusVideoPostRaw(requestParameters: V1UploadCoordinatorsBonusVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadCoordinatorsBonusVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/coordinators/bonus-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * コーディネーターの特典動画アップロードURLを生成します。
     * コーディネーター特典動画アップロードURL生成
     */
    async v1UploadCoordinatorsBonusVideoPost(requestParameters: V1UploadCoordinatorsBonusVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadCoordinatorsBonusVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネーターのヘッダー画像アップロードURLを生成します。
     * コーディネーターヘッダーアップロードURL生成
     */
    async v1UploadCoordinatorsHeaderPostRaw(requestParameters: V1UploadCoordinatorsHeaderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadCoordinatorsHeaderPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/coordinators/header`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * コーディネーターのヘッダー画像アップロードURLを生成します。
     * コーディネーターヘッダーアップロードURL生成
     */
    async v1UploadCoordinatorsHeaderPost(requestParameters: V1UploadCoordinatorsHeaderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadCoordinatorsHeaderPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネーターのプロモーション動画アップロードURLを生成します。
     * コーディネータープロモ動画アップロードURL生成
     */
    async v1UploadCoordinatorsPromotionVideoPostRaw(requestParameters: V1UploadCoordinatorsPromotionVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadCoordinatorsPromotionVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/coordinators/promotion-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * コーディネーターのプロモーション動画アップロードURLを生成します。
     * コーディネータープロモ動画アップロードURL生成
     */
    async v1UploadCoordinatorsPromotionVideoPost(requestParameters: V1UploadCoordinatorsPromotionVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadCoordinatorsPromotionVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コーディネーターのサムネイル画像アップロードURLを生成します。
     * コーディネーターサムネイルアップロードURL生成
     */
    async v1UploadCoordinatorsThumbnailPostRaw(requestParameters: V1UploadCoordinatorsThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadCoordinatorsThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/coordinators/thumbnail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * コーディネーターのサムネイル画像アップロードURLを生成します。
     * コーディネーターサムネイルアップロードURL生成
     */
    async v1UploadCoordinatorsThumbnailPost(requestParameters: V1UploadCoordinatorsThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadCoordinatorsThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験の画像アップロードURLを生成します。
     * 体験画像アップロードURL生成
     */
    async v1UploadExperiencesImagePostRaw(requestParameters: V1UploadExperiencesImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadExperiencesImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/experiences/image`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 体験の画像アップロードURLを生成します。
     * 体験画像アップロードURL生成
     */
    async v1UploadExperiencesImagePost(requestParameters: V1UploadExperiencesImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadExperiencesImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験のプロモーション動画アップロードURLを生成します。
     * 体験プロモ動画アップロードURL生成
     */
    async v1UploadExperiencesPromotionVideoPostRaw(requestParameters: V1UploadExperiencesPromotionVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadExperiencesPromotionVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/experiences/promotion-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 体験のプロモーション動画アップロードURLを生成します。
     * 体験プロモ動画アップロードURL生成
     */
    async v1UploadExperiencesPromotionVideoPost(requestParameters: V1UploadExperiencesPromotionVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadExperiencesPromotionVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験の動画アップロードURLを生成します。
     * 体験動画アップロードURL生成
     */
    async v1UploadExperiencesVideoPostRaw(requestParameters: V1UploadExperiencesVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadExperiencesVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/experiences/video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 体験の動画アップロードURLを生成します。
     * 体験動画アップロードURL生成
     */
    async v1UploadExperiencesVideoPost(requestParameters: V1UploadExperiencesVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadExperiencesVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者の特典動画アップロードURLを生成します。
     * 生産者特典動画アップロードURL生成
     */
    async v1UploadProducersBonusVideoPostRaw(requestParameters: V1UploadProducersBonusVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProducersBonusVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/producers/bonus-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 生産者の特典動画アップロードURLを生成します。
     * 生産者特典動画アップロードURL生成
     */
    async v1UploadProducersBonusVideoPost(requestParameters: V1UploadProducersBonusVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProducersBonusVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者のヘッダー画像アップロードURLを生成します。
     * 生産者ヘッダーアップロードURL生成
     */
    async v1UploadProducersHeaderPostRaw(requestParameters: V1UploadProducersHeaderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProducersHeaderPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/producers/header`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 生産者のヘッダー画像アップロードURLを生成します。
     * 生産者ヘッダーアップロードURL生成
     */
    async v1UploadProducersHeaderPost(requestParameters: V1UploadProducersHeaderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProducersHeaderPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者のプロモーション動画アップロードURLを生成します。
     * 生産者プロモ動画アップロードURL生成
     */
    async v1UploadProducersPromotionVideoPostRaw(requestParameters: V1UploadProducersPromotionVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProducersPromotionVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/producers/promotion-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 生産者のプロモーション動画アップロードURLを生成します。
     * 生産者プロモ動画アップロードURL生成
     */
    async v1UploadProducersPromotionVideoPost(requestParameters: V1UploadProducersPromotionVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProducersPromotionVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生産者のサムネイル画像アップロードURLを生成します。
     * 生産者サムネイルアップロードURL生成
     */
    async v1UploadProducersThumbnailPostRaw(requestParameters: V1UploadProducersThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProducersThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/producers/thumbnail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 生産者のサムネイル画像アップロードURLを生成します。
     * 生産者サムネイルアップロードURL生成
     */
    async v1UploadProducersThumbnailPost(requestParameters: V1UploadProducersThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProducersThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品種別のアイコンアップロードURLを生成します。
     * 商品種別アイコンアップロードURL生成
     */
    async v1UploadProductTypesIconPostRaw(requestParameters: V1UploadProductTypesIconPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProductTypesIconPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/product-types/icon`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 商品種別のアイコンアップロードURLを生成します。
     * 商品種別アイコンアップロードURL生成
     */
    async v1UploadProductTypesIconPost(requestParameters: V1UploadProductTypesIconPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProductTypesIconPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品の画像アップロードURLを生成します。
     * 商品画像アップロードURL生成
     */
    async v1UploadProductsImagePostRaw(requestParameters: V1UploadProductsImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProductsImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/products/image`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 商品の画像アップロードURLを生成します。
     * 商品画像アップロードURL生成
     */
    async v1UploadProductsImagePost(requestParameters: V1UploadProductsImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProductsImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品の動画アップロードURLを生成します。
     * 商品動画アップロードURL生成
     */
    async v1UploadProductsVideoPostRaw(requestParameters: V1UploadProductsVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadProductsVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/products/video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 商品の動画アップロードURLを生成します。
     * 商品動画アップロードURL生成
     */
    async v1UploadProductsVideoPost(requestParameters: V1UploadProductsVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadProductsVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ライブ配信動画のアップロードURLを生成します。
     * ライブ動画アップロードURL生成
     */
    async v1UploadSchedulesBroadcastsLivePostRaw(requestParameters: V1UploadSchedulesBroadcastsLivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadSchedulesBroadcastsLivePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/schedules/-/broadcasts/live`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * ライブ配信動画のアップロードURLを生成します。
     * ライブ動画アップロードURL生成
     */
    async v1UploadSchedulesBroadcastsLivePost(requestParameters: V1UploadSchedulesBroadcastsLivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadSchedulesBroadcastsLivePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スケジュールの画像アップロードURLを生成します。
     * スケジュール画像アップロードURL生成
     */
    async v1UploadSchedulesImagePostRaw(requestParameters: V1UploadSchedulesImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadSchedulesImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/schedules/image`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * スケジュールの画像アップロードURLを生成します。
     * スケジュール画像アップロードURL生成
     */
    async v1UploadSchedulesImagePost(requestParameters: V1UploadSchedulesImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadSchedulesImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スケジュールのオープニング動画アップロードURLを生成します。
     * スケジュールオープニング動画アップロードURL生成
     */
    async v1UploadSchedulesOpeningVideoPostRaw(requestParameters: V1UploadSchedulesOpeningVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadSchedulesOpeningVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/schedules/opening-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * スケジュールのオープニング動画アップロードURLを生成します。
     * スケジュールオープニング動画アップロードURL生成
     */
    async v1UploadSchedulesOpeningVideoPost(requestParameters: V1UploadSchedulesOpeningVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadSchedulesOpeningVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたスケジュールのアーカイブ動画アップロードURLを生成します。
     * アーカイブ動画アップロードURL生成
     */
    async v1UploadSchedulesScheduleIdBroadcastsArchivePostRaw(requestParameters: V1UploadSchedulesScheduleIdBroadcastsArchivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1UploadSchedulesScheduleIdBroadcastsArchivePost().'
            );
        }

        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadSchedulesScheduleIdBroadcastsArchivePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/schedules/{scheduleId}/broadcasts/archive`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたスケジュールのアーカイブ動画アップロードURLを生成します。
     * アーカイブ動画アップロードURL生成
     */
    async v1UploadSchedulesScheduleIdBroadcastsArchivePost(requestParameters: V1UploadSchedulesScheduleIdBroadcastsArchivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadSchedulesScheduleIdBroadcastsArchivePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スケジュールのサムネイルアップロードURLを生成します。
     * スケジュールサムネイルアップロードURL生成
     */
    async v1UploadSchedulesThumbnailPostRaw(requestParameters: V1UploadSchedulesThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadSchedulesThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/schedules/thumbnail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * スケジュールのサムネイルアップロードURLを生成します。
     * スケジュールサムネイルアップロードURL生成
     */
    async v1UploadSchedulesThumbnailPost(requestParameters: V1UploadSchedulesThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadSchedulesThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スポットのサムネイルアップロードURLを生成します。
     * スポットサムネイルアップロードURL生成
     */
    async v1UploadSpotsThumbnailPostRaw(requestParameters: V1UploadSpotsThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadSpotsThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/spots/thumbnail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * スポットのサムネイルアップロードURLを生成します。
     * スポットサムネイルアップロードURL生成
     */
    async v1UploadSpotsThumbnailPost(requestParameters: V1UploadSpotsThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadSpotsThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたキーのアップロード状態を取得します。
     * アップロード状態取得
     */
    async v1UploadStateGetRaw(requestParameters: V1UploadStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadStateResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling v1UploadStateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/state`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadStateResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたキーのアップロード状態を取得します。
     * アップロード状態取得
     */
    async v1UploadStateGet(requestParameters: V1UploadStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadStateResponse> {
        const response = await this.v1UploadStateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画ファイルのアップロードURLを生成します。
     * 動画ファイルアップロードURL生成
     */
    async v1UploadVideosFilePostRaw(requestParameters: V1UploadVideosFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadVideosFilePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/videos/file`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 動画ファイルのアップロードURLを生成します。
     * 動画ファイルアップロードURL生成
     */
    async v1UploadVideosFilePost(requestParameters: V1UploadVideosFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadVideosFilePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画のサムネイルアップロードURLを生成します。
     * 動画サムネイルアップロードURL生成
     */
    async v1UploadVideosThumbnailPostRaw(requestParameters: V1UploadVideosThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadURLResponse>> {
        if (requestParameters['getUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'getUploadURLRequest',
                'Required parameter "getUploadURLRequest" was null or undefined when calling v1UploadVideosThumbnailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/upload/videos/thumbnail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUploadURLRequestToJSON(requestParameters['getUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadURLResponseFromJSON(jsonValue));
    }

    /**
     * 動画のサムネイルアップロードURLを生成します。
     * 動画サムネイルアップロードURL生成
     */
    async v1UploadVideosThumbnailPost(requestParameters: V1UploadVideosThumbnailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadURLResponse> {
        const response = await this.v1UploadVideosThumbnailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
