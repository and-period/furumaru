/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExperienceTypeRequest,
  ErrorResponse,
  ExperienceTypeResponse,
  ExperienceTypesResponse,
  UpdateExperienceTypeRequest,
} from '../models/index';
import {
    CreateExperienceTypeRequestFromJSON,
    CreateExperienceTypeRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperienceTypeResponseFromJSON,
    ExperienceTypeResponseToJSON,
    ExperienceTypesResponseFromJSON,
    ExperienceTypesResponseToJSON,
    UpdateExperienceTypeRequestFromJSON,
    UpdateExperienceTypeRequestToJSON,
} from '../models/index';

export interface V1ExperienceTypesExperienceTypeIdDeleteRequest {
    experienceTypeId: string;
}

export interface V1ExperienceTypesExperienceTypeIdPatchRequest {
    experienceTypeId: string;
    updateExperienceTypeRequest: UpdateExperienceTypeRequest;
}

export interface V1ExperienceTypesGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
}

export interface V1ExperienceTypesPostRequest {
    createExperienceTypeRequest: CreateExperienceTypeRequest;
}

/**
 * 
 */
export class ExperienceTypeApi extends runtime.BaseAPI {

    /**
     * 体験タイプを削除します。
     * 体験タイプ削除
     */
    async v1ExperienceTypesExperienceTypeIdDeleteRaw(requestParameters: V1ExperienceTypesExperienceTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceTypeId'] == null) {
            throw new runtime.RequiredError(
                'experienceTypeId',
                'Required parameter "experienceTypeId" was null or undefined when calling v1ExperienceTypesExperienceTypeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experience-types/{experienceTypeId}`;
        urlPath = urlPath.replace(`{${"experienceTypeId"}}`, encodeURIComponent(String(requestParameters['experienceTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験タイプを削除します。
     * 体験タイプ削除
     */
    async v1ExperienceTypesExperienceTypeIdDelete(requestParameters: V1ExperienceTypesExperienceTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ExperienceTypesExperienceTypeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 体験タイプの情報を更新します。
     * 体験タイプ更新
     */
    async v1ExperienceTypesExperienceTypeIdPatchRaw(requestParameters: V1ExperienceTypesExperienceTypeIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceTypeId'] == null) {
            throw new runtime.RequiredError(
                'experienceTypeId',
                'Required parameter "experienceTypeId" was null or undefined when calling v1ExperienceTypesExperienceTypeIdPatch().'
            );
        }

        if (requestParameters['updateExperienceTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'updateExperienceTypeRequest',
                'Required parameter "updateExperienceTypeRequest" was null or undefined when calling v1ExperienceTypesExperienceTypeIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experience-types/{experienceTypeId}`;
        urlPath = urlPath.replace(`{${"experienceTypeId"}}`, encodeURIComponent(String(requestParameters['experienceTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExperienceTypeRequestToJSON(requestParameters['updateExperienceTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験タイプの情報を更新します。
     * 体験タイプ更新
     */
    async v1ExperienceTypesExperienceTypeIdPatch(requestParameters: V1ExperienceTypesExperienceTypeIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ExperienceTypesExperienceTypeIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 体験タイプの一覧を取得します。名前でのフィルタリングが可能です。
     * 体験タイプ一覧取得
     */
    async v1ExperienceTypesGetRaw(requestParameters: V1ExperienceTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experience-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceTypesResponseFromJSON(jsonValue));
    }

    /**
     * 体験タイプの一覧を取得します。名前でのフィルタリングが可能です。
     * 体験タイプ一覧取得
     */
    async v1ExperienceTypesGet(requestParameters: V1ExperienceTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceTypesResponse> {
        const response = await this.v1ExperienceTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい体験タイプを登録します。
     * 体験タイプ登録
     */
    async v1ExperienceTypesPostRaw(requestParameters: V1ExperienceTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceTypeResponse>> {
        if (requestParameters['createExperienceTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'createExperienceTypeRequest',
                'Required parameter "createExperienceTypeRequest" was null or undefined when calling v1ExperienceTypesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experience-types`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExperienceTypeRequestToJSON(requestParameters['createExperienceTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceTypeResponseFromJSON(jsonValue));
    }

    /**
     * 新しい体験タイプを登録します。
     * 体験タイプ登録
     */
    async v1ExperienceTypesPost(requestParameters: V1ExperienceTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceTypeResponse> {
        const response = await this.v1ExperienceTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
