/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductTagRequest,
  ErrorResponse,
  ProductTagResponse,
  ProductTagsResponse,
  UpdateProductTagRequest,
} from '../models/index';
import {
    CreateProductTagRequestFromJSON,
    CreateProductTagRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProductTagResponseFromJSON,
    ProductTagResponseToJSON,
    ProductTagsResponseFromJSON,
    ProductTagsResponseToJSON,
    UpdateProductTagRequestFromJSON,
    UpdateProductTagRequestToJSON,
} from '../models/index';

export interface V1ProductTagsGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
    orders?: string;
}

export interface V1ProductTagsPostRequest {
    createProductTagRequest: CreateProductTagRequest;
}

export interface V1ProductTagsProductTagIdDeleteRequest {
    productTagId: string;
}

export interface V1ProductTagsProductTagIdPatchRequest {
    productTagId: string;
    updateProductTagRequest: UpdateProductTagRequest;
}

/**
 * 
 */
export class ProductTagApi extends runtime.BaseAPI {

    /**
     * 商品タグの一覧を取得します。名前でのフィルタリング、ソート順指定が可能です。
     * 商品タグ一覧取得
     */
    async v1ProductTagsGetRaw(requestParameters: V1ProductTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTagsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/product-tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTagsResponseFromJSON(jsonValue));
    }

    /**
     * 商品タグの一覧を取得します。名前でのフィルタリング、ソート順指定が可能です。
     * 商品タグ一覧取得
     */
    async v1ProductTagsGet(requestParameters: V1ProductTagsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTagsResponse> {
        const response = await this.v1ProductTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい商品タグを登録します。
     * 商品タグ登録
     */
    async v1ProductTagsPostRaw(requestParameters: V1ProductTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTagResponse>> {
        if (requestParameters['createProductTagRequest'] == null) {
            throw new runtime.RequiredError(
                'createProductTagRequest',
                'Required parameter "createProductTagRequest" was null or undefined when calling v1ProductTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/product-tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductTagRequestToJSON(requestParameters['createProductTagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTagResponseFromJSON(jsonValue));
    }

    /**
     * 新しい商品タグを登録します。
     * 商品タグ登録
     */
    async v1ProductTagsPost(requestParameters: V1ProductTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTagResponse> {
        const response = await this.v1ProductTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 商品タグを削除します。
     * 商品タグ削除
     */
    async v1ProductTagsProductTagIdDeleteRaw(requestParameters: V1ProductTagsProductTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productTagId'] == null) {
            throw new runtime.RequiredError(
                'productTagId',
                'Required parameter "productTagId" was null or undefined when calling v1ProductTagsProductTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/product-tags/{productTagId}`;
        urlPath = urlPath.replace(`{${"productTagId"}}`, encodeURIComponent(String(requestParameters['productTagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品タグを削除します。
     * 商品タグ削除
     */
    async v1ProductTagsProductTagIdDelete(requestParameters: V1ProductTagsProductTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ProductTagsProductTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 商品タグの情報を更新します。
     * 商品タグ更新
     */
    async v1ProductTagsProductTagIdPatchRaw(requestParameters: V1ProductTagsProductTagIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productTagId'] == null) {
            throw new runtime.RequiredError(
                'productTagId',
                'Required parameter "productTagId" was null or undefined when calling v1ProductTagsProductTagIdPatch().'
            );
        }

        if (requestParameters['updateProductTagRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProductTagRequest',
                'Required parameter "updateProductTagRequest" was null or undefined when calling v1ProductTagsProductTagIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/product-tags/{productTagId}`;
        urlPath = urlPath.replace(`{${"productTagId"}}`, encodeURIComponent(String(requestParameters['productTagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductTagRequestToJSON(requestParameters['updateProductTagRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 商品タグの情報を更新します。
     * 商品タグ更新
     */
    async v1ProductTagsProductTagIdPatch(requestParameters: V1ProductTagsProductTagIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ProductTagsProductTagIdPatchRaw(requestParameters, initOverrides);
    }

}
