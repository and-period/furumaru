/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLiveRequest,
  ErrorResponse,
  LiveResponse,
  LivesResponse,
  UpdateLiveRequest,
} from '../models/index';
import {
    CreateLiveRequestFromJSON,
    CreateLiveRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LiveResponseFromJSON,
    LiveResponseToJSON,
    LivesResponseFromJSON,
    LivesResponseToJSON,
    UpdateLiveRequestFromJSON,
    UpdateLiveRequestToJSON,
} from '../models/index';

export interface V1SchedulesScheduleIdLivesGetRequest {
    scheduleId: string;
}

export interface V1SchedulesScheduleIdLivesLiveIdDeleteRequest {
    scheduleId: string;
    liveId: string;
}

export interface V1SchedulesScheduleIdLivesLiveIdGetRequest {
    scheduleId: string;
    liveId: string;
}

export interface V1SchedulesScheduleIdLivesLiveIdPatchRequest {
    scheduleId: string;
    liveId: string;
    updateLiveRequest: UpdateLiveRequest;
}

export interface V1SchedulesScheduleIdLivesPostRequest {
    scheduleId: string;
    createLiveRequest: CreateLiveRequest;
}

/**
 * 
 */
export class LiveApi extends runtime.BaseAPI {

    /**
     * 指定されたスケジュールのライブ配信一覧を取得します。
     * ライブ配信一覧取得
     */
    async v1SchedulesScheduleIdLivesGetRaw(requestParameters: V1SchedulesScheduleIdLivesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LivesResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdLivesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/lives`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LivesResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたスケジュールのライブ配信一覧を取得します。
     * ライブ配信一覧取得
     */
    async v1SchedulesScheduleIdLivesGet(requestParameters: V1SchedulesScheduleIdLivesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LivesResponse> {
        const response = await this.v1SchedulesScheduleIdLivesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ライブ配信を削除します。
     * ライブ配信削除
     */
    async v1SchedulesScheduleIdLivesLiveIdDeleteRaw(requestParameters: V1SchedulesScheduleIdLivesLiveIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdDelete().'
            );
        }

        if (requestParameters['liveId'] == null) {
            throw new runtime.RequiredError(
                'liveId',
                'Required parameter "liveId" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/lives/{liveId}`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));
        urlPath = urlPath.replace(`{${"liveId"}}`, encodeURIComponent(String(requestParameters['liveId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信を削除します。
     * ライブ配信削除
     */
    async v1SchedulesScheduleIdLivesLiveIdDelete(requestParameters: V1SchedulesScheduleIdLivesLiveIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdLivesLiveIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定されたライブ配信の詳細情報を取得します。
     * ライブ配信取得
     */
    async v1SchedulesScheduleIdLivesLiveIdGetRaw(requestParameters: V1SchedulesScheduleIdLivesLiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdGet().'
            );
        }

        if (requestParameters['liveId'] == null) {
            throw new runtime.RequiredError(
                'liveId',
                'Required parameter "liveId" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/lives/{liveId}`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));
        urlPath = urlPath.replace(`{${"liveId"}}`, encodeURIComponent(String(requestParameters['liveId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたライブ配信の詳細情報を取得します。
     * ライブ配信取得
     */
    async v1SchedulesScheduleIdLivesLiveIdGet(requestParameters: V1SchedulesScheduleIdLivesLiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveResponse> {
        const response = await this.v1SchedulesScheduleIdLivesLiveIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ライブ配信の情報を更新します。
     * ライブ配信更新
     */
    async v1SchedulesScheduleIdLivesLiveIdPatchRaw(requestParameters: V1SchedulesScheduleIdLivesLiveIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdPatch().'
            );
        }

        if (requestParameters['liveId'] == null) {
            throw new runtime.RequiredError(
                'liveId',
                'Required parameter "liveId" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdPatch().'
            );
        }

        if (requestParameters['updateLiveRequest'] == null) {
            throw new runtime.RequiredError(
                'updateLiveRequest',
                'Required parameter "updateLiveRequest" was null or undefined when calling v1SchedulesScheduleIdLivesLiveIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/lives/{liveId}`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));
        urlPath = urlPath.replace(`{${"liveId"}}`, encodeURIComponent(String(requestParameters['liveId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLiveRequestToJSON(requestParameters['updateLiveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ライブ配信の情報を更新します。
     * ライブ配信更新
     */
    async v1SchedulesScheduleIdLivesLiveIdPatch(requestParameters: V1SchedulesScheduleIdLivesLiveIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SchedulesScheduleIdLivesLiveIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 新しいライブ配信を登録します。
     * ライブ配信登録
     */
    async v1SchedulesScheduleIdLivesPostRaw(requestParameters: V1SchedulesScheduleIdLivesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveResponse>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling v1SchedulesScheduleIdLivesPost().'
            );
        }

        if (requestParameters['createLiveRequest'] == null) {
            throw new runtime.RequiredError(
                'createLiveRequest',
                'Required parameter "createLiveRequest" was null or undefined when calling v1SchedulesScheduleIdLivesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/schedules/{scheduleId}/lives`;
        urlPath = urlPath.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLiveRequestToJSON(requestParameters['createLiveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveResponseFromJSON(jsonValue));
    }

    /**
     * 新しいライブ配信を登録します。
     * ライブ配信登録
     */
    async v1SchedulesScheduleIdLivesPost(requestParameters: V1SchedulesScheduleIdLivesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveResponse> {
        const response = await this.v1SchedulesScheduleIdLivesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
