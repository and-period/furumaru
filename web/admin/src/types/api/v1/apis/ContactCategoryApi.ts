/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactCategoriesResponse,
  ContactCategoryResponse,
  ErrorResponse,
} from '../models/index';
import {
    ContactCategoriesResponseFromJSON,
    ContactCategoriesResponseToJSON,
    ContactCategoryResponseFromJSON,
    ContactCategoryResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface V1ContactCategoriesContactCategoryIdGetRequest {
    contactCategoryId: string;
}

export interface V1ContactCategoriesGetRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class ContactCategoryApi extends runtime.BaseAPI {

    /**
     * 指定されたお問い合わせカテゴリの詳細情報を取得します。
     * お問い合わせカテゴリ取得
     */
    async v1ContactCategoriesContactCategoryIdGetRaw(requestParameters: V1ContactCategoriesContactCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactCategoryResponse>> {
        if (requestParameters['contactCategoryId'] == null) {
            throw new runtime.RequiredError(
                'contactCategoryId',
                'Required parameter "contactCategoryId" was null or undefined when calling v1ContactCategoriesContactCategoryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contact-categories/{contactCategoryId}`;
        urlPath = urlPath.replace(`{${"contactCategoryId"}}`, encodeURIComponent(String(requestParameters['contactCategoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactCategoryResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたお問い合わせカテゴリの詳細情報を取得します。
     * お問い合わせカテゴリ取得
     */
    async v1ContactCategoriesContactCategoryIdGet(requestParameters: V1ContactCategoriesContactCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactCategoryResponse> {
        const response = await this.v1ContactCategoriesContactCategoryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お問い合わせカテゴリの一覧を取得します。
     * お問い合わせカテゴリ一覧取得
     */
    async v1ContactCategoriesGetRaw(requestParameters: V1ContactCategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactCategoriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/contact-categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * お問い合わせカテゴリの一覧を取得します。
     * お問い合わせカテゴリ一覧取得
     */
    async v1ContactCategoriesGet(requestParameters: V1ContactCategoriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactCategoriesResponse> {
        const response = await this.v1ContactCategoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
