/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteOrderRequest,
  DraftOrderRequest,
  ErrorResponse,
  ExportOrdersRequest,
  OrderResponse,
  OrdersResponse,
  RefundOrderRequest,
  UpdateOrderFulfillmentRequest,
} from '../models/index';
import {
    CompleteOrderRequestFromJSON,
    CompleteOrderRequestToJSON,
    DraftOrderRequestFromJSON,
    DraftOrderRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExportOrdersRequestFromJSON,
    ExportOrdersRequestToJSON,
    OrderResponseFromJSON,
    OrderResponseToJSON,
    OrdersResponseFromJSON,
    OrdersResponseToJSON,
    RefundOrderRequestFromJSON,
    RefundOrderRequestToJSON,
    UpdateOrderFulfillmentRequestFromJSON,
    UpdateOrderFulfillmentRequestToJSON,
} from '../models/index';

export interface V1OrdersExportPostRequest {
    exportOrdersRequest: ExportOrdersRequest;
}

export interface V1OrdersGetRequest {
    limit?: number;
    offset?: number;
    statuses?: Array<number>;
    types?: Array<number>;
}

export interface V1OrdersOrderIdCancelPostRequest {
    orderId: string;
}

export interface V1OrdersOrderIdCapturePostRequest {
    orderId: string;
}

export interface V1OrdersOrderIdCompletePostRequest {
    orderId: string;
    completeOrderRequest: CompleteOrderRequest;
}

export interface V1OrdersOrderIdDraftPostRequest {
    orderId: string;
    draftOrderRequest: DraftOrderRequest;
}

export interface V1OrdersOrderIdFulfillmentsFulfillmentIdPatchRequest {
    orderId: string;
    fulfillmentId: string;
    updateOrderFulfillmentRequest: UpdateOrderFulfillmentRequest;
}

export interface V1OrdersOrderIdGetRequest {
    orderId: string;
}

export interface V1OrdersOrderIdRefundPostRequest {
    orderId: string;
    refundOrderRequest: RefundOrderRequest;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     * 注文履歴をCSV形式で出力します。
     * 注文履歴のCSV出力
     */
    async v1OrdersExportPostRaw(requestParameters: V1OrdersExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['exportOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'exportOrdersRequest',
                'Required parameter "exportOrdersRequest" was null or undefined when calling v1OrdersExportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/-/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportOrdersRequestToJSON(requestParameters['exportOrdersRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 注文履歴をCSV形式で出力します。
     * 注文履歴のCSV出力
     */
    async v1OrdersExportPost(requestParameters: V1OrdersExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1OrdersExportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 注文の一覧を取得します。コーディネータは自分の店舗の注文のみ取得できます。
     * 注文一覧取得
     */
    async v1OrdersGetRaw(requestParameters: V1OrdersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['statuses'] != null) {
            queryParameters['statuses'] = requestParameters['statuses'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * 注文の一覧を取得します。コーディネータは自分の店舗の注文のみ取得できます。
     * 注文一覧取得
     */
    async v1OrdersGet(requestParameters: V1OrdersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.v1OrdersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 注文をキャンセルします。
     * 注文キャンセル
     */
    async v1OrdersOrderIdCancelPostRaw(requestParameters: V1OrdersOrderIdCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdCancelPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}/cancel`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注文をキャンセルします。
     * 注文キャンセル
     */
    async v1OrdersOrderIdCancelPost(requestParameters: V1OrdersOrderIdCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1OrdersOrderIdCancelPostRaw(requestParameters, initOverrides);
    }

    /**
     * 注文を確定します。
     * 注文確定
     */
    async v1OrdersOrderIdCapturePostRaw(requestParameters: V1OrdersOrderIdCapturePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdCapturePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}/capture`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注文を確定します。
     * 注文確定
     */
    async v1OrdersOrderIdCapturePost(requestParameters: V1OrdersOrderIdCapturePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1OrdersOrderIdCapturePostRaw(requestParameters, initOverrides);
    }

    /**
     * 注文対応を完了します。
     * 注文対応完了
     */
    async v1OrdersOrderIdCompletePostRaw(requestParameters: V1OrdersOrderIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdCompletePost().'
            );
        }

        if (requestParameters['completeOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'completeOrderRequest',
                'Required parameter "completeOrderRequest" was null or undefined when calling v1OrdersOrderIdCompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}/complete`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteOrderRequestToJSON(requestParameters['completeOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注文対応を完了します。
     * 注文対応完了
     */
    async v1OrdersOrderIdCompletePost(requestParameters: V1OrdersOrderIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1OrdersOrderIdCompletePostRaw(requestParameters, initOverrides);
    }

    /**
     * 注文の下書きを保存します。
     * 注文下書き保存
     */
    async v1OrdersOrderIdDraftPostRaw(requestParameters: V1OrdersOrderIdDraftPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdDraftPost().'
            );
        }

        if (requestParameters['draftOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'draftOrderRequest',
                'Required parameter "draftOrderRequest" was null or undefined when calling v1OrdersOrderIdDraftPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}/draft`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DraftOrderRequestToJSON(requestParameters['draftOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注文の下書きを保存します。
     * 注文下書き保存
     */
    async v1OrdersOrderIdDraftPost(requestParameters: V1OrdersOrderIdDraftPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1OrdersOrderIdDraftPostRaw(requestParameters, initOverrides);
    }

    /**
     * 注文の配送情報を更新します。
     * 注文の配送情報更新
     */
    async v1OrdersOrderIdFulfillmentsFulfillmentIdPatchRaw(requestParameters: V1OrdersOrderIdFulfillmentsFulfillmentIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdFulfillmentsFulfillmentIdPatch().'
            );
        }

        if (requestParameters['fulfillmentId'] == null) {
            throw new runtime.RequiredError(
                'fulfillmentId',
                'Required parameter "fulfillmentId" was null or undefined when calling v1OrdersOrderIdFulfillmentsFulfillmentIdPatch().'
            );
        }

        if (requestParameters['updateOrderFulfillmentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOrderFulfillmentRequest',
                'Required parameter "updateOrderFulfillmentRequest" was null or undefined when calling v1OrdersOrderIdFulfillmentsFulfillmentIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}/fulfillments/{fulfillmentId}`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));
        urlPath = urlPath.replace(`{${"fulfillmentId"}}`, encodeURIComponent(String(requestParameters['fulfillmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrderFulfillmentRequestToJSON(requestParameters['updateOrderFulfillmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注文の配送情報を更新します。
     * 注文の配送情報更新
     */
    async v1OrdersOrderIdFulfillmentsFulfillmentIdPatch(requestParameters: V1OrdersOrderIdFulfillmentsFulfillmentIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1OrdersOrderIdFulfillmentsFulfillmentIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された注文の詳細情報を取得します。
     * 注文取得
     */
    async v1OrdersOrderIdGetRaw(requestParameters: V1OrdersOrderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * 指定された注文の詳細情報を取得します。
     * 注文取得
     */
    async v1OrdersOrderIdGet(requestParameters: V1OrdersOrderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.v1OrdersOrderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 注文の返金を依頼します。
     * 注文の返金依頼
     */
    async v1OrdersOrderIdRefundPostRaw(requestParameters: V1OrdersOrderIdRefundPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v1OrdersOrderIdRefundPost().'
            );
        }

        if (requestParameters['refundOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'refundOrderRequest',
                'Required parameter "refundOrderRequest" was null or undefined when calling v1OrdersOrderIdRefundPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/orders/{orderId}/refund`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundOrderRequestToJSON(requestParameters['refundOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注文の返金を依頼します。
     * 注文の返金依頼
     */
    async v1OrdersOrderIdRefundPost(requestParameters: V1OrdersOrderIdRefundPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1OrdersOrderIdRefundPostRaw(requestParameters, initOverrides);
    }

}
