/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductTypeRequest,
  ErrorResponse,
  ProductTypeResponse,
  ProductTypesResponse,
  UpdateProductTypeRequest,
} from '../models/index';
import {
    CreateProductTypeRequestFromJSON,
    CreateProductTypeRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProductTypeResponseFromJSON,
    ProductTypeResponseToJSON,
    ProductTypesResponseFromJSON,
    ProductTypesResponseToJSON,
    UpdateProductTypeRequestFromJSON,
    UpdateProductTypeRequestToJSON,
} from '../models/index';

export interface V1CategoriesCategoryIdProductTypesGetRequest {
    categoryId: string;
    limit?: number;
    offset?: number;
    name?: string;
    orders?: string;
}

export interface V1CategoriesCategoryIdProductTypesPostRequest {
    categoryId: string;
    createProductTypeRequest: CreateProductTypeRequest;
}

export interface V1CategoriesCategoryIdProductTypesProductTypeIdDeleteRequest {
    categoryId: string;
    productTypeId: string;
}

export interface V1CategoriesCategoryIdProductTypesProductTypeIdPatchRequest {
    categoryId: string;
    productTypeId: string;
    updateProductTypeRequest: UpdateProductTypeRequest;
}

/**
 * 
 */
export class ProductTypeApi extends runtime.BaseAPI {

    /**
     * 品目の一覧を取得します。商品種別ID指定時はその種別の品目のみ取得します。
     * 品目一覧取得
     */
    async v1CategoriesCategoryIdProductTypesGetRaw(requestParameters: V1CategoriesCategoryIdProductTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypesResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling v1CategoriesCategoryIdProductTypesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['orders'] != null) {
            queryParameters['orders'] = requestParameters['orders'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories/{categoryId}/product-types`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypesResponseFromJSON(jsonValue));
    }

    /**
     * 品目の一覧を取得します。商品種別ID指定時はその種別の品目のみ取得します。
     * 品目一覧取得
     */
    async v1CategoriesCategoryIdProductTypesGet(requestParameters: V1CategoriesCategoryIdProductTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypesResponse> {
        const response = await this.v1CategoriesCategoryIdProductTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい品目を登録します。
     * 品目登録
     */
    async v1CategoriesCategoryIdProductTypesPostRaw(requestParameters: V1CategoriesCategoryIdProductTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling v1CategoriesCategoryIdProductTypesPost().'
            );
        }

        if (requestParameters['createProductTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'createProductTypeRequest',
                'Required parameter "createProductTypeRequest" was null or undefined when calling v1CategoriesCategoryIdProductTypesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories/{categoryId}/product-types`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductTypeRequestToJSON(requestParameters['createProductTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeResponseFromJSON(jsonValue));
    }

    /**
     * 新しい品目を登録します。
     * 品目登録
     */
    async v1CategoriesCategoryIdProductTypesPost(requestParameters: V1CategoriesCategoryIdProductTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeResponse> {
        const response = await this.v1CategoriesCategoryIdProductTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 品目を削除します。
     * 品目削除
     */
    async v1CategoriesCategoryIdProductTypesProductTypeIdDeleteRaw(requestParameters: V1CategoriesCategoryIdProductTypesProductTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling v1CategoriesCategoryIdProductTypesProductTypeIdDelete().'
            );
        }

        if (requestParameters['productTypeId'] == null) {
            throw new runtime.RequiredError(
                'productTypeId',
                'Required parameter "productTypeId" was null or undefined when calling v1CategoriesCategoryIdProductTypesProductTypeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories/{categoryId}/product-types/{productTypeId}`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters['productTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 品目を削除します。
     * 品目削除
     */
    async v1CategoriesCategoryIdProductTypesProductTypeIdDelete(requestParameters: V1CategoriesCategoryIdProductTypesProductTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CategoriesCategoryIdProductTypesProductTypeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 品目の情報を更新します。
     * 品目更新
     */
    async v1CategoriesCategoryIdProductTypesProductTypeIdPatchRaw(requestParameters: V1CategoriesCategoryIdProductTypesProductTypeIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling v1CategoriesCategoryIdProductTypesProductTypeIdPatch().'
            );
        }

        if (requestParameters['productTypeId'] == null) {
            throw new runtime.RequiredError(
                'productTypeId',
                'Required parameter "productTypeId" was null or undefined when calling v1CategoriesCategoryIdProductTypesProductTypeIdPatch().'
            );
        }

        if (requestParameters['updateProductTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProductTypeRequest',
                'Required parameter "updateProductTypeRequest" was null or undefined when calling v1CategoriesCategoryIdProductTypesProductTypeIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/categories/{categoryId}/product-types/{productTypeId}`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters['productTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductTypeRequestToJSON(requestParameters['updateProductTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 品目の情報を更新します。
     * 品目更新
     */
    async v1CategoriesCategoryIdProductTypesProductTypeIdPatch(requestParameters: V1CategoriesCategoryIdProductTypesProductTypeIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1CategoriesCategoryIdProductTypesProductTypeIdPatchRaw(requestParameters, initOverrides);
    }

}
