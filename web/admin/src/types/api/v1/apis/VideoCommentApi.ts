/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  UpdateVideoCommentRequest,
  VideoCommentsResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UpdateVideoCommentRequestFromJSON,
    UpdateVideoCommentRequestToJSON,
    VideoCommentsResponseFromJSON,
    VideoCommentsResponseToJSON,
} from '../models/index';

export interface V1VideosVideoIdCommentsCommentIdPatchRequest {
    videoId: string;
    commentId: string;
    updateVideoCommentRequest: UpdateVideoCommentRequest;
}

export interface V1VideosVideoIdCommentsGetRequest {
    videoId: string;
    limit?: number;
    start?: number;
    end?: number;
    next?: string;
}

/**
 * 
 */
export class VideoCommentApi extends runtime.BaseAPI {

    /**
     * 動画コメントの状態（無効/有効）を更新します。
     * 動画コメント更新
     */
    async v1VideosVideoIdCommentsCommentIdPatchRaw(requestParameters: V1VideosVideoIdCommentsCommentIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling v1VideosVideoIdCommentsCommentIdPatch().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling v1VideosVideoIdCommentsCommentIdPatch().'
            );
        }

        if (requestParameters['updateVideoCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateVideoCommentRequest',
                'Required parameter "updateVideoCommentRequest" was null or undefined when calling v1VideosVideoIdCommentsCommentIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos/{videoId}/comments/{commentId}`;
        urlPath = urlPath.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId'])));
        urlPath = urlPath.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVideoCommentRequestToJSON(requestParameters['updateVideoCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 動画コメントの状態（無効/有効）を更新します。
     * 動画コメント更新
     */
    async v1VideosVideoIdCommentsCommentIdPatch(requestParameters: V1VideosVideoIdCommentsCommentIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1VideosVideoIdCommentsCommentIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された動画のコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
     * 動画コメント一覧取得
     */
    async v1VideosVideoIdCommentsGetRaw(requestParameters: V1VideosVideoIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoCommentsResponse>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling v1VideosVideoIdCommentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/videos/{videoId}/comments`;
        urlPath = urlPath.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoCommentsResponseFromJSON(jsonValue));
    }

    /**
     * 指定された動画のコメント一覧を取得します。ページネーションと期間フィルタリングに対応しています。
     * 動画コメント一覧取得
     */
    async v1VideosVideoIdCommentsGet(requestParameters: V1VideosVideoIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoCommentsResponse> {
        const response = await this.v1VideosVideoIdCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
