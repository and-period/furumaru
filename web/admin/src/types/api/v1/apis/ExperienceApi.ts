/* tslint:disable */
/* eslint-disable */
/**
 * ふるマル API - 管理者向け
 * 管理者向けのふるマルAPIです。
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExperienceRequest,
  ErrorResponse,
  ExperienceResponse,
  ExperiencesResponse,
  UpdateExperienceRequest,
} from '../models/index';
import {
    CreateExperienceRequestFromJSON,
    CreateExperienceRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperienceResponseFromJSON,
    ExperienceResponseToJSON,
    ExperiencesResponseFromJSON,
    ExperiencesResponseToJSON,
    UpdateExperienceRequestFromJSON,
    UpdateExperienceRequestToJSON,
} from '../models/index';

export interface V1ExperiencesExperienceIdDeleteRequest {
    experienceId: string;
}

export interface V1ExperiencesExperienceIdGetRequest {
    experienceId: string;
}

export interface V1ExperiencesExperienceIdPatchRequest {
    experienceId: string;
    updateExperienceRequest: UpdateExperienceRequest;
}

export interface V1ExperiencesGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
    producerId?: string;
}

export interface V1ExperiencesPostRequest {
    createExperienceRequest: CreateExperienceRequest;
}

/**
 * 
 */
export class ExperienceApi extends runtime.BaseAPI {

    /**
     * 体験を削除します。
     * 体験削除
     */
    async v1ExperiencesExperienceIdDeleteRaw(requestParameters: V1ExperiencesExperienceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1ExperiencesExperienceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experiences/{experienceId}`;
        urlPath = urlPath.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験を削除します。
     * 体験削除
     */
    async v1ExperiencesExperienceIdDelete(requestParameters: V1ExperiencesExperienceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ExperiencesExperienceIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 指定された体験の詳細情報を取得します。
     * 体験取得
     */
    async v1ExperiencesExperienceIdGetRaw(requestParameters: V1ExperiencesExperienceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceResponse>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1ExperiencesExperienceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experiences/{experienceId}`;
        urlPath = urlPath.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceResponseFromJSON(jsonValue));
    }

    /**
     * 指定された体験の詳細情報を取得します。
     * 体験取得
     */
    async v1ExperiencesExperienceIdGet(requestParameters: V1ExperiencesExperienceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceResponse> {
        const response = await this.v1ExperiencesExperienceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 体験の情報を更新します。
     * 体験更新
     */
    async v1ExperiencesExperienceIdPatchRaw(requestParameters: V1ExperiencesExperienceIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['experienceId'] == null) {
            throw new runtime.RequiredError(
                'experienceId',
                'Required parameter "experienceId" was null or undefined when calling v1ExperiencesExperienceIdPatch().'
            );
        }

        if (requestParameters['updateExperienceRequest'] == null) {
            throw new runtime.RequiredError(
                'updateExperienceRequest',
                'Required parameter "updateExperienceRequest" was null or undefined when calling v1ExperiencesExperienceIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experiences/{experienceId}`;
        urlPath = urlPath.replace(`{${"experienceId"}}`, encodeURIComponent(String(requestParameters['experienceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExperienceRequestToJSON(requestParameters['updateExperienceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 体験の情報を更新します。
     * 体験更新
     */
    async v1ExperiencesExperienceIdPatch(requestParameters: V1ExperiencesExperienceIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1ExperiencesExperienceIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 体験の一覧を取得します。店舗、生産者、名前でのフィルタリングが可能です。
     * 体験一覧取得
     */
    async v1ExperiencesGetRaw(requestParameters: V1ExperiencesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperiencesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['producerId'] != null) {
            queryParameters['producerId'] = requestParameters['producerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experiences`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperiencesResponseFromJSON(jsonValue));
    }

    /**
     * 体験の一覧を取得します。店舗、生産者、名前でのフィルタリングが可能です。
     * 体験一覧取得
     */
    async v1ExperiencesGet(requestParameters: V1ExperiencesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperiencesResponse> {
        const response = await this.v1ExperiencesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい体験を登録します。コーディネーターは管理店舗の生産者の体験のみ登録可能です。
     * 体験登録
     */
    async v1ExperiencesPostRaw(requestParameters: V1ExperiencesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperienceResponse>> {
        if (requestParameters['createExperienceRequest'] == null) {
            throw new runtime.RequiredError(
                'createExperienceRequest',
                'Required parameter "createExperienceRequest" was null or undefined when calling v1ExperiencesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerauth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/experiences`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExperienceRequestToJSON(requestParameters['createExperienceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceResponseFromJSON(jsonValue));
    }

    /**
     * 新しい体験を登録します。コーディネーターは管理店舗の生産者の体験のみ登録可能です。
     * 体験登録
     */
    async v1ExperiencesPost(requestParameters: V1ExperiencesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperienceResponse> {
        const response = await this.v1ExperiencesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
