/* tslint:disable */
/* eslint-disable */
/**
 * Marche Online
 * マルシェ販売者用API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   * 管理者ID
   * @type {string}
   * @memberof AuthResponse
   */
  shopId: string
  /**
   * アクセストークン
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken: string
  /**
   * 更新トークン
   * @type {string}
   * @memberof AuthResponse
   */
  refreshToken: string
  /**
   * 有効期限
   * @type {number}
   * @memberof AuthResponse
   */
  expiresIn: number
  /**
   * トークン種別
   * @type {string}
   * @memberof AuthResponse
   */
  tokenType: string
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * ステータスコード
   * @type {number}
   * @memberof ErrorResponse
   */
  status: number
  /**
   * エラー概要
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string
  /**
   * エラー詳細
   * @type {string}
   * @memberof ErrorResponse
   */
  details: string
}
/**
 *
 * @export
 * @interface RefreshAuthTokenRequest
 */
export interface RefreshAuthTokenRequest {
  /**
   * 更新トークン
   * @type {string}
   * @memberof RefreshAuthTokenRequest
   */
  refreshToken: string
}
/**
 *
 * @export
 * @interface ShopMeResponse
 */
export interface ShopMeResponse {
  /**
   * 販売者ID
   * @type {string}
   * @memberof ShopMeResponse
   */
  id: string
  /**
   * メールアドレス
   * @type {string}
   * @memberof ShopMeResponse
   */
  email: string
}
/**
 *
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
  /**
   * ユーザー名 (メールアドレス)
   * @type {string}
   * @memberof SignInRequest
   */
  username: string
  /**
   * パスワード
   * @type {string}
   * @memberof SignInRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface UpdateShopEmailRequest
 */
export interface UpdateShopEmailRequest {
  /**
   * メールアドレス
   * @type {string}
   * @memberof UpdateShopEmailRequest
   */
  email: string
}
/**
 *
 * @export
 * @interface UpdateShopPasswordRequest
 */
export interface UpdateShopPasswordRequest {
  /**
   * 現在のパスワード
   * @type {string}
   * @memberof UpdateShopPasswordRequest
   */
  oldPassword: string
  /**
   * 新しいパスワード (8~32文字, 英小文字,数字を少なくとも1文字ずつは含む)
   * @type {string}
   * @memberof UpdateShopPasswordRequest
   */
  newPassword: string
  /**
   * パスワード (確認用)
   * @type {string}
   * @memberof UpdateShopPasswordRequest
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface VerifyShopEmailRequest
 */
export interface VerifyShopEmailRequest {
  /**
   * 認証コード
   * @type {string}
   * @memberof VerifyShopEmailRequest
   */
  verifyCode: string
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken: async (
      body: RefreshAuthTokenRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1RefreshAuthToken', 'body', body)
      const localVarPath = `/v1/auth/refresh-token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn: async (
      body: SignInRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1SignIn', 'body', body)
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetAuth(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetAuth(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1RefreshAuthToken(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignIn(
      body: SignInRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignIn(
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SignOut(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignOut(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary トークン検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetAuth(options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1GetAuth(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary トークン更新
     * @param {RefreshAuthTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RefreshAuthToken(
      body: RefreshAuthTokenRequest,
      options?: any
    ): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1RefreshAuthToken(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインイン
     * @param {SignInRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignIn(body: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
      return localVarFp
        .v1SignIn(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SignOut(options?: any): AxiosPromise<object> {
      return localVarFp
        .v1SignOut(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary トークン検証
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1GetAuth(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1GetAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary トークン更新
   * @param {RefreshAuthTokenRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1RefreshAuthToken(
    body: RefreshAuthTokenRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .v1RefreshAuthToken(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインイン
   * @param {SignInRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignIn(body: SignInRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignIn(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary サインアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public v1SignOut(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .v1SignOut(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ShopApi - axios parameter creator
 * @export
 */
export const ShopApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 販売者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetShopMe: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/shops/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateShopEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateShopEmail: async (
      body: UpdateShopEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateShopEmail', 'body', body)
      const localVarPath = `/v1/shops/me/email`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateShopPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateShopPassword: async (
      body: UpdateShopPasswordRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1UpdateShopPassword', 'body', body)
      const localVarPath = `/v1/shops/me/password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyShopEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyShopEmail: async (
      body: VerifyShopEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('v1VerifyShopEmail', 'body', body)
      const localVarPath = `/v1/shops/me/email/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ShopApi - functional programming interface
 * @export
 */
export const ShopApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShopApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 販売者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GetShopMe(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopMeResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GetShopMe(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateShopEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateShopEmail(
      body: UpdateShopEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateShopEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateShopPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpdateShopPassword(
      body: UpdateShopPasswordRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UpdateShopPassword(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyShopEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1VerifyShopEmail(
      body: VerifyShopEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1VerifyShopEmail(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ShopApi - factory interface
 * @export
 */
export const ShopApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShopApiFp(configuration)
  return {
    /**
     *
     * @summary 販売者情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GetShopMe(options?: any): AxiosPromise<ShopMeResponse> {
      return localVarFp
        .v1GetShopMe(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新
     * @param {UpdateShopEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateShopEmail(
      body: UpdateShopEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateShopEmail(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary パスワード更新
     * @param {UpdateShopPasswordRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpdateShopPassword(
      body: UpdateShopPasswordRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1UpdateShopPassword(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary メールアドレス更新 - コード検証
     * @param {VerifyShopEmailRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1VerifyShopEmail(
      body: VerifyShopEmailRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .v1VerifyShopEmail(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ShopApi - object-oriented interface
 * @export
 * @class ShopApi
 * @extends {BaseAPI}
 */
export class ShopApi extends BaseAPI {
  /**
   *
   * @summary 販売者情報取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopApi
   */
  public v1GetShopMe(options?: AxiosRequestConfig) {
    return ShopApiFp(this.configuration)
      .v1GetShopMe(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新
   * @param {UpdateShopEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopApi
   */
  public v1UpdateShopEmail(
    body: UpdateShopEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return ShopApiFp(this.configuration)
      .v1UpdateShopEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary パスワード更新
   * @param {UpdateShopPasswordRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopApi
   */
  public v1UpdateShopPassword(
    body: UpdateShopPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return ShopApiFp(this.configuration)
      .v1UpdateShopPassword(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary メールアドレス更新 - コード検証
   * @param {VerifyShopEmailRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopApi
   */
  public v1VerifyShopEmail(
    body: VerifyShopEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return ShopApiFp(this.configuration)
      .v1VerifyShopEmail(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
